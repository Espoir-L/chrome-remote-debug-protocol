/**************************************
 * Auto-generated by protocolJsonToApi
 **************************************/

declare module 'crdpClient'{
    
    /** Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects. Evaluation results are returned as mirror object that expose object type, string representation and unique identifier that can be used for further object reference. Original objects are maintained in memory unless they are either explicitly released or are released along with the other objects in their object group. */
    module Runtime{
        
        /** Unique script identifier. */
        type ScriptId = string;
        
        /** Unique object identifier. */
        type RemoteObjectId = string;
        
        /** Mirror object referencing original JavaScript object. */
        interface RemoteObject{
            /** Object type. */
            type: 'object' | 'function' | 'undefined' | 'string' | 'number' | 'boolean' | 'symbol';
            /** Object subtype hint. Specified for 'object' type values only. */
            subtype?: 'array' | 'null' | 'node' | 'regexp' | 'date' | 'map' | 'set' | 'iterator' | 'generator' | 'error';
            /** Object class (constructor) name. Specified for 'object' type values only. */
            className?: string;
            /** Remote object value in case of primitive values or JSON values (if it was requested), or description string if the value can not be JSON-stringified (like NaN, Infinity, -Infinity, -0). */
            value?: any;
            /** String representation of the object. */
            description?: string;
            /** Unique object identifier (for non-primitive values). */
            objectId?: RemoteObjectId;
            /** Preview containing abbreviated property values. Specified for 'object' type values only. */
            preview?: ObjectPreview;
            customPreview?: CustomPreview;
        }
        
        interface CustomPreview{
            header: string;
            hasBody: boolean;
            formatterObjectId: RemoteObjectId;
            bindRemoteObjectFunctionId: RemoteObjectId;
            configObjectId?: RemoteObjectId;
        }
        
        /** Object containing abbreviated remote object value. */
        interface ObjectPreview{
            /** Object type. */
            type: 'object' | 'function' | 'undefined' | 'string' | 'number' | 'boolean' | 'symbol';
            /** Object subtype hint. Specified for 'object' type values only. */
            subtype?: 'array' | 'null' | 'node' | 'regexp' | 'date' | 'map' | 'set' | 'iterator' | 'generator' | 'error';
            /** String representation of the object. */
            description?: string;
            /** True iff some of the properties or entries of the original object did not fit. */
            overflow: boolean;
            /** List of the properties. */
            properties: PropertyPreview[];
            /** List of the entries. Specified for 'map</code> and <code>set' subtype values only. */
            entries?: EntryPreview[];
        }
        
        interface PropertyPreview{
            /** Property name. */
            name: string;
            /** Object type. Accessor means that the property itself is an accessor property. */
            type: 'object' | 'function' | 'undefined' | 'string' | 'number' | 'boolean' | 'symbol' | 'accessor';
            /** User-friendly property value string. */
            value?: string;
            /** Nested value preview. */
            valuePreview?: ObjectPreview;
            /** Object subtype hint. Specified for 'object' type values only. */
            subtype?: 'array' | 'null' | 'node' | 'regexp' | 'date' | 'map' | 'set' | 'iterator' | 'generator' | 'error';
        }
        
        interface EntryPreview{
            /** Preview of the key. Specified for map-like collection entries. */
            key?: ObjectPreview;
            /** Preview of the value. */
            value: ObjectPreview;
        }
        
        /** Object property descriptor. */
        interface PropertyDescriptor{
            /** Property name or symbol description. */
            name: string;
            /** The value associated with the property. */
            value?: RemoteObject;
            /** True if the value associated with the property may be changed (data descriptors only). */
            writable?: boolean;
            /** A function which serves as a getter for the property, or 'undefined' if there is no getter (accessor descriptors only). */
            get?: RemoteObject;
            /** A function which serves as a setter for the property, or 'undefined' if there is no setter (accessor descriptors only). */
            set?: RemoteObject;
            /** True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. */
            configurable: boolean;
            /** True if this property shows up during enumeration of the properties on the corresponding object. */
            enumerable: boolean;
            /** True if the result was thrown during the evaluation. */
            wasThrown?: boolean;
            /** True if the property is owned for the object. */
            isOwn?: boolean;
            /** Property symbol object, if the property is of the 'symbol' type. */
            symbol?: RemoteObject;
        }
        
        /** Object internal property descriptor. This property isn't normally visible in JavaScript code. */
        interface InternalPropertyDescriptor{
            /** Conventional property name. */
            name: string;
            /** The value associated with the property. */
            value?: RemoteObject;
        }
        
        /** Represents function call argument. Either remote object id 'objectId</code> or primitive <code>value' or neither of (for undefined) them should be specified. */
        interface CallArgument{
            /** Primitive value, or description string if the value can not be JSON-stringified (like NaN, Infinity, -Infinity, -0). */
            value?: any;
            /** Remote object handle. */
            objectId?: RemoteObjectId;
            /** Object type. */
            type?: 'object' | 'function' | 'undefined' | 'string' | 'number' | 'boolean' | 'symbol';
        }
        
        /** Id of an execution context. */
        type ExecutionContextId = number;
        
        /** Description of an isolated world. */
        interface ExecutionContextDescription{
            /** Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed. */
            id: ExecutionContextId;
            /** Whether context is the default page context (as opposite to e.g. context of content script). */
            isDefault: boolean;
            /** Execution context origin. */
            origin: string;
            /** Human readable name describing given context. */
            name: string;
            /** Id of the owning frame. May be an empty string if the context is not associated with a frame. */
            frameId: string;
        }
        
        /** Detailed information on exception (or error) that was thrown during script compilation or execution. */
        interface ExceptionDetails{
            /** Exception text. */
            text: string;
            /** URL of the message origin. */
            url?: string;
            /** Script ID of the message origin. */
            scriptId?: string;
            /** Line number in the resource that generated this message. */
            line?: number;
            /** Column number in the resource that generated this message. */
            column?: number;
            /** JavaScript stack trace for assertions and error messages. */
            stack?: StackTrace;
        }
        
        /** Stack entry for runtime errors and assertions. */
        interface CallFrame{
            /** JavaScript function name. */
            functionName: string;
            /** JavaScript script id. */
            scriptId: ScriptId;
            /** JavaScript script name or url. */
            url: string;
            /** JavaScript script line number. */
            lineNumber: number;
            /** JavaScript script column number. */
            columnNumber: number;
        }
        
        /** Call frames for assertions or error messages. */
        interface StackTrace{
            /** String label of this stack trace. For async traces this may be a name of the function that initiated the async call. */
            description?: string;
            /** JavaScript function name. */
            callFrames: CallFrame[];
            /** Asynchronous JavaScript stack trace that preceded this stack, if available. */
            parent?: StackTrace;
        }
        
        interface EvaluateRequest{
            /** Expression to evaluate. */
            expression: string;
            /** Symbolic group name that can be used to release multiple objects. */
            objectGroup?: string;
            /** Determines whether Command Line API should be available during the evaluation. */
            includeCommandLineAPI?: boolean;
            /** Specifies whether evaluation should stop on exceptions and mute console. Overrides setPauseOnException state. */
            doNotPauseOnExceptionsAndMuteConsole?: boolean;
            /** Specifies in which isolated context to perform evaluation. Each content script lives in an isolated context and this parameter may be used to specify one of those contexts. If the parameter is omitted or 0 the evaluation will be performed in the context of the inspected page. */
            contextId?: ExecutionContextId;
            /** Whether the result is expected to be a JSON object that should be sent by value. */
            returnByValue?: boolean;
            /** Whether preview should be generated for the result. */
            generatePreview?: boolean;
            /** Whether execution should be treated as initiated by user in the UI. */
            userGesture?: boolean;
        }
        
        interface EvaluateResponse{
            /** Evaluation result. */
            result: RemoteObject;
            /** True if the result was thrown during the evaluation. */
            wasThrown?: boolean;
            /** Exception details. */
            exceptionDetails?: ExceptionDetails;
        }
        
        interface CallFunctionOnRequest{
            /** Identifier of the object to call function on. */
            objectId: RemoteObjectId;
            /** Declaration of the function to call. */
            functionDeclaration: string;
            /** Call arguments. All call arguments must belong to the same JavaScript world as the target object. */
            arguments?: CallArgument[];
            /** Specifies whether function call should stop on exceptions and mute console. Overrides setPauseOnException state. */
            doNotPauseOnExceptionsAndMuteConsole?: boolean;
            /** Whether the result is expected to be a JSON object which should be sent by value. */
            returnByValue?: boolean;
            /** Whether preview should be generated for the result. */
            generatePreview?: boolean;
            /** Whether execution should be treated as initiated by user in the UI. */
            userGesture?: boolean;
        }
        
        interface CallFunctionOnResponse{
            /** Call result. */
            result: RemoteObject;
            /** True if the result was thrown during the evaluation. */
            wasThrown?: boolean;
        }
        
        interface GetPropertiesRequest{
            /** Identifier of the object to return properties for. */
            objectId: RemoteObjectId;
            /** If true, returns properties belonging only to the element itself, not to its prototype chain. */
            ownProperties?: boolean;
            /** If true, returns accessor properties (with getter/setter) only; internal properties are not returned either. */
            accessorPropertiesOnly?: boolean;
            /** Whether preview should be generated for the results. */
            generatePreview?: boolean;
        }
        
        interface GetPropertiesResponse{
            /** Object properties. */
            result: PropertyDescriptor[];
            /** Internal object properties (only of the element itself). */
            internalProperties?: InternalPropertyDescriptor[];
            /** Exception details. */
            exceptionDetails?: ExceptionDetails;
        }
        
        interface ReleaseObjectRequest{
            /** Identifier of the object to release. */
            objectId: RemoteObjectId;
        }
        
        interface ReleaseObjectGroupRequest{
            /** Symbolic object group name. */
            objectGroup: string;
        }
        
        interface SetCustomObjectFormatterEnabledRequest{
            enabled: boolean;
        }
        
        interface CompileScriptRequest{
            /** Expression to compile. */
            expression: string;
            /** Source url to be set for the script. */
            sourceURL: string;
            /** Specifies whether the compiled script should be persisted. */
            persistScript: boolean;
            /** Specifies in which isolated context to perform script run. Each content script lives in an isolated context and this parameter is used to specify one of those contexts. */
            executionContextId: ExecutionContextId;
        }
        
        interface CompileScriptResponse{
            /** Id of the script. */
            scriptId?: ScriptId;
            /** Exception details. */
            exceptionDetails?: ExceptionDetails;
        }
        
        interface RunScriptRequest{
            /** Id of the script to run. */
            scriptId: ScriptId;
            /** Specifies in which isolated context to perform script run. Each content script lives in an isolated context and this parameter is used to specify one of those contexts. */
            executionContextId: ExecutionContextId;
            /** Symbolic group name that can be used to release multiple objects. */
            objectGroup?: string;
            /** Specifies whether script run should stop on exceptions and mute console. Overrides setPauseOnException state. */
            doNotPauseOnExceptionsAndMuteConsole?: boolean;
            /** Determines whether Command Line API should be available during the evaluation. */
            includeCommandLineAPI?: boolean;
        }
        
        interface RunScriptResponse{
            /** Run result. */
            result: RemoteObject;
            /** Exception details. */
            exceptionDetails?: ExceptionDetails;
        }
        
        interface ExecutionContextCreatedEvent{
            /** A newly created execution contex. */
            context: ExecutionContextDescription;
        }
        
        interface ExecutionContextDestroyedEvent{
            /** Id of the destroyed context */
            executionContextId: ExecutionContextId;
        }
        
        interface InspectRequestedEvent{
            object: RemoteObject;
            hints: any;
        }
    }
    
    interface IRuntime{
        /** Evaluates expression on global object. */
        evaluate(params: Runtime.EvaluateRequest): Promise<Runtime.EvaluateResponse>;
        /** Calls function with given declaration on the given object. Object group of the result is inherited from the target object. */
        callFunctionOn(params: Runtime.CallFunctionOnRequest): Promise<Runtime.CallFunctionOnResponse>;
        /** Returns properties of a given object. Object group of the result is inherited from the target object. */
        getProperties(params: Runtime.GetPropertiesRequest): Promise<Runtime.GetPropertiesResponse>;
        /** Releases remote object with given id. */
        releaseObject(params: Runtime.ReleaseObjectRequest): Promise<void>;
        /** Releases all remote objects that belong to a given group. */
        releaseObjectGroup(params: Runtime.ReleaseObjectGroupRequest): Promise<void>;
        /** Tells inspected instance(worker or page) that it can run in case it was started paused. */
        run(): Promise<void>;
        /** Enables reporting of execution contexts creation by means of 'executionContextCreated' event. When the reporting gets enabled the event will be sent immediately for each existing execution context. */
        enable(): Promise<void>;
        /** Disables reporting of execution contexts creation. */
        disable(): Promise<void>;
        setCustomObjectFormatterEnabled(params: Runtime.SetCustomObjectFormatterEnabledRequest): Promise<void>;
        /** Compiles expression. */
        compileScript(params: Runtime.CompileScriptRequest): Promise<Runtime.CompileScriptResponse>;
        /** Runs script with given id in a given context. */
        runScript(params: Runtime.RunScriptRequest): Promise<Runtime.RunScriptResponse>;
        /** Issued when new execution context is created. */
        onExecutionContextCreated(handler: (event: Runtime.ExecutionContextCreatedEvent) => void);
        /** Issued when execution context is destroyed. */
        onExecutionContextDestroyed(handler: (event: Runtime.ExecutionContextDestroyedEvent) => void);
        /** Issued when all executionContexts were cleared in browser */
        onExecutionContextsCleared(handler: () => void);
        onInspectRequested(handler: (event: Runtime.InspectRequestedEvent) => void);
    }
    
    /** Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing breakpoints, stepping through execution, exploring stack traces, etc. */
    module Debugger{
        
        /** Breakpoint identifier. */
        type BreakpointId = string;
        
        /** Call frame identifier. */
        type CallFrameId = string;
        
        /** Location in the source code. */
        interface Location{
            /** Script identifier as reported in the 'Debugger.scriptParsed'. */
            scriptId: Runtime.ScriptId;
            /** Line number in the script (0-based). */
            lineNumber: number;
            /** Column number in the script (0-based). */
            columnNumber?: number;
        }
        
        /** Location in the source code. */
        interface ScriptPosition{
            line: number;
            column: number;
        }
        
        /** Information about the function. */
        interface FunctionDetails{
            /** Location of the function, none for native functions. */
            location?: Location;
            /** Name of the function. */
            functionName: string;
            /** Whether this is a generator function. */
            isGenerator: boolean;
            /** Scope chain for this closure. */
            scopeChain?: Scope[];
        }
        
        /** Information about the generator object. */
        interface GeneratorObjectDetails{
            /** Generator function. */
            function: Runtime.RemoteObject;
            /** Name of the generator function. */
            functionName: string;
            /** Current generator object status. */
            status: 'running' | 'suspended' | 'closed';
            /** If suspended, location where generator function was suspended (e.g. location of the last 'yield'). Otherwise, location of the generator function. */
            location?: Location;
        }
        
        /** Collection entry. */
        interface CollectionEntry{
            /** Entry key of a map-like collection, otherwise not provided. */
            key?: Runtime.RemoteObject;
            /** Entry value. */
            value: Runtime.RemoteObject;
        }
        
        /** JavaScript call frame. Array of call frames form the call stack. */
        interface CallFrame{
            /** Call frame identifier. This identifier is only valid while the virtual machine is paused. */
            callFrameId: CallFrameId;
            /** Name of the JavaScript function called on this call frame. */
            functionName: string;
            /** Location in the source code. */
            functionLocation?: Location;
            /** Location in the source code. */
            location: Location;
            /** Scope chain for this call frame. */
            scopeChain: Scope[];
            /** 'this' object for this call frame. */
            this: Runtime.RemoteObject;
            /** The value being returned, if the function is at return point. */
            returnValue?: Runtime.RemoteObject;
        }
        
        /** Scope description. */
        interface Scope{
            /** Scope type. */
            type: 'global' | 'local' | 'with' | 'closure' | 'catch' | 'block' | 'script';
            /** Object representing the scope. For 'global</code> and <code>with' scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties. */
            object: Runtime.RemoteObject;
            name?: string;
            /** Location in the source code where scope starts */
            startLocation?: Location;
            /** Location in the source code where scope ends */
            endLocation?: Location;
        }
        
        /** Error data for setScriptSource command. Contains uncompilable script source error. */
        interface SetScriptSourceError{
            /** Compiler error message */
            message: string;
            /** Compile error line number (1-based) */
            lineNumber: number;
            /** Compile error column number (1-based) */
            columnNumber: number;
        }
        
        /** Search match for resource. */
        interface SearchMatch{
            /** Line number in resource content. */
            lineNumber: number;
            /** Line with match content. */
            lineContent: string;
        }
        
        interface SetBreakpointsActiveRequest{
            /** New value for breakpoints active state. */
            active: boolean;
        }
        
        interface SetSkipAllPausesRequest{
            /** New value for skip pauses state. */
            skipped: boolean;
        }
        
        interface SetBreakpointByUrlRequest{
            /** Line number to set breakpoint at. */
            lineNumber: number;
            /** URL of the resources to set breakpoint on. */
            url?: string;
            /** Regex pattern for the URLs of the resources to set breakpoints on. Either 'url</code> or <code>urlRegex' must be specified. */
            urlRegex?: string;
            /** Offset in the line to set breakpoint at. */
            columnNumber?: number;
            /** Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true. */
            condition?: string;
        }
        
        interface SetBreakpointByUrlResponse{
            /** Id of the created breakpoint for further reference. */
            breakpointId: BreakpointId;
            /** List of the locations this breakpoint resolved into upon addition. */
            locations: Location[];
        }
        
        interface SetBreakpointRequest{
            /** Location to set breakpoint in. */
            location: Location;
            /** Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true. */
            condition?: string;
        }
        
        interface SetBreakpointResponse{
            /** Id of the created breakpoint for further reference. */
            breakpointId: BreakpointId;
            /** Location this breakpoint resolved into. */
            actualLocation: Location;
        }
        
        interface RemoveBreakpointRequest{
            breakpointId: BreakpointId;
        }
        
        interface ContinueToLocationRequest{
            /** Location to continue to. */
            location: Location;
            /** Allows breakpoints at the intemediate positions inside statements. */
            interstatementLocation?: boolean;
        }
        
        interface SearchInContentRequest{
            /** Id of the script to search in. */
            scriptId: Runtime.ScriptId;
            /** String to search for. */
            query: string;
            /** If true, search is case sensitive. */
            caseSensitive?: boolean;
            /** If true, treats string parameter as regex. */
            isRegex?: boolean;
        }
        
        interface SearchInContentResponse{
            /** List of search matches. */
            result: SearchMatch[];
        }
        
        interface CanSetScriptSourceResponse{
            /** True if 'setScriptSource' is supported. */
            result: boolean;
        }
        
        interface SetScriptSourceRequest{
            /** Id of the script to edit. */
            scriptId: Runtime.ScriptId;
            /** New content of the script. */
            scriptSource: string;
            /**  If true the change will not actually be applied. Preview mode may be used to get result description without actually modifying the code. */
            preview?: boolean;
        }
        
        interface SetScriptSourceResponse{
            /** New stack trace in case editing has happened while VM was stopped. */
            callFrames?: CallFrame[];
            /** Whether current call stack  was modified after applying the changes. */
            stackChanged?: boolean;
            /** Async stack trace, if any. */
            asyncStackTrace?: Runtime.StackTrace;
            /** Error data if any. */
            compileError?: SetScriptSourceError;
        }
        
        interface RestartFrameRequest{
            /** Call frame identifier to evaluate on. */
            callFrameId: CallFrameId;
        }
        
        interface RestartFrameResponse{
            /** New stack trace. */
            callFrames: CallFrame[];
            /** Async stack trace, if any. */
            asyncStackTrace?: Runtime.StackTrace;
        }
        
        interface GetScriptSourceRequest{
            /** Id of the script to get source for. */
            scriptId: Runtime.ScriptId;
        }
        
        interface GetScriptSourceResponse{
            /** Script source. */
            scriptSource: string;
        }
        
        interface GetFunctionDetailsRequest{
            /** Id of the function to get details for. */
            functionId: Runtime.RemoteObjectId;
        }
        
        interface GetFunctionDetailsResponse{
            /** Information about the function. */
            details: FunctionDetails;
        }
        
        interface GetGeneratorObjectDetailsRequest{
            /** Id of the generator object to get details for. */
            objectId: Runtime.RemoteObjectId;
        }
        
        interface GetGeneratorObjectDetailsResponse{
            /** Information about the generator object. */
            details: GeneratorObjectDetails;
        }
        
        interface GetCollectionEntriesRequest{
            /** Id of the collection to get entries for. */
            objectId: Runtime.RemoteObjectId;
        }
        
        interface GetCollectionEntriesResponse{
            /** Array of collection entries. */
            entries: CollectionEntry[];
        }
        
        interface SetPauseOnExceptionsRequest{
            /** Pause on exceptions mode. */
            state: 'none' | 'uncaught' | 'all';
        }
        
        interface EvaluateOnCallFrameRequest{
            /** Call frame identifier to evaluate on. */
            callFrameId: CallFrameId;
            /** Expression to evaluate. */
            expression: string;
            /** String object group name to put result into (allows rapid releasing resulting object handles using 'releaseObjectGroup'). */
            objectGroup?: string;
            /** Specifies whether command line API should be available to the evaluated expression, defaults to false. */
            includeCommandLineAPI?: boolean;
            /** Specifies whether evaluation should stop on exceptions and mute console. Overrides setPauseOnException state. */
            doNotPauseOnExceptionsAndMuteConsole?: boolean;
            /** Whether the result is expected to be a JSON object that should be sent by value. */
            returnByValue?: boolean;
            /** Whether preview should be generated for the result. */
            generatePreview?: boolean;
        }
        
        interface EvaluateOnCallFrameResponse{
            /** Object wrapper for the evaluation result. */
            result: Runtime.RemoteObject;
            /** True if the result was thrown during the evaluation. */
            wasThrown?: boolean;
            /** Exception details. */
            exceptionDetails?: Runtime.ExceptionDetails;
        }
        
        interface SetVariableValueRequest{
            /** 0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch' scope types are allowed. Other scopes could be manipulated manually. */
            scopeNumber: number;
            /** Variable name. */
            variableName: string;
            /** New variable value. */
            newValue: Runtime.CallArgument;
            /** Id of callframe that holds variable. */
            callFrameId: CallFrameId;
        }
        
        interface GetBacktraceResponse{
            /** Call stack the virtual machine stopped on. */
            callFrames: CallFrame[];
            /** Async stack trace, if any. */
            asyncStackTrace?: Runtime.StackTrace;
        }
        
        interface SetAsyncCallStackDepthRequest{
            /** Maximum depth of async call stacks. Setting to '0' will effectively disable collecting async call stacks (default). */
            maxDepth: number;
        }
        
        interface SetBlackboxPatternsRequest{
            /** Array of regexps that will be used to check script url for blackbox state. */
            patterns: string[];
        }
        
        interface SetBlackboxedRangesRequest{
            /** Id of the script. */
            scriptId: Runtime.ScriptId;
            positions: ScriptPosition[];
        }
        
        interface ScriptParsedEvent{
            /** Identifier of the script parsed. */
            scriptId: Runtime.ScriptId;
            /** URL or name of the script parsed (if any). */
            url: string;
            /** Line offset of the script within the resource with given URL (for script tags). */
            startLine: number;
            /** Column offset of the script within the resource with given URL. */
            startColumn: number;
            /** Last line of the script. */
            endLine: number;
            /** Length of the last line of the script. */
            endColumn: number;
            /** Specifies script creation context. */
            executionContextId: Runtime.ExecutionContextId;
            /** Content hash of the script. */
            hash: string;
            /** Determines whether this script is a user extension script. */
            isContentScript?: boolean;
            /** Determines whether this script is an internal script. */
            isInternalScript?: boolean;
            /** True, if this script is generated as a result of the live edit operation. */
            isLiveEdit?: boolean;
            /** URL of source map associated with script (if any). */
            sourceMapURL?: string;
            /** True, if this script has sourceURL. */
            hasSourceURL?: boolean;
            /** True, if '//@ sourceURL' or '//@ sourceMappingURL' was used. */
            deprecatedCommentWasUsed?: boolean;
        }
        
        interface ScriptFailedToParseEvent{
            /** Identifier of the script parsed. */
            scriptId: Runtime.ScriptId;
            /** URL or name of the script parsed (if any). */
            url: string;
            /** Line offset of the script within the resource with given URL (for script tags). */
            startLine: number;
            /** Column offset of the script within the resource with given URL. */
            startColumn: number;
            /** Last line of the script. */
            endLine: number;
            /** Length of the last line of the script. */
            endColumn: number;
            /** Specifies script creation context. */
            executionContextId: Runtime.ExecutionContextId;
            /** Content hash of the script. */
            hash: string;
            /** Determines whether this script is a user extension script. */
            isContentScript?: boolean;
            /** Determines whether this script is an internal script. */
            isInternalScript?: boolean;
            /** URL of source map associated with script (if any). */
            sourceMapURL?: string;
            /** True, if this script has sourceURL. */
            hasSourceURL?: boolean;
            /** True, if '//@ sourceURL' or '//@ sourceMappingURL' was used. */
            deprecatedCommentWasUsed?: boolean;
        }
        
        interface BreakpointResolvedEvent{
            /** Breakpoint unique identifier. */
            breakpointId: BreakpointId;
            /** Actual breakpoint location. */
            location: Location;
        }
        
        interface PausedEvent{
            /** Call stack the virtual machine stopped on. */
            callFrames: CallFrame[];
            /** Pause reason. */
            reason: 'XHR' | 'DOM' | 'EventListener' | 'exception' | 'assert' | 'CSPViolation' | 'debugCommand' | 'promiseRejection' | 'other';
            /** Object containing break-specific auxiliary properties. */
            data?: any;
            /** Hit breakpoints IDs */
            hitBreakpoints?: string[];
            /** Async stack trace, if any. */
            asyncStackTrace?: Runtime.StackTrace;
        }
    }
    
    interface IDebugger{
        /** Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received. */
        enable(): Promise<void>;
        /** Disables debugger for given page. */
        disable(): Promise<void>;
        /** Activates / deactivates all breakpoints on the page. */
        setBreakpointsActive(params: Debugger.SetBreakpointsActiveRequest): Promise<void>;
        /** Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc). */
        setSkipAllPauses(params: Debugger.SetSkipAllPausesRequest): Promise<void>;
        /** Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in 'locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved' events issued. This logical breakpoint will survive page reloads. */
        setBreakpointByUrl(params: Debugger.SetBreakpointByUrlRequest): Promise<Debugger.SetBreakpointByUrlResponse>;
        /** Sets JavaScript breakpoint at a given location. */
        setBreakpoint(params: Debugger.SetBreakpointRequest): Promise<Debugger.SetBreakpointResponse>;
        /** Removes JavaScript breakpoint. */
        removeBreakpoint(params: Debugger.RemoveBreakpointRequest): Promise<void>;
        /** Continues execution until specific location is reached. */
        continueToLocation(params: Debugger.ContinueToLocationRequest): Promise<void>;
        /** Steps over the statement. */
        stepOver(): Promise<void>;
        /** Steps into the function call. */
        stepInto(): Promise<void>;
        /** Steps out of the function call. */
        stepOut(): Promise<void>;
        /** Stops on the next JavaScript statement. */
        pause(): Promise<void>;
        /** Resumes JavaScript execution. */
        resume(): Promise<void>;
        /** Searches for given string in script content. */
        searchInContent(params: Debugger.SearchInContentRequest): Promise<Debugger.SearchInContentResponse>;
        /** Always returns true. */
        canSetScriptSource(): Promise<Debugger.CanSetScriptSourceResponse>;
        /** Edits JavaScript source live. */
        setScriptSource(params: Debugger.SetScriptSourceRequest): Promise<Debugger.SetScriptSourceResponse>;
        /** Restarts particular call frame from the beginning. */
        restartFrame(params: Debugger.RestartFrameRequest): Promise<Debugger.RestartFrameResponse>;
        /** Returns source for the script with given id. */
        getScriptSource(params: Debugger.GetScriptSourceRequest): Promise<Debugger.GetScriptSourceResponse>;
        /** Returns detailed information on given function. */
        getFunctionDetails(params: Debugger.GetFunctionDetailsRequest): Promise<Debugger.GetFunctionDetailsResponse>;
        /** Returns detailed information on given generator object. */
        getGeneratorObjectDetails(params: Debugger.GetGeneratorObjectDetailsRequest): Promise<Debugger.GetGeneratorObjectDetailsResponse>;
        /** Returns entries of given collection. */
        getCollectionEntries(params: Debugger.GetCollectionEntriesRequest): Promise<Debugger.GetCollectionEntriesResponse>;
        /** Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is 'none'. */
        setPauseOnExceptions(params: Debugger.SetPauseOnExceptionsRequest): Promise<void>;
        /** Evaluates expression on a given call frame. */
        evaluateOnCallFrame(params: Debugger.EvaluateOnCallFrameRequest): Promise<Debugger.EvaluateOnCallFrameResponse>;
        /** Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually. */
        setVariableValue(params: Debugger.SetVariableValueRequest): Promise<void>;
        /** Returns call stack including variables changed since VM was paused. VM must be paused. */
        getBacktrace(): Promise<Debugger.GetBacktraceResponse>;
        /** Enables or disables async call stacks tracking. */
        setAsyncCallStackDepth(params: Debugger.SetAsyncCallStackDepthRequest): Promise<void>;
        /** Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. */
        setBlackboxPatterns(params: Debugger.SetBlackboxPatternsRequest): Promise<void>;
        /** Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted. */
        setBlackboxedRanges(params: Debugger.SetBlackboxedRangesRequest): Promise<void>;
        /** Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger. */
        onScriptParsed(handler: (event: Debugger.ScriptParsedEvent) => void);
        /** Fired when virtual machine fails to parse the script. */
        onScriptFailedToParse(handler: (event: Debugger.ScriptFailedToParseEvent) => void);
        /** Fired when breakpoint is resolved to an actual script and location. */
        onBreakpointResolved(handler: (event: Debugger.BreakpointResolvedEvent) => void);
        /** Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria. */
        onPaused(handler: (event: Debugger.PausedEvent) => void);
        /** Fired when the virtual machine resumed execution. */
        onResumed(handler: () => void);
    }
    
    module Profiler{
        
        /** CPU Profile node. Holds callsite information, execution statistics and child nodes. */
        interface CPUProfileNode{
            /** Function name. */
            functionName: string;
            /** Script identifier. */
            scriptId: Runtime.ScriptId;
            /** URL. */
            url: string;
            /** 1-based line number of the function start position. */
            lineNumber: number;
            /** 1-based column number of the function start position. */
            columnNumber: number;
            /** Number of samples where this node was on top of the call stack. */
            hitCount: number;
            /** Call UID. */
            callUID: number;
            /** Child nodes. */
            children: CPUProfileNode[];
            /** The reason of being not optimized. The function may be deoptimized or marked as don't optimize. */
            deoptReason: string;
            /** Unique id of the node. */
            id: number;
            /** An array of source position ticks. */
            positionTicks: PositionTickInfo[];
        }
        
        /** Profile. */
        interface CPUProfile{
            head: CPUProfileNode;
            /** Profiling start time in seconds. */
            startTime: number;
            /** Profiling end time in seconds. */
            endTime: number;
            /** Ids of samples top nodes. */
            samples?: number[];
            /** Timestamps of the samples in microseconds. */
            timestamps?: number[];
        }
        
        /** Specifies a number of samples attributed to a certain source position. */
        interface PositionTickInfo{
            /** Source line number (1-based). */
            line: number;
            /** Number of samples attributed to the source line. */
            ticks: number;
        }
        
        interface SetSamplingIntervalRequest{
            /** New sampling interval in microseconds. */
            interval: number;
        }
        
        interface StopResponse{
            /** Recorded profile. */
            profile: CPUProfile;
        }
        
        interface ConsoleProfileStartedEvent{
            id: string;
            /** Location of console.profile(). */
            location: Debugger.Location;
            /** Profile title passed as argument to console.profile(). */
            title?: string;
        }
        
        interface ConsoleProfileFinishedEvent{
            id: string;
            /** Location of console.profileEnd(). */
            location: Debugger.Location;
            profile: CPUProfile;
            /** Profile title passed as argunet to console.profile(). */
            title?: string;
        }
    }
    
    interface IProfiler{
        enable(): Promise<void>;
        disable(): Promise<void>;
        /** Changes CPU profiler sampling interval. Must be called before CPU profiles recording started. */
        setSamplingInterval(params: Profiler.SetSamplingIntervalRequest): Promise<void>;
        start(): Promise<void>;
        stop(): Promise<Profiler.StopResponse>;
        /** Sent when new profile recodring is started using console.profile() call. */
        onConsoleProfileStarted(handler: (event: Profiler.ConsoleProfileStartedEvent) => void);
        onConsoleProfileFinished(handler: (event: Profiler.ConsoleProfileFinishedEvent) => void);
    }
    
    module HeapProfiler{
        
        /** Heap snapshot object id. */
        type HeapSnapshotObjectId = string;
        
        /** Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes. */
        interface SamplingHeapProfileNode{
            /** Function name. */
            functionName: string;
            /** Script identifier. */
            scriptId: Runtime.ScriptId;
            /** URL. */
            url: string;
            /** 1-based line number of the function start position. */
            lineNumber: number;
            /** 1-based column number of the function start position. */
            columnNumber: number;
            /** Allocations size in bytes for the node excluding children. */
            selfSize: number;
            /** Child nodes. */
            children: SamplingHeapProfileNode[];
        }
        
        /** Profile. */
        interface SamplingHeapProfile{
            head: SamplingHeapProfileNode;
        }
        
        interface StartTrackingHeapObjectsRequest{
            trackAllocations?: boolean;
        }
        
        interface StopTrackingHeapObjectsRequest{
            /** If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped. */
            reportProgress?: boolean;
        }
        
        interface TakeHeapSnapshotRequest{
            /** If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken. */
            reportProgress?: boolean;
        }
        
        interface GetObjectByHeapObjectIdRequest{
            objectId: HeapSnapshotObjectId;
            /** Symbolic group name that can be used to release multiple objects. */
            objectGroup?: string;
        }
        
        interface GetObjectByHeapObjectIdResponse{
            /** Evaluation result. */
            result: Runtime.RemoteObject;
        }
        
        interface AddInspectedHeapObjectRequest{
            /** Heap snapshot object id to be accessible by means of $x command line API. */
            heapObjectId: HeapSnapshotObjectId;
        }
        
        interface GetHeapObjectIdRequest{
            /** Identifier of the object to get heap object id for. */
            objectId: Runtime.RemoteObjectId;
        }
        
        interface GetHeapObjectIdResponse{
            /** Id of the heap snapshot object corresponding to the passed remote object id. */
            heapSnapshotObjectId: HeapSnapshotObjectId;
        }
        
        interface StartSamplingRequest{
            /** Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes. */
            samplingInterval?: number;
        }
        
        interface StopSamplingResponse{
            /** Recorded sampling heap profile. */
            profile: SamplingHeapProfile;
        }
        
        interface AddHeapSnapshotChunkEvent{
            chunk: string;
        }
        
        interface ReportHeapSnapshotProgressEvent{
            done: number;
            total: number;
            finished?: boolean;
        }
        
        interface LastSeenObjectIdEvent{
            lastSeenObjectId: number;
            timestamp: number;
        }
        
        interface HeapStatsUpdateEvent{
            /** An array of triplets. Each triplet describes a fragment. The first integer is the fragment index, the second integer is a total count of objects for the fragment, the third integer is a total size of the objects for the fragment. */
            statsUpdate: number[];
        }
    }
    
    interface IHeapProfiler{
        enable(): Promise<void>;
        disable(): Promise<void>;
        startTrackingHeapObjects(params: HeapProfiler.StartTrackingHeapObjectsRequest): Promise<void>;
        stopTrackingHeapObjects(params: HeapProfiler.StopTrackingHeapObjectsRequest): Promise<void>;
        takeHeapSnapshot(params: HeapProfiler.TakeHeapSnapshotRequest): Promise<void>;
        collectGarbage(): Promise<void>;
        getObjectByHeapObjectId(params: HeapProfiler.GetObjectByHeapObjectIdRequest): Promise<HeapProfiler.GetObjectByHeapObjectIdResponse>;
        /** Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions). */
        addInspectedHeapObject(params: HeapProfiler.AddInspectedHeapObjectRequest): Promise<void>;
        getHeapObjectId(params: HeapProfiler.GetHeapObjectIdRequest): Promise<HeapProfiler.GetHeapObjectIdResponse>;
        startSampling(params: HeapProfiler.StartSamplingRequest): Promise<void>;
        stopSampling(): Promise<HeapProfiler.StopSamplingResponse>;
        onAddHeapSnapshotChunk(handler: (event: HeapProfiler.AddHeapSnapshotChunkEvent) => void);
        onResetProfiles(handler: () => void);
        onReportHeapSnapshotProgress(handler: (event: HeapProfiler.ReportHeapSnapshotProgressEvent) => void);
        /** If heap objects tracking has been started then backend regulary sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event. */
        onLastSeenObjectId(handler: (event: HeapProfiler.LastSeenObjectIdEvent) => void);
        /** If heap objects tracking has been started then backend may send update for one or more fragments */
        onHeapStatsUpdate(handler: (event: HeapProfiler.HeapStatsUpdateEvent) => void);
    }
    
    module Inspector{
        
        interface DetachedEvent{
            /** The reason why connection has been terminated. */
            reason: string;
        }
    }
    
    interface IInspector{
        /** Enables inspector domain notifications. */
        enable(): Promise<void>;
        /** Disables inspector domain notifications. */
        disable(): Promise<void>;
        /** Fired when remote debugging connection is about to be terminated. Contains detach reason. */
        onDetached(handler: (event: Inspector.DetachedEvent) => void);
        /** Fired when debugging target has crashed */
        onTargetCrashed(handler: () => void);
    }
    
    module Memory{
        
        /** Memory pressure level. */
        type PressureLevel = 'moderate' | 'critical';
        
        interface GetDOMCountersResponse{
            documents: number;
            nodes: number;
            jsEventListeners: number;
        }
        
        interface SetPressureNotificationsSuppressedRequest{
            /** If true, memory pressure notifications will be suppressed. */
            suppressed: boolean;
        }
        
        interface SimulatePressureNotificationRequest{
            /** Memory pressure level of the notification. */
            level: PressureLevel;
        }
    }
    
    interface IMemory{
        getDOMCounters(): Promise<Memory.GetDOMCountersResponse>;
        /** Enable/disable suppressing memory pressure notifications in all processes. */
        setPressureNotificationsSuppressed(params: Memory.SetPressureNotificationsSuppressedRequest): Promise<void>;
        /** Simulate a memory pressure notification in all processes. */
        simulatePressureNotification(params: Memory.SimulatePressureNotificationRequest): Promise<void>;
    }
    
    /** Actions and events related to the inspected page belong to the page domain. */
    module Page{
        
        /** Resource type as it was perceived by the rendering engine. */
        type ResourceType = 'Document' | 'Stylesheet' | 'Image' | 'Media' | 'Font' | 'Script' | 'TextTrack' | 'XHR' | 'Fetch' | 'EventSource' | 'WebSocket' | 'Manifest' | 'Other';
        
        /** Unique frame identifier. */
        type FrameId = string;
        
        /** Information about the Frame on the page. */
        interface Frame{
            /** Frame unique identifier. */
            id: string;
            /** Parent frame identifier. */
            parentId?: string;
            /** Identifier of the loader associated with this frame. */
            loaderId: Network.LoaderId;
            /** Frame's name as specified in the tag. */
            name?: string;
            /** Frame document's URL. */
            url: string;
            /** Frame document's security origin. */
            securityOrigin: string;
            /** Frame document's mimeType as determined by the browser. */
            mimeType: string;
        }
        
        /** Information about the Resource on the page. */
        interface FrameResource{
            /** Resource URL. */
            url: string;
            /** Type of this resource. */
            type: ResourceType;
            /** Resource mimeType as determined by the browser. */
            mimeType: string;
            /** True if the resource failed to load. */
            failed?: boolean;
            /** True if the resource was canceled during loading. */
            canceled?: boolean;
        }
        
        /** Information about the Frame hierarchy along with their cached resources. */
        interface FrameResourceTree{
            /** Frame information for this tree item. */
            frame: Frame;
            /** Child frames. */
            childFrames?: FrameResourceTree[];
            /** Information about frame resources. */
            resources: FrameResource[];
        }
        
        /** Unique script identifier. */
        type ScriptIdentifier = string;
        
        /** Navigation history entry. */
        interface NavigationEntry{
            /** Unique id of the navigation history entry. */
            id: number;
            /** URL of the navigation history entry. */
            url: string;
            /** Title of the navigation history entry. */
            title: string;
        }
        
        /** Screencast frame metadata. */
        interface ScreencastFrameMetadata{
            /** Top offset in DIP. */
            offsetTop: number;
            /** Page scale factor. */
            pageScaleFactor: number;
            /** Device screen width in DIP. */
            deviceWidth: number;
            /** Device screen height in DIP. */
            deviceHeight: number;
            /** Position of horizontal scroll in CSS pixels. */
            scrollOffsetX: number;
            /** Position of vertical scroll in CSS pixels. */
            scrollOffsetY: number;
            /** Frame swap timestamp. */
            timestamp?: number;
        }
        
        /** Javascript dialog type. */
        type DialogType = 'alert' | 'confirm' | 'prompt' | 'beforeunload';
        
        /** Error while paring app manifest. */
        interface AppManifestError{
            /** Error message. */
            message: string;
            /** If criticial, this is a non-recoverable parse error. */
            critical: number;
            /** Error line. */
            line: number;
            /** Error column. */
            column: number;
        }
        
        interface AddScriptToEvaluateOnLoadRequest{
            scriptSource: string;
        }
        
        interface AddScriptToEvaluateOnLoadResponse{
            /** Identifier of the added script. */
            identifier: ScriptIdentifier;
        }
        
        interface RemoveScriptToEvaluateOnLoadRequest{
            identifier: ScriptIdentifier;
        }
        
        interface SetAutoAttachToCreatedPagesRequest{
            /** If true, browser will open a new inspector window for every page created from this one. */
            autoAttach: boolean;
        }
        
        interface ReloadRequest{
            /** If true, browser cache is ignored (as if the user pressed Shift+refresh). */
            ignoreCache?: boolean;
            /** If set, the script will be injected into all frames of the inspected page after reload. */
            scriptToEvaluateOnLoad?: string;
        }
        
        interface NavigateRequest{
            /** URL to navigate the page to. */
            url: string;
        }
        
        interface NavigateResponse{
            /** Frame id that will be navigated. */
            frameId: FrameId;
        }
        
        interface GetNavigationHistoryResponse{
            /** Index of the current navigation history entry. */
            currentIndex: number;
            /** Array of navigation history entries. */
            entries: NavigationEntry[];
        }
        
        interface NavigateToHistoryEntryRequest{
            /** Unique id of the entry to navigate to. */
            entryId: number;
        }
        
        interface GetCookiesResponse{
            /** Array of cookie objects. */
            cookies: Network.Cookie[];
        }
        
        interface DeleteCookieRequest{
            /** Name of the cookie to remove. */
            cookieName: string;
            /** URL to match cooke domain and path. */
            url: string;
        }
        
        interface GetResourceTreeResponse{
            /** Present frame / resource tree structure. */
            frameTree: FrameResourceTree;
        }
        
        interface GetResourceContentRequest{
            /** Frame id to get resource for. */
            frameId: FrameId;
            /** URL of the resource to get content for. */
            url: string;
        }
        
        interface GetResourceContentResponse{
            /** Resource content. */
            content: string;
            /** True, if content was served as base64. */
            base64Encoded: boolean;
        }
        
        interface SearchInResourceRequest{
            /** Frame id for resource to search in. */
            frameId: FrameId;
            /** URL of the resource to search in. */
            url: string;
            /** String to search for. */
            query: string;
            /** If true, search is case sensitive. */
            caseSensitive?: boolean;
            /** If true, treats string parameter as regex. */
            isRegex?: boolean;
        }
        
        interface SearchInResourceResponse{
            /** List of search matches. */
            result: Debugger.SearchMatch[];
        }
        
        interface SetDocumentContentRequest{
            /** Frame id to set HTML for. */
            frameId: FrameId;
            /** HTML content to set. */
            html: string;
        }
        
        interface SetDeviceMetricsOverrideRequest{
            /** Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override. */
            width: number;
            /** Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override. */
            height: number;
            /** Overriding device scale factor value. 0 disables the override. */
            deviceScaleFactor: number;
            /** Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more. */
            mobile: boolean;
            /** Whether a view that exceeds the available browser window area should be scaled down to fit. */
            fitWindow: boolean;
            /** Scale to apply to resulting view image. Ignored in |fitWindow| mode. */
            scale?: number;
            /** X offset to shift resulting view image by. Ignored in |fitWindow| mode. */
            offsetX?: number;
            /** Y offset to shift resulting view image by. Ignored in |fitWindow| mode. */
            offsetY?: number;
            /** Overriding screen width value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|. */
            screenWidth?: number;
            /** Overriding screen height value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|. */
            screenHeight?: number;
            /** Overriding view X position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|. */
            positionX?: number;
            /** Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|. */
            positionY?: number;
            /** Screen orientation override. */
            screenOrientation?: Emulation.ScreenOrientation;
        }
        
        interface SetGeolocationOverrideRequest{
            /** Mock latitude */
            latitude?: number;
            /** Mock longitude */
            longitude?: number;
            /** Mock accuracy */
            accuracy?: number;
        }
        
        interface SetDeviceOrientationOverrideRequest{
            /** Mock alpha */
            alpha: number;
            /** Mock beta */
            beta: number;
            /** Mock gamma */
            gamma: number;
        }
        
        interface SetTouchEmulationEnabledRequest{
            /** Whether the touch event emulation should be enabled. */
            enabled: boolean;
            /** Touch/gesture events configuration. Default: current platform. */
            configuration?: 'mobile' | 'desktop';
        }
        
        interface CaptureScreenshotResponse{
            /** Base64-encoded image data (PNG). */
            data: string;
        }
        
        interface StartScreencastRequest{
            /** Image compression format. */
            format?: 'jpeg' | 'png';
            /** Compression quality from range [0..100]. */
            quality?: number;
            /** Maximum screenshot width. */
            maxWidth?: number;
            /** Maximum screenshot height. */
            maxHeight?: number;
            /** Send every n-th frame. */
            everyNthFrame?: number;
        }
        
        interface ScreencastFrameAckRequest{
            /** Frame number. */
            sessionId: number;
        }
        
        interface HandleJavaScriptDialogRequest{
            /** Whether to accept or dismiss the dialog. */
            accept: boolean;
            /** The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog. */
            promptText?: string;
        }
        
        interface SetColorPickerEnabledRequest{
            /** Shows / hides color picker */
            enabled: boolean;
        }
        
        interface SetOverlayMessageRequest{
            /** Overlay message to display when paused in debugger. */
            message?: string;
        }
        
        interface GetAppManifestResponse{
            /** Manifest location. */
            url: string;
            errors: AppManifestError[];
            /** Manifest content. */
            data?: string;
        }
        
        interface SetBlockedEventsWarningThresholdRequest{
            /** If set to a positive number, specifies threshold in seconds for input event latency that will cause a console warning about blocked event to be issued. If zero or less, the warning is disabled. */
            threshold: number;
        }
        
        interface DomContentEventFiredEvent{
            timestamp: number;
        }
        
        interface LoadEventFiredEvent{
            timestamp: number;
        }
        
        interface FrameAttachedEvent{
            /** Id of the frame that has been attached. */
            frameId: FrameId;
            /** Parent frame identifier. */
            parentFrameId: FrameId;
        }
        
        interface FrameNavigatedEvent{
            /** Frame object. */
            frame: Frame;
        }
        
        interface FrameDetachedEvent{
            /** Id of the frame that has been detached. */
            frameId: FrameId;
        }
        
        interface FrameStartedLoadingEvent{
            /** Id of the frame that has started loading. */
            frameId: FrameId;
        }
        
        interface FrameStoppedLoadingEvent{
            /** Id of the frame that has stopped loading. */
            frameId: FrameId;
        }
        
        interface FrameScheduledNavigationEvent{
            /** Id of the frame that has scheduled a navigation. */
            frameId: FrameId;
            /** Delay (in seconds) until the navigation is scheduled to begin. The navigation is not guaranteed to start. */
            delay: number;
        }
        
        interface FrameClearedScheduledNavigationEvent{
            /** Id of the frame that has cleared its scheduled navigation. */
            frameId: FrameId;
        }
        
        interface JavascriptDialogOpeningEvent{
            /** Message that will be displayed by the dialog. */
            message: string;
            /** Dialog type. */
            type: DialogType;
        }
        
        interface JavascriptDialogClosedEvent{
            /** Whether dialog was confirmed. */
            result: boolean;
        }
        
        interface ScreencastFrameEvent{
            /** Base64-encoded compressed image. */
            data: string;
            /** Screencast frame metadata. */
            metadata: ScreencastFrameMetadata;
            /** Frame number. */
            sessionId: number;
        }
        
        interface ScreencastVisibilityChangedEvent{
            /** True if the page is visible. */
            visible: boolean;
        }
        
        interface ColorPickedEvent{
            /** RGBA of the picked color. */
            color: DOM.RGBA;
        }
    }
    
    interface IPage{
        /** Enables page domain notifications. */
        enable(): Promise<void>;
        /** Disables page domain notifications. */
        disable(): Promise<void>;
        addScriptToEvaluateOnLoad(params: Page.AddScriptToEvaluateOnLoadRequest): Promise<Page.AddScriptToEvaluateOnLoadResponse>;
        removeScriptToEvaluateOnLoad(params: Page.RemoveScriptToEvaluateOnLoadRequest): Promise<void>;
        /** Controls whether browser will open a new inspector window for connected pages. */
        setAutoAttachToCreatedPages(params: Page.SetAutoAttachToCreatedPagesRequest): Promise<void>;
        /** Reloads given page optionally ignoring the cache. */
        reload(params: Page.ReloadRequest): Promise<void>;
        /** Navigates current page to the given URL. */
        navigate(params: Page.NavigateRequest): Promise<Page.NavigateResponse>;
        /** Returns navigation history for the current page. */
        getNavigationHistory(): Promise<Page.GetNavigationHistoryResponse>;
        /** Navigates current page to the given history entry. */
        navigateToHistoryEntry(params: Page.NavigateToHistoryEntryRequest): Promise<void>;
        /** Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the 'cookies' field. */
        getCookies(): Promise<Page.GetCookiesResponse>;
        /** Deletes browser cookie with given name, domain and path. */
        deleteCookie(params: Page.DeleteCookieRequest): Promise<void>;
        /** Returns present frame / resource tree structure. */
        getResourceTree(): Promise<Page.GetResourceTreeResponse>;
        /** Returns content of the given resource. */
        getResourceContent(params: Page.GetResourceContentRequest): Promise<Page.GetResourceContentResponse>;
        /** Searches for given string in resource content. */
        searchInResource(params: Page.SearchInResourceRequest): Promise<Page.SearchInResourceResponse>;
        /** Sets given markup as the document's HTML. */
        setDocumentContent(params: Page.SetDocumentContentRequest): Promise<void>;
        /** Overrides the values of device screen dimensions (window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media query results). */
        setDeviceMetricsOverride(params: Page.SetDeviceMetricsOverrideRequest): Promise<void>;
        /** Clears the overriden device metrics. */
        clearDeviceMetricsOverride(): Promise<void>;
        /** Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable. */
        setGeolocationOverride(params: Page.SetGeolocationOverrideRequest): Promise<void>;
        /** Clears the overriden Geolocation Position and Error. */
        clearGeolocationOverride(): Promise<void>;
        /** Overrides the Device Orientation. */
        setDeviceOrientationOverride(params: Page.SetDeviceOrientationOverrideRequest): Promise<void>;
        /** Clears the overridden Device Orientation. */
        clearDeviceOrientationOverride(): Promise<void>;
        /** Toggles mouse event-based touch event emulation. */
        setTouchEmulationEnabled(params: Page.SetTouchEmulationEnabledRequest): Promise<void>;
        /** Capture page screenshot. */
        captureScreenshot(): Promise<Page.CaptureScreenshotResponse>;
        /** Starts sending each frame using the 'screencastFrame' event. */
        startScreencast(params: Page.StartScreencastRequest): Promise<void>;
        /** Stops sending each frame in the 'screencastFrame'. */
        stopScreencast(): Promise<void>;
        /** Acknowledges that a screencast frame has been received by the frontend. */
        screencastFrameAck(params: Page.ScreencastFrameAckRequest): Promise<void>;
        /** Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload). */
        handleJavaScriptDialog(params: Page.HandleJavaScriptDialogRequest): Promise<void>;
        /** Shows / hides color picker */
        setColorPickerEnabled(params: Page.SetColorPickerEnabledRequest): Promise<void>;
        /** Sets overlay message. */
        setOverlayMessage(params: Page.SetOverlayMessageRequest): Promise<void>;
        getAppManifest(): Promise<Page.GetAppManifestResponse>;
        requestAppBanner(): Promise<void>;
        setBlockedEventsWarningThreshold(params: Page.SetBlockedEventsWarningThresholdRequest): Promise<void>;
        onDomContentEventFired(handler: (event: Page.DomContentEventFiredEvent) => void);
        onLoadEventFired(handler: (event: Page.LoadEventFiredEvent) => void);
        /** Fired when frame has been attached to its parent. */
        onFrameAttached(handler: (event: Page.FrameAttachedEvent) => void);
        /** Fired once navigation of the frame has completed. Frame is now associated with the new loader. */
        onFrameNavigated(handler: (event: Page.FrameNavigatedEvent) => void);
        /** Fired when frame has been detached from its parent. */
        onFrameDetached(handler: (event: Page.FrameDetachedEvent) => void);
        /** Fired when frame has started loading. */
        onFrameStartedLoading(handler: (event: Page.FrameStartedLoadingEvent) => void);
        /** Fired when frame has stopped loading. */
        onFrameStoppedLoading(handler: (event: Page.FrameStoppedLoadingEvent) => void);
        /** Fired when frame schedules a potential navigation. */
        onFrameScheduledNavigation(handler: (event: Page.FrameScheduledNavigationEvent) => void);
        /** Fired when frame no longer has a scheduled navigation. */
        onFrameClearedScheduledNavigation(handler: (event: Page.FrameClearedScheduledNavigationEvent) => void);
        onFrameResized(handler: () => void);
        /** Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to open. */
        onJavascriptDialogOpening(handler: (event: Page.JavascriptDialogOpeningEvent) => void);
        /** Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been closed. */
        onJavascriptDialogClosed(handler: (event: Page.JavascriptDialogClosedEvent) => void);
        /** Compressed image data requested by the 'startScreencast'. */
        onScreencastFrame(handler: (event: Page.ScreencastFrameEvent) => void);
        /** Fired when the page with currently enabled screencast was shown or hidden </code>. */
        onScreencastVisibilityChanged(handler: (event: Page.ScreencastVisibilityChangedEvent) => void);
        /** Fired when a color has been picked. */
        onColorPicked(handler: (event: Page.ColorPickedEvent) => void);
        /** Fired when interstitial page was shown */
        onInterstitialShown(handler: () => void);
        /** Fired when interstitial page was hidden */
        onInterstitialHidden(handler: () => void);
    }
    
    /** This domain allows to control rendering of the page. */
    module Rendering{
        
        interface SetShowPaintRectsRequest{
            /** True for showing paint rectangles */
            result: boolean;
        }
        
        interface SetShowDebugBordersRequest{
            /** True for showing debug borders */
            show: boolean;
        }
        
        interface SetShowFPSCounterRequest{
            /** True for showing the FPS counter */
            show: boolean;
        }
        
        interface SetShowScrollBottleneckRectsRequest{
            /** True for showing scroll bottleneck rects */
            show: boolean;
        }
        
        interface SetShowViewportSizeOnResizeRequest{
            /** Whether to paint size or not. */
            show: boolean;
        }
    }
    
    interface IRendering{
        /** Requests that backend shows paint rectangles */
        setShowPaintRects(params: Rendering.SetShowPaintRectsRequest): Promise<void>;
        /** Requests that backend shows debug borders on layers */
        setShowDebugBorders(params: Rendering.SetShowDebugBordersRequest): Promise<void>;
        /** Requests that backend shows the FPS counter */
        setShowFPSCounter(params: Rendering.SetShowFPSCounterRequest): Promise<void>;
        /** Requests that backend shows scroll bottleneck rects */
        setShowScrollBottleneckRects(params: Rendering.SetShowScrollBottleneckRectsRequest): Promise<void>;
        /** Paints viewport size upon main frame resize. */
        setShowViewportSizeOnResize(params: Rendering.SetShowViewportSizeOnResizeRequest): Promise<void>;
    }
    
    /** This domain emulates different environments for the page. */
    module Emulation{
        
        /** Screen orientation. */
        interface ScreenOrientation{
            /** Orientation type. */
            type: 'portraitPrimary' | 'portraitSecondary' | 'landscapePrimary' | 'landscapeSecondary';
            /** Orientation angle. */
            angle: number;
        }
        
        interface SetDeviceMetricsOverrideRequest{
            /** Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override. */
            width: number;
            /** Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override. */
            height: number;
            /** Overriding device scale factor value. 0 disables the override. */
            deviceScaleFactor: number;
            /** Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more. */
            mobile: boolean;
            /** Whether a view that exceeds the available browser window area should be scaled down to fit. */
            fitWindow: boolean;
            /** Scale to apply to resulting view image. Ignored in |fitWindow| mode. */
            scale?: number;
            /** X offset to shift resulting view image by. Ignored in |fitWindow| mode. */
            offsetX?: number;
            /** Y offset to shift resulting view image by. Ignored in |fitWindow| mode. */
            offsetY?: number;
            /** Overriding screen width value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|. */
            screenWidth?: number;
            /** Overriding screen height value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|. */
            screenHeight?: number;
            /** Overriding view X position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|. */
            positionX?: number;
            /** Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|. */
            positionY?: number;
            /** Screen orientation override. */
            screenOrientation?: ScreenOrientation;
        }
        
        interface SetPageScaleFactorRequest{
            /** Page scale factor. */
            pageScaleFactor: number;
        }
        
        interface SetScriptExecutionDisabledRequest{
            /** Whether script execution should be disabled in the page. */
            value: boolean;
        }
        
        interface SetGeolocationOverrideRequest{
            /** Mock latitude */
            latitude?: number;
            /** Mock longitude */
            longitude?: number;
            /** Mock accuracy */
            accuracy?: number;
        }
        
        interface SetTouchEmulationEnabledRequest{
            /** Whether the touch event emulation should be enabled. */
            enabled: boolean;
            /** Touch/gesture events configuration. Default: current platform. */
            configuration?: 'mobile' | 'desktop';
        }
        
        interface SetEmulatedMediaRequest{
            /** Media type to emulate. Empty string disables the override. */
            media: string;
        }
        
        interface SetCPUThrottlingRateRequest{
            /** Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc). */
            rate: number;
        }
        
        interface CanEmulateResponse{
            /** True if emulation is supported. */
            result: boolean;
        }
    }
    
    interface IEmulation{
        /** Overrides the values of device screen dimensions (window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media query results). */
        setDeviceMetricsOverride(params: Emulation.SetDeviceMetricsOverrideRequest): Promise<void>;
        /** Clears the overriden device metrics. */
        clearDeviceMetricsOverride(): Promise<void>;
        /** Requests that page scale factor is reset to initial values. */
        resetPageScaleFactor(): Promise<void>;
        /** Sets a specified page scale factor. */
        setPageScaleFactor(params: Emulation.SetPageScaleFactorRequest): Promise<void>;
        /** Switches script execution in the page. */
        setScriptExecutionDisabled(params: Emulation.SetScriptExecutionDisabledRequest): Promise<void>;
        /** Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable. */
        setGeolocationOverride(params: Emulation.SetGeolocationOverrideRequest): Promise<void>;
        /** Clears the overriden Geolocation Position and Error. */
        clearGeolocationOverride(): Promise<void>;
        /** Toggles mouse event-based touch event emulation. */
        setTouchEmulationEnabled(params: Emulation.SetTouchEmulationEnabledRequest): Promise<void>;
        /** Emulates the given media for CSS media queries. */
        setEmulatedMedia(params: Emulation.SetEmulatedMediaRequest): Promise<void>;
        /** Enables CPU throttling to emulate slow CPUs. */
        setCPUThrottlingRate(params: Emulation.SetCPUThrottlingRateRequest): Promise<void>;
        /** Tells whether emulation is supported. */
        canEmulate(): Promise<Emulation.CanEmulateResponse>;
    }
    
    /** Console domain defines methods and events for interaction with the JavaScript console. Console collects messages created by means of the <a href='http://getfirebug.com/wiki/index.php/Console_API'>JavaScript Console API</a>. One needs to enable this domain using 'enable</code> command in order to start receiving the console messages. Browser collects messages issued while console domain is not enabled as well and reports them using <code>messageAdded' notification upon enabling. */
    module Console{
        
        /** Number of seconds since epoch. */
        type Timestamp = number;
        
        /** Console message. */
        interface ConsoleMessage{
            /** Message source. */
            source: 'xml' | 'javascript' | 'network' | 'console-api' | 'storage' | 'appcache' | 'rendering' | 'security' | 'other' | 'deprecation';
            /** Message severity. */
            level: 'log' | 'warning' | 'error' | 'debug' | 'info' | 'revokedError';
            /** Message text. */
            text: string;
            /** Console message type. */
            type?: 'log' | 'dir' | 'dirxml' | 'table' | 'trace' | 'clear' | 'startGroup' | 'startGroupCollapsed' | 'endGroup' | 'assert' | 'profile' | 'profileEnd';
            /** Script ID of the message origin. */
            scriptId?: string;
            /** URL of the message origin. */
            url?: string;
            /** Line number in the resource that generated this message. */
            line?: number;
            /** Column number in the resource that generated this message. */
            column?: number;
            /** Repeat count for repeated messages. */
            repeatCount?: number;
            /** Message parameters in case of the formatted message. */
            parameters?: Runtime.RemoteObject[];
            /** JavaScript stack trace for assertions and error messages. */
            stack?: Runtime.StackTrace;
            /** Identifier of the network request associated with this message. */
            networkRequestId?: Network.RequestId;
            /** Timestamp, when this message was fired. */
            timestamp: Timestamp;
            /** Identifier of the context where this message was created */
            executionContextId?: Runtime.ExecutionContextId;
            /** Message id. */
            messageId?: number;
            /** Related message id. */
            relatedMessageId?: number;
        }
        
        interface MessageAddedEvent{
            /** Console message that has been added. */
            message: ConsoleMessage;
        }
        
        interface MessageRepeatCountUpdatedEvent{
            /** New repeat count value. */
            count: number;
            /** Timestamp of most recent message in batch. */
            timestamp: Timestamp;
        }
    }
    
    interface IConsole{
        /** Enables console domain, sends the messages collected so far to the client by means of the 'messageAdded' notification. */
        enable(): Promise<void>;
        /** Disables console domain, prevents further console messages from being reported to the client. */
        disable(): Promise<void>;
        /** Clears console messages collected in the browser. */
        clearMessages(): Promise<void>;
        /** Issued when new console message is added. */
        onMessageAdded(handler: (event: Console.MessageAddedEvent) => void);
        /** Is not issued. Will be gone in the future versions of the protocol. */
        onMessageRepeatCountUpdated(handler: (event: Console.MessageRepeatCountUpdatedEvent) => void);
        /** Issued when console is cleared. This happens either upon 'clearMessages' command or after page navigation. */
        onMessagesCleared(handler: () => void);
    }
    
    /** Security */
    module Security{
        
        /** An internal certificate ID value. */
        type CertificateId = number;
        
        /** The security level of a page or resource. */
        type SecurityState = 'unknown' | 'neutral' | 'insecure' | 'warning' | 'secure' | 'info';
        
        /** An explanation of an factor contributing to the security state. */
        interface SecurityStateExplanation{
            /** Security state representing the severity of the factor being explained. */
            securityState: SecurityState;
            /** Short phrase describing the type of factor. */
            summary: string;
            /** Full text explanation of the factor. */
            description: string;
            /** Associated certificate id. */
            certificateId?: CertificateId;
        }
        
        /** Information about mixed content on the page. */
        interface MixedContentStatus{
            /** True if the page ran insecure content such as scripts. */
            ranInsecureContent: boolean;
            /** True if the page displayed insecure content such as images. */
            displayedInsecureContent: boolean;
            /** Security state representing a page that ran insecure content. */
            ranInsecureContentStyle: SecurityState;
            /** Security state representing a page that displayed insecure content. */
            displayedInsecureContentStyle: SecurityState;
        }
        
        interface SecurityStateChangedEvent{
            /** Security state. */
            securityState: SecurityState;
            /** List of explanations for the security state. If the overall security state is `insecure` or `warning`, at least one corresponding explanation should be included. */
            explanations?: SecurityStateExplanation[];
            /** Information about mixed content on the page. */
            mixedContentStatus?: MixedContentStatus;
            /** True if the page was loaded over cryptographic transport such as HTTPS. */
            schemeIsCryptographic?: boolean;
        }
    }
    
    interface ISecurity{
        /** Enables tracking security state changes. */
        enable(): Promise<void>;
        /** Disables tracking security state changes. */
        disable(): Promise<void>;
        /** The security state of the page changed. */
        onSecurityStateChanged(handler: (event: Security.SecurityStateChangedEvent) => void);
    }
    
    /** Network domain allows tracking network activities of the page. It exposes information about http, file, data and other requests and responses, their headers, bodies, timing, etc. */
    module Network{
        
        /** Unique loader identifier. */
        type LoaderId = string;
        
        /** Unique request identifier. */
        type RequestId = string;
        
        /** Number of seconds since epoch. */
        type Timestamp = number;
        
        /** Request / response headers as keys / values of JSON object. */
        interface Headers{
            [key: string]: string;
        }
        
        /** Timing information for the request. */
        interface ResourceTiming{
            /** Timing's requestTime is a baseline in seconds, while the other numbers are ticks in milliseconds relatively to this requestTime. */
            requestTime: number;
            /** Started resolving proxy. */
            proxyStart: number;
            /** Finished resolving proxy. */
            proxyEnd: number;
            /** Started DNS address resolve. */
            dnsStart: number;
            /** Finished DNS address resolve. */
            dnsEnd: number;
            /** Started connecting to the remote host. */
            connectStart: number;
            /** Connected to the remote host. */
            connectEnd: number;
            /** Started SSL handshake. */
            sslStart: number;
            /** Finished SSL handshake. */
            sslEnd: number;
            /** Started running ServiceWorker. */
            workerStart: number;
            /** Finished Starting ServiceWorker. */
            workerReady: number;
            /** Started sending request. */
            sendStart: number;
            /** Finished sending request. */
            sendEnd: number;
            /** Time the server started pushing request. */
            pushStart: number;
            /** Time the server finished pushing request. */
            pushEnd: number;
            /** Finished receiving response headers. */
            receiveHeadersEnd: number;
        }
        
        /** Loading priority of a resource request. */
        type ResourcePriority = 'VeryLow' | 'Low' | 'Medium' | 'High' | 'VeryHigh';
        
        /** HTTP request data. */
        interface Request{
            /** Request URL. */
            url: string;
            /** HTTP request method. */
            method: string;
            /** HTTP request headers. */
            headers: Headers;
            /** HTTP POST request data. */
            postData?: string;
            /** The mixed content status of the request, as defined in http://www.w3.org/TR/mixed-content/ */
            mixedContentType?: 'blockable' | 'optionally-blockable' | 'none';
            /** Priority of the resource request at the time request is sent. */
            initialPriority: ResourcePriority;
        }
        
        /** Subject of a certificate. */
        interface CertificateSubject{
            /** Certificate subject name. */
            name: string;
            /** Subject Alternative Name (SAN) DNS names. */
            sanDnsNames: string[];
            /** Subject Alternative Name (SAN) IP addresses. */
            sanIpAddresses: string[];
        }
        
        /** Details about a request's certificate. */
        interface CertificateDetails{
            /** Certificate subject. */
            subject: CertificateSubject;
            /** Name of the issuing CA. */
            issuer: string;
            /** Certificate valid from date. */
            validFrom: Timestamp;
            /** Certificate valid to (expiration) date */
            validTo: Timestamp;
        }
        
        /** Details about the validation status of a request's certificate. */
        interface CertificateValidationDetails{
            /** The number of SCTs from unknown logs. */
            numUnknownScts: number;
            /** The number of invalid SCTs. */
            numInvalidScts: number;
            /** The number of valid SCTs. */
            numValidScts: number;
        }
        
        /** Security details about a request. */
        interface SecurityDetails{
            /** Protocol name (e.g. "TLS 1.2" or "QUIC"). */
            protocol: string;
            /** Key Exchange used by the connection. */
            keyExchange: string;
            /** Cipher name. */
            cipher: string;
            /** TLS MAC. Note that AEAD ciphers do not have separate MACs. */
            mac?: string;
            /** Certificate ID value. */
            certificateId: Security.CertificateId;
            /** Validation details for the request's certficate. */
            certificateValidationDetails?: CertificateValidationDetails;
        }
        
        /** The reason why request was blocked. */
        type BlockedReason = 'csp' | 'mixed-content' | 'origin' | 'inspector' | 'subresource-filter' | 'other';
        
        /** HTTP response data. */
        interface Response{
            /** Response URL. This URL can be different from CachedResource.url in case of redirect. */
            url: string;
            /** HTTP response status code. */
            status: number;
            /** HTTP response status text. */
            statusText: string;
            /** HTTP response headers. */
            headers: Headers;
            /** HTTP response headers text. */
            headersText?: string;
            /** Resource mimeType as determined by the browser. */
            mimeType: string;
            /** Refined HTTP request headers that were actually transmitted over the network. */
            requestHeaders?: Headers;
            /** HTTP request headers text. */
            requestHeadersText?: string;
            /** Specifies whether physical connection was actually reused for this request. */
            connectionReused: boolean;
            /** Physical connection id that was actually used for this request. */
            connectionId: number;
            /** Remote IP address. */
            remoteIPAddress?: string;
            /** Remote port. */
            remotePort?: number;
            /** Specifies that the request was served from the disk cache. */
            fromDiskCache?: boolean;
            /** Specifies that the request was served from the ServiceWorker. */
            fromServiceWorker?: boolean;
            /** Total number of bytes received for this request so far. */
            encodedDataLength: number;
            /** Timing information for the given request. */
            timing?: ResourceTiming;
            /** Protocol used to fetch this request. */
            protocol?: string;
            /** Security state of the request resource. */
            securityState: Security.SecurityState;
            /** Security details for the request. */
            securityDetails?: SecurityDetails;
        }
        
        /** WebSocket request data. */
        interface WebSocketRequest{
            /** HTTP request headers. */
            headers: Headers;
        }
        
        /** WebSocket response data. */
        interface WebSocketResponse{
            /** HTTP response status code. */
            status: number;
            /** HTTP response status text. */
            statusText: string;
            /** HTTP response headers. */
            headers: Headers;
            /** HTTP response headers text. */
            headersText?: string;
            /** HTTP request headers. */
            requestHeaders?: Headers;
            /** HTTP request headers text. */
            requestHeadersText?: string;
        }
        
        /** WebSocket frame data. */
        interface WebSocketFrame{
            /** WebSocket frame opcode. */
            opcode: number;
            /** WebSocke frame mask. */
            mask: boolean;
            /** WebSocke frame payload data. */
            payloadData: string;
        }
        
        /** Information about the cached resource. */
        interface CachedResource{
            /** Resource URL. This is the url of the original network request. */
            url: string;
            /** Type of this resource. */
            type: Page.ResourceType;
            /** Cached response data. */
            response?: Response;
            /** Cached response body size. */
            bodySize: number;
        }
        
        /** Information about the request initiator. */
        interface Initiator{
            /** Type of this initiator. */
            type: 'parser' | 'script' | 'other';
            /** Initiator JavaScript stack trace, set for Script only. */
            stack?: Runtime.StackTrace;
            /** Initiator URL, set for Parser type only. */
            url?: string;
            /** Initiator line number, set for Parser type only. */
            lineNumber?: number;
        }
        
        /** Cookie object */
        interface Cookie{
            /** Cookie name. */
            name: string;
            /** Cookie value. */
            value: string;
            /** Cookie domain. */
            domain: string;
            /** Cookie path. */
            path: string;
            /** Cookie expires. */
            expires: number;
            /** Cookie size. */
            size: number;
            /** True if cookie is http-only. */
            httpOnly: boolean;
            /** True if cookie is secure. */
            secure: boolean;
            /** True in case of session cookie. */
            session: boolean;
            /** Represents the cookies' 'SameSite' status: https://tools.ietf.org/html/draft-west-first-party-cookies */
            sameSite?: 'Strict' | 'Lax';
        }
        
        interface EnableRequest{
            /** Buffer size in bytes to use when preserving network payloads (XHRs, etc). */
            maxTotalBufferSize?: number;
            /** Per-resource buffer size in bytes to use when preserving network payloads (XHRs, etc). */
            maxResourceBufferSize?: number;
        }
        
        interface SetUserAgentOverrideRequest{
            /** User agent to use. */
            userAgent: string;
        }
        
        interface SetExtraHTTPHeadersRequest{
            /** Map with extra HTTP headers. */
            headers: Headers;
        }
        
        interface GetResponseBodyRequest{
            /** Identifier of the network request to get content for. */
            requestId: RequestId;
        }
        
        interface GetResponseBodyResponse{
            /** Response body. */
            body: string;
            /** True, if content was sent as base64. */
            base64Encoded: boolean;
        }
        
        interface AddBlockedURLRequest{
            /** URL to block. */
            url: string;
        }
        
        interface RemoveBlockedURLRequest{
            /** URL to stop blocking. */
            url: string;
        }
        
        interface ReplayXHRRequest{
            /** Identifier of XHR to replay. */
            requestId: RequestId;
        }
        
        interface SetMonitoringXHREnabledRequest{
            /** Monitoring enabled state. */
            enabled: boolean;
        }
        
        interface CanClearBrowserCacheResponse{
            /** True if browser cache can be cleared. */
            result: boolean;
        }
        
        interface CanClearBrowserCookiesResponse{
            /** True if browser cookies can be cleared. */
            result: boolean;
        }
        
        interface GetCookiesResponse{
            /** Array of cookie objects. */
            cookies: Cookie[];
        }
        
        interface DeleteCookieRequest{
            /** Name of the cookie to remove. */
            cookieName: string;
            /** URL to match cooke domain and path. */
            url: string;
        }
        
        interface CanEmulateNetworkConditionsResponse{
            /** True if emulation of network conditions is supported. */
            result: boolean;
        }
        
        interface EmulateNetworkConditionsRequest{
            /** True to emulate internet disconnection. */
            offline: boolean;
            /** Additional latency (ms). */
            latency: number;
            /** Maximal aggregated download throughput. */
            downloadThroughput: number;
            /** Maximal aggregated upload throughput. */
            uploadThroughput: number;
        }
        
        interface SetCacheDisabledRequest{
            /** Cache disabled state. */
            cacheDisabled: boolean;
        }
        
        interface SetBypassServiceWorkerRequest{
            /** Bypass service worker and load from network. */
            bypass: boolean;
        }
        
        interface SetDataSizeLimitsForTestRequest{
            /** Maximum total buffer size. */
            maxTotalSize: number;
            /** Maximum per-resource size. */
            maxResourceSize: number;
        }
        
        interface GetCertificateDetailsRequest{
            /** ID of the certificate to get details for. */
            certificateId: Security.CertificateId;
        }
        
        interface GetCertificateDetailsResponse{
            /** Certificate details. */
            result: CertificateDetails;
        }
        
        interface ShowCertificateViewerRequest{
            /** Certificate id. */
            certificateId: Security.CertificateId;
        }
        
        interface ResourceChangedPriorityEvent{
            /** Request identifier. */
            requestId: RequestId;
            /** New priority */
            newPriority: ResourcePriority;
            /** Timestamp. */
            timestamp: Timestamp;
        }
        
        interface RequestWillBeSentEvent{
            /** Request identifier. */
            requestId: RequestId;
            /** Frame identifier. */
            frameId: Page.FrameId;
            /** Loader identifier. */
            loaderId: LoaderId;
            /** URL of the document this request is loaded for. */
            documentURL: string;
            /** Request data. */
            request: Request;
            /** Timestamp. */
            timestamp: Timestamp;
            /** UTC Timestamp. */
            wallTime: Timestamp;
            /** Request initiator. */
            initiator: Initiator;
            /** Redirect response data. */
            redirectResponse?: Response;
            /** Type of this resource. */
            type?: Page.ResourceType;
        }
        
        interface RequestServedFromCacheEvent{
            /** Request identifier. */
            requestId: RequestId;
        }
        
        interface ResponseReceivedEvent{
            /** Request identifier. */
            requestId: RequestId;
            /** Frame identifier. */
            frameId: Page.FrameId;
            /** Loader identifier. */
            loaderId: LoaderId;
            /** Timestamp. */
            timestamp: Timestamp;
            /** Resource type. */
            type: Page.ResourceType;
            /** Response data. */
            response: Response;
        }
        
        interface DataReceivedEvent{
            /** Request identifier. */
            requestId: RequestId;
            /** Timestamp. */
            timestamp: Timestamp;
            /** Data chunk length. */
            dataLength: number;
            /** Actual bytes received (might be less than dataLength for compressed encodings). */
            encodedDataLength: number;
        }
        
        interface LoadingFinishedEvent{
            /** Request identifier. */
            requestId: RequestId;
            /** Timestamp. */
            timestamp: Timestamp;
            /** Total number of bytes received for this request. */
            encodedDataLength: number;
        }
        
        interface LoadingFailedEvent{
            /** Request identifier. */
            requestId: RequestId;
            /** Timestamp. */
            timestamp: Timestamp;
            /** Resource type. */
            type: Page.ResourceType;
            /** User friendly error message. */
            errorText: string;
            /** True if loading was canceled. */
            canceled?: boolean;
            /** The reason why loading was blocked, if any. */
            blockedReason?: BlockedReason;
        }
        
        interface WebSocketWillSendHandshakeRequestEvent{
            /** Request identifier. */
            requestId: RequestId;
            /** Timestamp. */
            timestamp: Timestamp;
            /** UTC Timestamp. */
            wallTime: Timestamp;
            /** WebSocket request data. */
            request: WebSocketRequest;
        }
        
        interface WebSocketHandshakeResponseReceivedEvent{
            /** Request identifier. */
            requestId: RequestId;
            /** Timestamp. */
            timestamp: Timestamp;
            /** WebSocket response data. */
            response: WebSocketResponse;
        }
        
        interface WebSocketCreatedEvent{
            /** Request identifier. */
            requestId: RequestId;
            /** WebSocket request URL. */
            url: string;
        }
        
        interface WebSocketClosedEvent{
            /** Request identifier. */
            requestId: RequestId;
            /** Timestamp. */
            timestamp: Timestamp;
        }
        
        interface WebSocketFrameReceivedEvent{
            /** Request identifier. */
            requestId: RequestId;
            /** Timestamp. */
            timestamp: Timestamp;
            /** WebSocket response data. */
            response: WebSocketFrame;
        }
        
        interface WebSocketFrameErrorEvent{
            /** Request identifier. */
            requestId: RequestId;
            /** Timestamp. */
            timestamp: Timestamp;
            /** WebSocket frame error message. */
            errorMessage: string;
        }
        
        interface WebSocketFrameSentEvent{
            /** Request identifier. */
            requestId: RequestId;
            /** Timestamp. */
            timestamp: Timestamp;
            /** WebSocket response data. */
            response: WebSocketFrame;
        }
        
        interface EventSourceMessageReceivedEvent{
            /** Request identifier. */
            requestId: RequestId;
            /** Timestamp. */
            timestamp: Timestamp;
            /** Message type. */
            eventName: string;
            /** Message identifier. */
            eventId: string;
            /** Message content. */
            data: string;
        }
    }
    
    interface INetwork{
        /** Enables network tracking, network events will now be delivered to the client. */
        enable(params: Network.EnableRequest): Promise<void>;
        /** Disables network tracking, prevents network events from being sent to the client. */
        disable(): Promise<void>;
        /** Allows overriding user agent with the given string. */
        setUserAgentOverride(params: Network.SetUserAgentOverrideRequest): Promise<void>;
        /** Specifies whether to always send extra HTTP headers with the requests from this page. */
        setExtraHTTPHeaders(params: Network.SetExtraHTTPHeadersRequest): Promise<void>;
        /** Returns content served for the given request. */
        getResponseBody(params: Network.GetResponseBodyRequest): Promise<Network.GetResponseBodyResponse>;
        /** Blocks specific URL from loading. */
        addBlockedURL(params: Network.AddBlockedURLRequest): Promise<void>;
        /** Cancels blocking of a specific URL from loading. */
        removeBlockedURL(params: Network.RemoveBlockedURLRequest): Promise<void>;
        /** This method sends a new XMLHttpRequest which is identical to the original one. The following parameters should be identical: method, url, async, request body, extra headers, withCredentials attribute, user, password. */
        replayXHR(params: Network.ReplayXHRRequest): Promise<void>;
        /** Toggles monitoring of XMLHttpRequest. If 'true', console will receive messages upon each XHR issued. */
        setMonitoringXHREnabled(params: Network.SetMonitoringXHREnabledRequest): Promise<void>;
        /** Tells whether clearing browser cache is supported. */
        canClearBrowserCache(): Promise<Network.CanClearBrowserCacheResponse>;
        /** Clears browser cache. */
        clearBrowserCache(): Promise<void>;
        /** Tells whether clearing browser cookies is supported. */
        canClearBrowserCookies(): Promise<Network.CanClearBrowserCookiesResponse>;
        /** Clears browser cookies. */
        clearBrowserCookies(): Promise<void>;
        /** Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the 'cookies' field. */
        getCookies(): Promise<Network.GetCookiesResponse>;
        /** Deletes browser cookie with given name, domain and path. */
        deleteCookie(params: Network.DeleteCookieRequest): Promise<void>;
        /** Tells whether emulation of network conditions is supported. */
        canEmulateNetworkConditions(): Promise<Network.CanEmulateNetworkConditionsResponse>;
        /** Activates emulation of network conditions. */
        emulateNetworkConditions(params: Network.EmulateNetworkConditionsRequest): Promise<void>;
        /** Toggles ignoring cache for each request. If 'true', cache will not be used. */
        setCacheDisabled(params: Network.SetCacheDisabledRequest): Promise<void>;
        /** Toggles ignoring of service worker for each request. */
        setBypassServiceWorker(params: Network.SetBypassServiceWorkerRequest): Promise<void>;
        /** For testing. */
        setDataSizeLimitsForTest(params: Network.SetDataSizeLimitsForTestRequest): Promise<void>;
        /** Returns details for the given certificate. */
        getCertificateDetails(params: Network.GetCertificateDetailsRequest): Promise<Network.GetCertificateDetailsResponse>;
        /** Displays native dialog with the certificate details. */
        showCertificateViewer(params: Network.ShowCertificateViewerRequest): Promise<void>;
        /** Fired when resource loading priority is changed */
        onResourceChangedPriority(handler: (event: Network.ResourceChangedPriorityEvent) => void);
        /** Fired when page is about to send HTTP request. */
        onRequestWillBeSent(handler: (event: Network.RequestWillBeSentEvent) => void);
        /** Fired if request ended up loading from cache. */
        onRequestServedFromCache(handler: (event: Network.RequestServedFromCacheEvent) => void);
        /** Fired when HTTP response is available. */
        onResponseReceived(handler: (event: Network.ResponseReceivedEvent) => void);
        /** Fired when data chunk was received over the network. */
        onDataReceived(handler: (event: Network.DataReceivedEvent) => void);
        /** Fired when HTTP request has finished loading. */
        onLoadingFinished(handler: (event: Network.LoadingFinishedEvent) => void);
        /** Fired when HTTP request has failed to load. */
        onLoadingFailed(handler: (event: Network.LoadingFailedEvent) => void);
        /** Fired when WebSocket is about to initiate handshake. */
        onWebSocketWillSendHandshakeRequest(handler: (event: Network.WebSocketWillSendHandshakeRequestEvent) => void);
        /** Fired when WebSocket handshake response becomes available. */
        onWebSocketHandshakeResponseReceived(handler: (event: Network.WebSocketHandshakeResponseReceivedEvent) => void);
        /** Fired upon WebSocket creation. */
        onWebSocketCreated(handler: (event: Network.WebSocketCreatedEvent) => void);
        /** Fired when WebSocket is closed. */
        onWebSocketClosed(handler: (event: Network.WebSocketClosedEvent) => void);
        /** Fired when WebSocket frame is received. */
        onWebSocketFrameReceived(handler: (event: Network.WebSocketFrameReceivedEvent) => void);
        /** Fired when WebSocket frame error occurs. */
        onWebSocketFrameError(handler: (event: Network.WebSocketFrameErrorEvent) => void);
        /** Fired when WebSocket frame is sent. */
        onWebSocketFrameSent(handler: (event: Network.WebSocketFrameSentEvent) => void);
        /** Fired when EventSource message is received. */
        onEventSourceMessageReceived(handler: (event: Network.EventSourceMessageReceivedEvent) => void);
    }
    
    module Database{
        
        /** Unique identifier of Database object. */
        type DatabaseId = string;
        
        /** Database object. */
        interface Database{
            /** Database ID. */
            id: DatabaseId;
            /** Database domain. */
            domain: string;
            /** Database name. */
            name: string;
            /** Database version. */
            version: string;
        }
        
        /** Database error. */
        interface Error{
            /** Error message. */
            message: string;
            /** Error code. */
            code: number;
        }
        
        interface GetDatabaseTableNamesRequest{
            databaseId: DatabaseId;
        }
        
        interface GetDatabaseTableNamesResponse{
            tableNames: string[];
        }
        
        interface ExecuteSQLRequest{
            databaseId: DatabaseId;
            query: string;
        }
        
        interface ExecuteSQLResponse{
            columnNames?: string[];
            values?: any[];
            sqlError?: Error;
        }
        
        interface AddDatabaseEvent{
            database: Database;
        }
    }
    
    interface IDatabase{
        /** Enables database tracking, database events will now be delivered to the client. */
        enable(): Promise<void>;
        /** Disables database tracking, prevents database events from being sent to the client. */
        disable(): Promise<void>;
        getDatabaseTableNames(params: Database.GetDatabaseTableNamesRequest): Promise<Database.GetDatabaseTableNamesResponse>;
        executeSQL(params: Database.ExecuteSQLRequest): Promise<Database.ExecuteSQLResponse>;
        onAddDatabase(handler: (event: Database.AddDatabaseEvent) => void);
    }
    
    module IndexedDB{
        
        /** Database with an array of object stores. */
        interface DatabaseWithObjectStores{
            /** Database name. */
            name: string;
            /** Database version. */
            version: number;
            /** Object stores in this database. */
            objectStores: ObjectStore[];
        }
        
        /** Object store. */
        interface ObjectStore{
            /** Object store name. */
            name: string;
            /** Object store key path. */
            keyPath: KeyPath;
            /** If true, object store has auto increment flag set. */
            autoIncrement: boolean;
            /** Indexes in this object store. */
            indexes: ObjectStoreIndex[];
        }
        
        /** Object store index. */
        interface ObjectStoreIndex{
            /** Index name. */
            name: string;
            /** Index key path. */
            keyPath: KeyPath;
            /** If true, index is unique. */
            unique: boolean;
            /** If true, index allows multiple entries for a key. */
            multiEntry: boolean;
        }
        
        /** Key. */
        interface Key{
            /** Key type. */
            type: 'number' | 'string' | 'date' | 'array';
            /** Number value. */
            number?: number;
            /** String value. */
            string?: string;
            /** Date value. */
            date?: number;
            /** Array value. */
            array?: Key[];
        }
        
        /** Key range. */
        interface KeyRange{
            /** Lower bound. */
            lower?: Key;
            /** Upper bound. */
            upper?: Key;
            /** If true lower bound is open. */
            lowerOpen: boolean;
            /** If true upper bound is open. */
            upperOpen: boolean;
        }
        
        /** Data entry. */
        interface DataEntry{
            /** JSON-stringified key object. */
            key: string;
            /** JSON-stringified primary key object. */
            primaryKey: string;
            /** JSON-stringified value object. */
            value: string;
        }
        
        /** Key path. */
        interface KeyPath{
            /** Key path type. */
            type: 'null' | 'string' | 'array';
            /** String value. */
            string?: string;
            /** Array value. */
            array?: string[];
        }
        
        interface RequestDatabaseNamesRequest{
            /** Security origin. */
            securityOrigin: string;
        }
        
        interface RequestDatabaseNamesResponse{
            /** Database names for origin. */
            databaseNames: string[];
        }
        
        interface RequestDatabaseRequest{
            /** Security origin. */
            securityOrigin: string;
            /** Database name. */
            databaseName: string;
        }
        
        interface RequestDatabaseResponse{
            /** Database with an array of object stores. */
            databaseWithObjectStores: DatabaseWithObjectStores;
        }
        
        interface RequestDataRequest{
            /** Security origin. */
            securityOrigin: string;
            /** Database name. */
            databaseName: string;
            /** Object store name. */
            objectStoreName: string;
            /** Index name, empty string for object store data requests. */
            indexName: string;
            /** Number of records to skip. */
            skipCount: number;
            /** Number of records to fetch. */
            pageSize: number;
            /** Key range. */
            keyRange?: KeyRange;
        }
        
        interface RequestDataResponse{
            /** Array of object store data entries. */
            objectStoreDataEntries: DataEntry[];
            /** If true, there are more entries to fetch in the given range. */
            hasMore: boolean;
        }
        
        interface ClearObjectStoreRequest{
            /** Security origin. */
            securityOrigin: string;
            /** Database name. */
            databaseName: string;
            /** Object store name. */
            objectStoreName: string;
        }
        
        interface ClearObjectStoreResponse{
        }
    }
    
    interface IIndexedDB{
        /** Enables events from backend. */
        enable(): Promise<void>;
        /** Disables events from backend. */
        disable(): Promise<void>;
        /** Requests database names for given security origin. */
        requestDatabaseNames(params: IndexedDB.RequestDatabaseNamesRequest): Promise<IndexedDB.RequestDatabaseNamesResponse>;
        /** Requests database with given name in given frame. */
        requestDatabase(params: IndexedDB.RequestDatabaseRequest): Promise<IndexedDB.RequestDatabaseResponse>;
        /** Requests data from object store or index. */
        requestData(params: IndexedDB.RequestDataRequest): Promise<IndexedDB.RequestDataResponse>;
        /** Clears all entries from an object store. */
        clearObjectStore(params: IndexedDB.ClearObjectStoreRequest): Promise<IndexedDB.ClearObjectStoreResponse>;
    }
    
    module CacheStorage{
        
        /** Unique identifier of the Cache object. */
        type CacheId = string;
        
        /** Data entry. */
        interface DataEntry{
            /** Request url spec. */
            request: string;
            /** Response stataus text. */
            response: string;
        }
        
        /** Cache identifier. */
        interface Cache{
            /** An opaque unique id of the cache. */
            cacheId: CacheId;
            /** Security origin of the cache. */
            securityOrigin: string;
            /** The name of the cache. */
            cacheName: string;
        }
        
        interface RequestCacheNamesRequest{
            /** Security origin. */
            securityOrigin: string;
        }
        
        interface RequestCacheNamesResponse{
            /** Caches for the security origin. */
            caches: Cache[];
        }
        
        interface RequestEntriesRequest{
            /** ID of cache to get entries from. */
            cacheId: CacheId;
            /** Number of records to skip. */
            skipCount: number;
            /** Number of records to fetch. */
            pageSize: number;
        }
        
        interface RequestEntriesResponse{
            /** Array of object store data entries. */
            cacheDataEntries: DataEntry[];
            /** If true, there are more entries to fetch in the given range. */
            hasMore: boolean;
        }
        
        interface DeleteCacheRequest{
            /** Id of cache for deletion. */
            cacheId: CacheId;
        }
        
        interface DeleteEntryRequest{
            /** Id of cache where the entry will be deleted. */
            cacheId: CacheId;
            /** URL spec of the request. */
            request: string;
        }
    }
    
    interface ICacheStorage{
        /** Requests cache names. */
        requestCacheNames(params: CacheStorage.RequestCacheNamesRequest): Promise<CacheStorage.RequestCacheNamesResponse>;
        /** Requests data from cache. */
        requestEntries(params: CacheStorage.RequestEntriesRequest): Promise<CacheStorage.RequestEntriesResponse>;
        /** Deletes a cache. */
        deleteCache(params: CacheStorage.DeleteCacheRequest): Promise<void>;
        /** Deletes a cache entry. */
        deleteEntry(params: CacheStorage.DeleteEntryRequest): Promise<void>;
    }
    
    /** Query and modify DOM storage. */
    module DOMStorage{
        
        /** DOM Storage identifier. */
        interface StorageId{
            /** Security origin for the storage. */
            securityOrigin: string;
            /** Whether the storage is local storage (not session storage). */
            isLocalStorage: boolean;
        }
        
        /** DOM Storage item. */
        type Item = string[];
        
        interface GetDOMStorageItemsRequest{
            storageId: StorageId;
        }
        
        interface GetDOMStorageItemsResponse{
            entries: Item[];
        }
        
        interface SetDOMStorageItemRequest{
            storageId: StorageId;
            key: string;
            value: string;
        }
        
        interface RemoveDOMStorageItemRequest{
            storageId: StorageId;
            key: string;
        }
        
        interface DomStorageItemsClearedEvent{
            storageId: StorageId;
        }
        
        interface DomStorageItemRemovedEvent{
            storageId: StorageId;
            key: string;
        }
        
        interface DomStorageItemAddedEvent{
            storageId: StorageId;
            key: string;
            newValue: string;
        }
        
        interface DomStorageItemUpdatedEvent{
            storageId: StorageId;
            key: string;
            oldValue: string;
            newValue: string;
        }
    }
    
    interface IDOMStorage{
        /** Enables storage tracking, storage events will now be delivered to the client. */
        enable(): Promise<void>;
        /** Disables storage tracking, prevents storage events from being sent to the client. */
        disable(): Promise<void>;
        getDOMStorageItems(params: DOMStorage.GetDOMStorageItemsRequest): Promise<DOMStorage.GetDOMStorageItemsResponse>;
        setDOMStorageItem(params: DOMStorage.SetDOMStorageItemRequest): Promise<void>;
        removeDOMStorageItem(params: DOMStorage.RemoveDOMStorageItemRequest): Promise<void>;
        onDomStorageItemsCleared(handler: (event: DOMStorage.DomStorageItemsClearedEvent) => void);
        onDomStorageItemRemoved(handler: (event: DOMStorage.DomStorageItemRemovedEvent) => void);
        onDomStorageItemAdded(handler: (event: DOMStorage.DomStorageItemAddedEvent) => void);
        onDomStorageItemUpdated(handler: (event: DOMStorage.DomStorageItemUpdatedEvent) => void);
    }
    
    module ApplicationCache{
        
        /** Detailed application cache resource information. */
        interface ApplicationCacheResource{
            /** Resource url. */
            url: string;
            /** Resource size. */
            size: number;
            /** Resource type. */
            type: string;
        }
        
        /** Detailed application cache information. */
        interface ApplicationCache{
            /** Manifest URL. */
            manifestURL: string;
            /** Application cache size. */
            size: number;
            /** Application cache creation time. */
            creationTime: number;
            /** Application cache update time. */
            updateTime: number;
            /** Application cache resources. */
            resources: ApplicationCacheResource[];
        }
        
        /** Frame identifier - manifest URL pair. */
        interface FrameWithManifest{
            /** Frame identifier. */
            frameId: Page.FrameId;
            /** Manifest URL. */
            manifestURL: string;
            /** Application cache status. */
            status: number;
        }
        
        interface GetFramesWithManifestsResponse{
            /** Array of frame identifiers with manifest urls for each frame containing a document associated with some application cache. */
            frameIds: FrameWithManifest[];
        }
        
        interface GetManifestForFrameRequest{
            /** Identifier of the frame containing document whose manifest is retrieved. */
            frameId: Page.FrameId;
        }
        
        interface GetManifestForFrameResponse{
            /** Manifest URL for document in the given frame. */
            manifestURL: string;
        }
        
        interface GetApplicationCacheForFrameRequest{
            /** Identifier of the frame containing document whose application cache is retrieved. */
            frameId: Page.FrameId;
        }
        
        interface GetApplicationCacheForFrameResponse{
            /** Relevant application cache data for the document in given frame. */
            applicationCache: ApplicationCache;
        }
        
        interface ApplicationCacheStatusUpdatedEvent{
            /** Identifier of the frame containing document whose application cache updated status. */
            frameId: Page.FrameId;
            /** Manifest URL. */
            manifestURL: string;
            /** Updated application cache status. */
            status: number;
        }
        
        interface NetworkStateUpdatedEvent{
            isNowOnline: boolean;
        }
    }
    
    interface IApplicationCache{
        /** Returns array of frame identifiers with manifest urls for each frame containing a document associated with some application cache. */
        getFramesWithManifests(): Promise<ApplicationCache.GetFramesWithManifestsResponse>;
        /** Enables application cache domain notifications. */
        enable(): Promise<void>;
        /** Returns manifest URL for document in the given frame. */
        getManifestForFrame(params: ApplicationCache.GetManifestForFrameRequest): Promise<ApplicationCache.GetManifestForFrameResponse>;
        /** Returns relevant application cache data for the document in given frame. */
        getApplicationCacheForFrame(params: ApplicationCache.GetApplicationCacheForFrameRequest): Promise<ApplicationCache.GetApplicationCacheForFrameResponse>;
        onApplicationCacheStatusUpdated(handler: (event: ApplicationCache.ApplicationCacheStatusUpdatedEvent) => void);
        onNetworkStateUpdated(handler: (event: ApplicationCache.NetworkStateUpdatedEvent) => void);
    }
    
    /** This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object that has an 'id</code>. This <code>id</code> can be used to get additional information on the Node, resolve it into the JavaScript object wrapper, etc. It is important that client receives DOM events only for the nodes that are known to the client. Backend keeps track of the nodes that were sent to the client and never sends the same node twice. It is client's responsibility to collect information about the nodes that were sent to the client.<p>Note that <code>iframe' owner elements will return corresponding document elements as their child nodes.</p> */
    module DOM{
        
        /** Unique DOM node identifier. */
        type NodeId = number;
        
        /** Unique DOM node identifier used to reference a node that may not have been pushed to the front-end. */
        type BackendNodeId = number;
        
        /** Backend node with a friendly name. */
        interface BackendNode{
            /** 'Node''s nodeType. */
            nodeType: number;
            /** 'Node''s nodeName. */
            nodeName: string;
            backendNodeId: BackendNodeId;
        }
        
        /** Pseudo element type. */
        type PseudoType = 'first-line' | 'first-letter' | 'before' | 'after' | 'backdrop' | 'selection' | 'first-line-inherited' | 'scrollbar' | 'scrollbar-thumb' | 'scrollbar-button' | 'scrollbar-track' | 'scrollbar-track-piece' | 'scrollbar-corner' | 'resizer' | 'input-list-button';
        
        /** Shadow root type. */
        type ShadowRootType = 'user-agent' | 'open' | 'closed';
        
        /** DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type. */
        interface Node{
            /** Node identifier that is passed into the rest of the DOM messages as the 'nodeId</code>. Backend will only push node with given <code>id' once. It is aware of all requested nodes and will only fire DOM events for nodes known to the client. */
            nodeId: NodeId;
            /** 'Node''s nodeType. */
            nodeType: number;
            /** 'Node''s nodeName. */
            nodeName: string;
            /** 'Node''s localName. */
            localName: string;
            /** 'Node''s nodeValue. */
            nodeValue: string;
            /** Child count for 'Container' nodes. */
            childNodeCount?: number;
            /** Child nodes of this node when requested with children. */
            children?: Node[];
            /** Attributes of the 'Element</code> node in the form of flat array <code>[name1, value1, name2, value2]'. */
            attributes?: string[];
            /** Document URL that 'Document</code> or <code>FrameOwner' node points to. */
            documentURL?: string;
            /** Base URL that 'Document</code> or <code>FrameOwner' node uses for URL completion. */
            baseURL?: string;
            /** 'DocumentType''s publicId. */
            publicId?: string;
            /** 'DocumentType''s systemId. */
            systemId?: string;
            /** 'DocumentType''s internalSubset. */
            internalSubset?: string;
            /** 'Document''s XML version in case of XML documents. */
            xmlVersion?: string;
            /** 'Attr''s name. */
            name?: string;
            /** 'Attr''s value. */
            value?: string;
            /** Pseudo element type for this node. */
            pseudoType?: PseudoType;
            /** Shadow root type. */
            shadowRootType?: ShadowRootType;
            /** Frame ID for frame owner elements. */
            frameId?: Page.FrameId;
            /** Content document for frame owner elements. */
            contentDocument?: Node;
            /** Shadow root list for given element host. */
            shadowRoots?: Node[];
            /** Content document fragment for template elements. */
            templateContent?: Node;
            /** Pseudo elements associated with this node. */
            pseudoElements?: Node[];
            /** Import document for the HTMLImport links. */
            importedDocument?: Node;
            /** Distributed nodes for given insertion point. */
            distributedNodes?: BackendNode[];
        }
        
        /** A structure holding an RGBA color. */
        interface RGBA{
            /** The red component, in the [0-255] range. */
            r: number;
            /** The green component, in the [0-255] range. */
            g: number;
            /** The blue component, in the [0-255] range. */
            b: number;
            /** The alpha component, in the [0-1] range (default: 1). */
            a?: number;
        }
        
        /** An array of quad vertices, x immediately followed by y for each point, points clock-wise. */
        type Quad = number[];
        
        /** Box model. */
        interface BoxModel{
            /** Content box */
            content: Quad;
            /** Padding box */
            padding: Quad;
            /** Border box */
            border: Quad;
            /** Margin box */
            margin: Quad;
            /** Node width */
            width: number;
            /** Node height */
            height: number;
            /** Shape outside coordinates */
            shapeOutside?: ShapeOutsideInfo;
        }
        
        /** CSS Shape Outside details. */
        interface ShapeOutsideInfo{
            /** Shape bounds */
            bounds: Quad;
            /** Shape coordinate details */
            shape: any[];
            /** Margin shape bounds */
            marginShape: any[];
        }
        
        /** Rectangle. */
        interface Rect{
            /** X coordinate */
            x: number;
            /** Y coordinate */
            y: number;
            /** Rectangle width */
            width: number;
            /** Rectangle height */
            height: number;
        }
        
        /** Configuration data for the highlighting of page elements. */
        interface HighlightConfig{
            /** Whether the node info tooltip should be shown (default: false). */
            showInfo?: boolean;
            /** Whether the rulers should be shown (default: false). */
            showRulers?: boolean;
            /** Whether the extension lines from node to the rulers should be shown (default: false). */
            showExtensionLines?: boolean;
            displayAsMaterial?: boolean;
            /** The content box highlight fill color (default: transparent). */
            contentColor?: RGBA;
            /** The padding highlight fill color (default: transparent). */
            paddingColor?: RGBA;
            /** The border highlight fill color (default: transparent). */
            borderColor?: RGBA;
            /** The margin highlight fill color (default: transparent). */
            marginColor?: RGBA;
            /** The event target element highlight fill color (default: transparent). */
            eventTargetColor?: RGBA;
            /** The shape outside fill color (default: transparent). */
            shapeColor?: RGBA;
            /** The shape margin fill color (default: transparent). */
            shapeMarginColor?: RGBA;
            /** Selectors to highlight relevant nodes. */
            selectorList?: string;
        }
        
        type InspectMode = 'searchForNode' | 'searchForUAShadowDOM' | 'showLayoutEditor' | 'none';
        
        interface GetDocumentResponse{
            /** Resulting node. */
            root: Node;
        }
        
        interface RequestChildNodesRequest{
            /** Id of the node to get children for. */
            nodeId: NodeId;
            /** The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0. */
            depth?: number;
        }
        
        interface QuerySelectorRequest{
            /** Id of the node to query upon. */
            nodeId: NodeId;
            /** Selector string. */
            selector: string;
        }
        
        interface QuerySelectorResponse{
            /** Query selector result. */
            nodeId: NodeId;
        }
        
        interface QuerySelectorAllRequest{
            /** Id of the node to query upon. */
            nodeId: NodeId;
            /** Selector string. */
            selector: string;
        }
        
        interface QuerySelectorAllResponse{
            /** Query selector result. */
            nodeIds: NodeId[];
        }
        
        interface SetNodeNameRequest{
            /** Id of the node to set name for. */
            nodeId: NodeId;
            /** New node's name. */
            name: string;
        }
        
        interface SetNodeNameResponse{
            /** New node's id. */
            nodeId: NodeId;
        }
        
        interface SetNodeValueRequest{
            /** Id of the node to set value for. */
            nodeId: NodeId;
            /** New node's value. */
            value: string;
        }
        
        interface RemoveNodeRequest{
            /** Id of the node to remove. */
            nodeId: NodeId;
        }
        
        interface SetAttributeValueRequest{
            /** Id of the element to set attribute for. */
            nodeId: NodeId;
            /** Attribute name. */
            name: string;
            /** Attribute value. */
            value: string;
        }
        
        interface SetAttributesAsTextRequest{
            /** Id of the element to set attributes for. */
            nodeId: NodeId;
            /** Text with a number of attributes. Will parse this text using HTML parser. */
            text: string;
            /** Attribute name to replace with new attributes derived from text in case text parsed successfully. */
            name?: string;
        }
        
        interface RemoveAttributeRequest{
            /** Id of the element to remove attribute from. */
            nodeId: NodeId;
            /** Name of the attribute to remove. */
            name: string;
        }
        
        interface GetOuterHTMLRequest{
            /** Id of the node to get markup for. */
            nodeId: NodeId;
        }
        
        interface GetOuterHTMLResponse{
            /** Outer HTML markup. */
            outerHTML: string;
        }
        
        interface SetOuterHTMLRequest{
            /** Id of the node to set markup for. */
            nodeId: NodeId;
            /** Outer HTML markup to set. */
            outerHTML: string;
        }
        
        interface PerformSearchRequest{
            /** Plain text or query selector or XPath search query. */
            query: string;
            /** True to search in user agent shadow DOM. */
            includeUserAgentShadowDOM?: boolean;
        }
        
        interface PerformSearchResponse{
            /** Unique search session identifier. */
            searchId: string;
            /** Number of search results. */
            resultCount: number;
        }
        
        interface GetSearchResultsRequest{
            /** Unique search session identifier. */
            searchId: string;
            /** Start index of the search result to be returned. */
            fromIndex: number;
            /** End index of the search result to be returned. */
            toIndex: number;
        }
        
        interface GetSearchResultsResponse{
            /** Ids of the search result nodes. */
            nodeIds: NodeId[];
        }
        
        interface DiscardSearchResultsRequest{
            /** Unique search session identifier. */
            searchId: string;
        }
        
        interface RequestNodeRequest{
            /** JavaScript object id to convert into node. */
            objectId: Runtime.RemoteObjectId;
        }
        
        interface RequestNodeResponse{
            /** Node id for given object. */
            nodeId: NodeId;
        }
        
        interface SetInspectModeRequest{
            /** Set an inspection mode. */
            mode: InspectMode;
            /** A descriptor for the highlight appearance of hovered-over nodes. May be omitted if 'enabled == false'. */
            highlightConfig?: HighlightConfig;
        }
        
        interface HighlightRectRequest{
            /** X coordinate */
            x: number;
            /** Y coordinate */
            y: number;
            /** Rectangle width */
            width: number;
            /** Rectangle height */
            height: number;
            /** The highlight fill color (default: transparent). */
            color?: RGBA;
            /** The highlight outline color (default: transparent). */
            outlineColor?: RGBA;
        }
        
        interface HighlightQuadRequest{
            /** Quad to highlight */
            quad: Quad;
            /** The highlight fill color (default: transparent). */
            color?: RGBA;
            /** The highlight outline color (default: transparent). */
            outlineColor?: RGBA;
        }
        
        interface HighlightNodeRequest{
            /** A descriptor for the highlight appearance. */
            highlightConfig: HighlightConfig;
            /** Identifier of the node to highlight. */
            nodeId?: NodeId;
            /** Identifier of the backend node to highlight. */
            backendNodeId?: BackendNodeId;
            /** JavaScript object id of the node to be highlighted. */
            objectId?: Runtime.RemoteObjectId;
        }
        
        interface HighlightFrameRequest{
            /** Identifier of the frame to highlight. */
            frameId: Page.FrameId;
            /** The content box highlight fill color (default: transparent). */
            contentColor?: RGBA;
            /** The content box highlight outline color (default: transparent). */
            contentOutlineColor?: RGBA;
        }
        
        interface PushNodeByPathToFrontendRequest{
            /** Path to node in the proprietary format. */
            path: string;
        }
        
        interface PushNodeByPathToFrontendResponse{
            /** Id of the node for given path. */
            nodeId: NodeId;
        }
        
        interface PushNodesByBackendIdsToFrontendRequest{
            /** The array of backend node ids. */
            backendNodeIds: BackendNodeId[];
        }
        
        interface PushNodesByBackendIdsToFrontendResponse{
            /** The array of ids of pushed nodes that correspond to the backend ids specified in backendNodeIds. */
            nodeIds: NodeId[];
        }
        
        interface SetInspectedNodeRequest{
            /** DOM node id to be accessible by means of $x command line API. */
            nodeId: NodeId;
        }
        
        interface ResolveNodeRequest{
            /** Id of the node to resolve. */
            nodeId: NodeId;
            /** Symbolic group name that can be used to release multiple objects. */
            objectGroup?: string;
        }
        
        interface ResolveNodeResponse{
            /** JavaScript object wrapper for given node. */
            object: Runtime.RemoteObject;
        }
        
        interface GetAttributesRequest{
            /** Id of the node to retrieve attibutes for. */
            nodeId: NodeId;
        }
        
        interface GetAttributesResponse{
            /** An interleaved array of node attribute names and values. */
            attributes: string[];
        }
        
        interface CopyToRequest{
            /** Id of the node to copy. */
            nodeId: NodeId;
            /** Id of the element to drop the copy into. */
            targetNodeId: NodeId;
            /** Drop the copy before this node (if absent, the copy becomes the last child of 'targetNodeId'). */
            insertBeforeNodeId?: NodeId;
        }
        
        interface CopyToResponse{
            /** Id of the node clone. */
            nodeId: NodeId;
        }
        
        interface MoveToRequest{
            /** Id of the node to move. */
            nodeId: NodeId;
            /** Id of the element to drop the moved node into. */
            targetNodeId: NodeId;
            /** Drop node before this one (if absent, the moved node becomes the last child of 'targetNodeId'). */
            insertBeforeNodeId?: NodeId;
        }
        
        interface MoveToResponse{
            /** New id of the moved node. */
            nodeId: NodeId;
        }
        
        interface FocusRequest{
            /** Id of the node to focus. */
            nodeId: NodeId;
        }
        
        interface SetFileInputFilesRequest{
            /** Id of the file input node to set files for. */
            nodeId: NodeId;
            /** Array of file paths to set. */
            files: string[];
        }
        
        interface GetBoxModelRequest{
            /** Id of the node to get box model for. */
            nodeId: NodeId;
        }
        
        interface GetBoxModelResponse{
            /** Box model for the node. */
            model: BoxModel;
        }
        
        interface GetNodeForLocationRequest{
            /** X coordinate. */
            x: number;
            /** Y coordinate. */
            y: number;
        }
        
        interface GetNodeForLocationResponse{
            /** Id of the node at given coordinates. */
            nodeId: NodeId;
        }
        
        interface GetRelayoutBoundaryRequest{
            /** Id of the node. */
            nodeId: NodeId;
        }
        
        interface GetRelayoutBoundaryResponse{
            /** Relayout boundary node id for the given node. */
            nodeId: NodeId;
        }
        
        interface GetHighlightObjectForTestRequest{
            /** Id of the node to get highlight object for. */
            nodeId: NodeId;
        }
        
        interface GetHighlightObjectForTestResponse{
            /** Highlight data for the node. */
            highlight: any;
        }
        
        interface InspectNodeRequestedEvent{
            /** Id of the node to inspect. */
            backendNodeId: BackendNodeId;
        }
        
        interface SetChildNodesEvent{
            /** Parent node id to populate with children. */
            parentId: NodeId;
            /** Child nodes array. */
            nodes: Node[];
        }
        
        interface AttributeModifiedEvent{
            /** Id of the node that has changed. */
            nodeId: NodeId;
            /** Attribute name. */
            name: string;
            /** Attribute value. */
            value: string;
        }
        
        interface AttributeRemovedEvent{
            /** Id of the node that has changed. */
            nodeId: NodeId;
            /** A ttribute name. */
            name: string;
        }
        
        interface InlineStyleInvalidatedEvent{
            /** Ids of the nodes for which the inline styles have been invalidated. */
            nodeIds: NodeId[];
        }
        
        interface CharacterDataModifiedEvent{
            /** Id of the node that has changed. */
            nodeId: NodeId;
            /** New text value. */
            characterData: string;
        }
        
        interface ChildNodeCountUpdatedEvent{
            /** Id of the node that has changed. */
            nodeId: NodeId;
            /** New node count. */
            childNodeCount: number;
        }
        
        interface ChildNodeInsertedEvent{
            /** Id of the node that has changed. */
            parentNodeId: NodeId;
            /** If of the previous siblint. */
            previousNodeId: NodeId;
            /** Inserted node data. */
            node: Node;
        }
        
        interface ChildNodeRemovedEvent{
            /** Parent id. */
            parentNodeId: NodeId;
            /** Id of the node that has been removed. */
            nodeId: NodeId;
        }
        
        interface ShadowRootPushedEvent{
            /** Host element id. */
            hostId: NodeId;
            /** Shadow root. */
            root: Node;
        }
        
        interface ShadowRootPoppedEvent{
            /** Host element id. */
            hostId: NodeId;
            /** Shadow root id. */
            rootId: NodeId;
        }
        
        interface PseudoElementAddedEvent{
            /** Pseudo element's parent element id. */
            parentId: NodeId;
            /** The added pseudo element. */
            pseudoElement: Node;
        }
        
        interface PseudoElementRemovedEvent{
            /** Pseudo element's parent element id. */
            parentId: NodeId;
            /** The removed pseudo element id. */
            pseudoElementId: NodeId;
        }
        
        interface DistributedNodesUpdatedEvent{
            /** Insertion point where distrubuted nodes were updated. */
            insertionPointId: NodeId;
            /** Distributed nodes for given insertion point. */
            distributedNodes: BackendNode[];
        }
        
        interface NodeHighlightRequestedEvent{
            nodeId: NodeId;
        }
    }
    
    interface IDOM{
        /** Enables DOM agent for the given page. */
        enable(): Promise<void>;
        /** Disables DOM agent for the given page. */
        disable(): Promise<void>;
        /** Returns the root DOM node to the caller. */
        getDocument(): Promise<DOM.GetDocumentResponse>;
        /** Requests that children of the node with given id are returned to the caller in form of 'setChildNodes' events where not only immediate children are retrieved, but all children down to the specified depth. */
        requestChildNodes(params: DOM.RequestChildNodesRequest): Promise<void>;
        /** Executes 'querySelector' on a given node. */
        querySelector(params: DOM.QuerySelectorRequest): Promise<DOM.QuerySelectorResponse>;
        /** Executes 'querySelectorAll' on a given node. */
        querySelectorAll(params: DOM.QuerySelectorAllRequest): Promise<DOM.QuerySelectorAllResponse>;
        /** Sets node name for a node with given id. */
        setNodeName(params: DOM.SetNodeNameRequest): Promise<DOM.SetNodeNameResponse>;
        /** Sets node value for a node with given id. */
        setNodeValue(params: DOM.SetNodeValueRequest): Promise<void>;
        /** Removes node with given id. */
        removeNode(params: DOM.RemoveNodeRequest): Promise<void>;
        /** Sets attribute for an element with given id. */
        setAttributeValue(params: DOM.SetAttributeValueRequest): Promise<void>;
        /** Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs. */
        setAttributesAsText(params: DOM.SetAttributesAsTextRequest): Promise<void>;
        /** Removes attribute with given name from an element with given id. */
        removeAttribute(params: DOM.RemoveAttributeRequest): Promise<void>;
        /** Returns node's HTML markup. */
        getOuterHTML(params: DOM.GetOuterHTMLRequest): Promise<DOM.GetOuterHTMLResponse>;
        /** Sets node HTML markup, returns new node id. */
        setOuterHTML(params: DOM.SetOuterHTMLRequest): Promise<void>;
        /** Searches for a given string in the DOM tree. Use 'getSearchResults</code> to access search results or <code>cancelSearch' to end this search session. */
        performSearch(params: DOM.PerformSearchRequest): Promise<DOM.PerformSearchResponse>;
        /** Returns search results from given 'fromIndex</code> to given <code>toIndex' from the sarch with the given identifier. */
        getSearchResults(params: DOM.GetSearchResultsRequest): Promise<DOM.GetSearchResultsResponse>;
        /** Discards search results from the session with the given id. 'getSearchResults' should no longer be called for that search. */
        discardSearchResults(params: DOM.DiscardSearchResultsRequest): Promise<void>;
        /** Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of 'setChildNodes' notifications. */
        requestNode(params: DOM.RequestNodeRequest): Promise<DOM.RequestNodeResponse>;
        /** Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted. Backend then generates 'inspectNodeRequested' event upon element selection. */
        setInspectMode(params: DOM.SetInspectModeRequest): Promise<void>;
        /** Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport. */
        highlightRect(params: DOM.HighlightRectRequest): Promise<void>;
        /** Highlights given quad. Coordinates are absolute with respect to the main frame viewport. */
        highlightQuad(params: DOM.HighlightQuadRequest): Promise<void>;
        /** Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified. */
        highlightNode(params: DOM.HighlightNodeRequest): Promise<void>;
        /** Hides DOM node highlight. */
        hideHighlight(): Promise<void>;
        /** Highlights owner element of the frame with given id. */
        highlightFrame(params: DOM.HighlightFrameRequest): Promise<void>;
        /** Requests that the node is sent to the caller given its path. // FIXME, use XPath */
        pushNodeByPathToFrontend(params: DOM.PushNodeByPathToFrontendRequest): Promise<DOM.PushNodeByPathToFrontendResponse>;
        /** Requests that a batch of nodes is sent to the caller given their backend node ids. */
        pushNodesByBackendIdsToFrontend(params: DOM.PushNodesByBackendIdsToFrontendRequest): Promise<DOM.PushNodesByBackendIdsToFrontendResponse>;
        /** Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions). */
        setInspectedNode(params: DOM.SetInspectedNodeRequest): Promise<void>;
        /** Resolves JavaScript node object for given node id. */
        resolveNode(params: DOM.ResolveNodeRequest): Promise<DOM.ResolveNodeResponse>;
        /** Returns attributes for the specified node. */
        getAttributes(params: DOM.GetAttributesRequest): Promise<DOM.GetAttributesResponse>;
        /** Creates a deep copy of the specified node and places it into the target container before the given anchor. */
        copyTo(params: DOM.CopyToRequest): Promise<DOM.CopyToResponse>;
        /** Moves node into the new container, places it before the given anchor. */
        moveTo(params: DOM.MoveToRequest): Promise<DOM.MoveToResponse>;
        /** Undoes the last performed action. */
        undo(): Promise<void>;
        /** Re-does the last undone action. */
        redo(): Promise<void>;
        /** Marks last undoable state. */
        markUndoableState(): Promise<void>;
        /** Focuses the given element. */
        focus(params: DOM.FocusRequest): Promise<void>;
        /** Sets files for the given file input element. */
        setFileInputFiles(params: DOM.SetFileInputFilesRequest): Promise<void>;
        /** Returns boxes for the currently selected nodes. */
        getBoxModel(params: DOM.GetBoxModelRequest): Promise<DOM.GetBoxModelResponse>;
        /** Returns node id at given location. */
        getNodeForLocation(params: DOM.GetNodeForLocationRequest): Promise<DOM.GetNodeForLocationResponse>;
        /** Returns the id of the nearest ancestor that is a relayout boundary. */
        getRelayoutBoundary(params: DOM.GetRelayoutBoundaryRequest): Promise<DOM.GetRelayoutBoundaryResponse>;
        /** For testing. */
        getHighlightObjectForTest(params: DOM.GetHighlightObjectForTestRequest): Promise<DOM.GetHighlightObjectForTestResponse>;
        /** Fired when 'Document' has been totally updated. Node ids are no longer valid. */
        onDocumentUpdated(handler: () => void);
        /** Fired when the node should be inspected. This happens after call to 'setInspectMode'. */
        onInspectNodeRequested(handler: (event: DOM.InspectNodeRequestedEvent) => void);
        /** Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids. */
        onSetChildNodes(handler: (event: DOM.SetChildNodesEvent) => void);
        /** Fired when 'Element''s attribute is modified. */
        onAttributeModified(handler: (event: DOM.AttributeModifiedEvent) => void);
        /** Fired when 'Element''s attribute is removed. */
        onAttributeRemoved(handler: (event: DOM.AttributeRemovedEvent) => void);
        /** Fired when 'Element''s inline style is modified via a CSS property modification. */
        onInlineStyleInvalidated(handler: (event: DOM.InlineStyleInvalidatedEvent) => void);
        /** Mirrors 'DOMCharacterDataModified' event. */
        onCharacterDataModified(handler: (event: DOM.CharacterDataModifiedEvent) => void);
        /** Fired when 'Container''s child node count has changed. */
        onChildNodeCountUpdated(handler: (event: DOM.ChildNodeCountUpdatedEvent) => void);
        /** Mirrors 'DOMNodeInserted' event. */
        onChildNodeInserted(handler: (event: DOM.ChildNodeInsertedEvent) => void);
        /** Mirrors 'DOMNodeRemoved' event. */
        onChildNodeRemoved(handler: (event: DOM.ChildNodeRemovedEvent) => void);
        /** Called when shadow root is pushed into the element. */
        onShadowRootPushed(handler: (event: DOM.ShadowRootPushedEvent) => void);
        /** Called when shadow root is popped from the element. */
        onShadowRootPopped(handler: (event: DOM.ShadowRootPoppedEvent) => void);
        /** Called when a pseudo element is added to an element. */
        onPseudoElementAdded(handler: (event: DOM.PseudoElementAddedEvent) => void);
        /** Called when a pseudo element is removed from an element. */
        onPseudoElementRemoved(handler: (event: DOM.PseudoElementRemovedEvent) => void);
        /** Called when distrubution is changed. */
        onDistributedNodesUpdated(handler: (event: DOM.DistributedNodesUpdatedEvent) => void);
        onNodeHighlightRequested(handler: (event: DOM.NodeHighlightRequestedEvent) => void);
    }
    
    /** This domain exposes CSS read/write operations. All CSS objects (stylesheets, rules, and styles) have an associated 'id</code> used in subsequent operations on the related object. Each object type has a specific <code>id</code> structure, and those are not interchangeable between objects of different kinds. CSS objects can be loaded using the <code>get*ForNode()</code> calls (which accept a DOM node id). A client can also discover all the existing stylesheets with the <code>getAllStyleSheets()</code> method (or keeping track of the <code>styleSheetAdded</code>/<code>styleSheetRemoved</code> events) and subsequently load the required stylesheet contents using the <code>getStyleSheet[Text]()' methods. */
    module CSS{
        
        type StyleSheetId = string;
        
        /** Stylesheet type: "injected" for stylesheets injected via extension, "user-agent" for user-agent stylesheets, "inspector" for stylesheets created by the inspector (i.e. those holding the "via inspector" rules), "regular" for regular stylesheets. */
        type StyleSheetOrigin = 'injected' | 'user-agent' | 'inspector' | 'regular';
        
        /** CSS rule collection for a single pseudo style. */
        interface PseudoElementMatches{
            /** Pseudo element type. */
            pseudoType: DOM.PseudoType;
            /** Matches of CSS rules applicable to the pseudo style. */
            matches: RuleMatch[];
        }
        
        /** Inherited CSS rule collection from ancestor node. */
        interface InheritedStyleEntry{
            /** The ancestor node's inline style, if any, in the style inheritance chain. */
            inlineStyle?: CSSStyle;
            /** Matches of CSS rules matching the ancestor node in the style inheritance chain. */
            matchedCSSRules: RuleMatch[];
        }
        
        /** Match data for a CSS rule. */
        interface RuleMatch{
            /** CSS rule in the match. */
            rule: CSSRule;
            /** Matching selector indices in the rule's selectorList selectors (0-based). */
            matchingSelectors: number[];
        }
        
        /** Data for a simple selector (these are delimited by commas in a selector list). */
        interface Value{
            /** Value text. */
            text: string;
            /** Value range in the underlying resource (if available). */
            range?: SourceRange;
        }
        
        /** Selector list data. */
        interface SelectorList{
            /** Selectors in the list. */
            selectors: Value[];
            /** Rule selector text. */
            text: string;
        }
        
        /** CSS stylesheet metainformation. */
        interface CSSStyleSheetHeader{
            /** The stylesheet identifier. */
            styleSheetId: StyleSheetId;
            /** Owner frame identifier. */
            frameId: Page.FrameId;
            /** Stylesheet resource URL. */
            sourceURL: string;
            /** URL of source map associated with the stylesheet (if any). */
            sourceMapURL?: string;
            /** Stylesheet origin. */
            origin: StyleSheetOrigin;
            /** Stylesheet title. */
            title: string;
            /** The backend id for the owner node of the stylesheet. */
            ownerNode?: DOM.BackendNodeId;
            /** Denotes whether the stylesheet is disabled. */
            disabled: boolean;
            /** Whether the sourceURL field value comes from the sourceURL comment. */
            hasSourceURL?: boolean;
            /** Whether this stylesheet is created for STYLE tag by parser. This flag is not set for document.written STYLE tags. */
            isInline: boolean;
            /** Line offset of the stylesheet within the resource (zero based). */
            startLine: number;
            /** Column offset of the stylesheet within the resource (zero based). */
            startColumn: number;
        }
        
        /** CSS rule representation. */
        interface CSSRule{
            /** The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from. */
            styleSheetId?: StyleSheetId;
            /** Rule selector data. */
            selectorList: SelectorList;
            /** Parent stylesheet's origin. */
            origin: StyleSheetOrigin;
            /** Associated style declaration. */
            style: CSSStyle;
            /** Media list array (for rules involving media queries). The array enumerates media queries starting with the innermost one, going outwards. */
            media?: CSSMedia[];
        }
        
        /** Text range within a resource. All numbers are zero-based. */
        interface SourceRange{
            /** Start line of range. */
            startLine: number;
            /** Start column of range (inclusive). */
            startColumn: number;
            /** End line of range */
            endLine: number;
            /** End column of range (exclusive). */
            endColumn: number;
        }
        
        interface ShorthandEntry{
            /** Shorthand name. */
            name: string;
            /** Shorthand value. */
            value: string;
            /** Whether the property has "!important" annotation (implies 'false' if absent). */
            important?: boolean;
        }
        
        interface CSSComputedStyleProperty{
            /** Computed style property name. */
            name: string;
            /** Computed style property value. */
            value: string;
        }
        
        /** CSS style representation. */
        interface CSSStyle{
            /** The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from. */
            styleSheetId?: StyleSheetId;
            /** CSS properties in the style. */
            cssProperties: CSSProperty[];
            /** Computed values for all shorthands found in the style. */
            shorthandEntries: ShorthandEntry[];
            /** Style declaration text (if available). */
            cssText?: string;
            /** Style declaration range in the enclosing stylesheet (if available). */
            range?: SourceRange;
        }
        
        /** CSS property declaration data. */
        interface CSSProperty{
            /** The property name. */
            name: string;
            /** The property value. */
            value: string;
            /** Whether the property has "!important" annotation (implies 'false' if absent). */
            important?: boolean;
            /** Whether the property is implicit (implies 'false' if absent). */
            implicit?: boolean;
            /** The full property text as specified in the style. */
            text?: string;
            /** Whether the property is understood by the browser (implies 'true' if absent). */
            parsedOk?: boolean;
            /** Whether the property is disabled by the user (present for source-based properties only). */
            disabled?: boolean;
            /** The entire property range in the enclosing style declaration (if available). */
            range?: SourceRange;
        }
        
        /** CSS media rule descriptor. */
        interface CSSMedia{
            /** Media query text. */
            text: string;
            /** Source of the media query: "mediaRule" if specified by a @media rule, "importRule" if specified by an @import rule, "linkedSheet" if specified by a "media" attribute in a linked stylesheet's LINK tag, "inlineSheet" if specified by a "media" attribute in an inline stylesheet's STYLE tag. */
            source: 'mediaRule' | 'importRule' | 'linkedSheet' | 'inlineSheet';
            /** URL of the document containing the media query description. */
            sourceURL?: string;
            /** The associated rule (@media or @import) header range in the enclosing stylesheet (if available). */
            range?: SourceRange;
            /** Identifier of the stylesheet containing this object (if exists). */
            styleSheetId?: StyleSheetId;
            /** Array of media queries. */
            mediaList?: MediaQuery[];
        }
        
        /** Media query descriptor. */
        interface MediaQuery{
            /** Array of media query expressions. */
            expressions: MediaQueryExpression[];
            /** Whether the media query condition is satisfied. */
            active: boolean;
        }
        
        /** Media query expression descriptor. */
        interface MediaQueryExpression{
            /** Media query expression value. */
            value: number;
            /** Media query expression units. */
            unit: string;
            /** Media query expression feature. */
            feature: string;
            /** The associated range of the value text in the enclosing stylesheet (if available). */
            valueRange?: SourceRange;
            /** Computed length of media query expression (if applicable). */
            computedLength?: number;
        }
        
        /** Information about amount of glyphs that were rendered with given font. */
        interface PlatformFontUsage{
            /** Font's family name reported by platform. */
            familyName: string;
            /** Indicates if the font was downloaded or resolved locally. */
            isCustomFont: boolean;
            /** Amount of glyphs that were rendered with this font. */
            glyphCount: number;
        }
        
        /** CSS keyframes rule representation. */
        interface CSSKeyframesRule{
            /** Animation name. */
            animationName: Value;
            /** List of keyframes. */
            keyframes: CSSKeyframeRule[];
        }
        
        /** CSS keyframe rule representation. */
        interface CSSKeyframeRule{
            /** The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from. */
            styleSheetId?: StyleSheetId;
            /** Parent stylesheet's origin. */
            origin: StyleSheetOrigin;
            /** Associated key text. */
            keyText: Value;
            /** Associated style declaration. */
            style: CSSStyle;
        }
        
        /** A descriptor of operation to mutate style declaration text. */
        interface StyleDeclarationEdit{
            /** The css style sheet identifier. */
            styleSheetId: StyleSheetId;
            /** The range of the style text in the enclosing stylesheet. */
            range: SourceRange;
            /** New style text. */
            text: string;
        }
        
        interface GetMatchedStylesForNodeRequest{
            nodeId: DOM.NodeId;
        }
        
        interface GetMatchedStylesForNodeResponse{
            /** Inline style for the specified DOM node. */
            inlineStyle?: CSSStyle;
            /** Attribute-defined element style (e.g. resulting from "width=20 height=100%"). */
            attributesStyle?: CSSStyle;
            /** CSS rules matching this node, from all applicable stylesheets. */
            matchedCSSRules?: RuleMatch[];
            /** Pseudo style matches for this node. */
            pseudoElements?: PseudoElementMatches[];
            /** A chain of inherited styles (from the immediate node parent up to the DOM tree root). */
            inherited?: InheritedStyleEntry[];
            /** A list of CSS keyframed animations matching this node. */
            cssKeyframesRules?: CSSKeyframesRule[];
        }
        
        interface GetInlineStylesForNodeRequest{
            nodeId: DOM.NodeId;
        }
        
        interface GetInlineStylesForNodeResponse{
            /** Inline style for the specified DOM node. */
            inlineStyle?: CSSStyle;
            /** Attribute-defined element style (e.g. resulting from "width=20 height=100%"). */
            attributesStyle?: CSSStyle;
        }
        
        interface GetComputedStyleForNodeRequest{
            nodeId: DOM.NodeId;
        }
        
        interface GetComputedStyleForNodeResponse{
            /** Computed style for the specified DOM node. */
            computedStyle: CSSComputedStyleProperty[];
        }
        
        interface GetPlatformFontsForNodeRequest{
            nodeId: DOM.NodeId;
        }
        
        interface GetPlatformFontsForNodeResponse{
            /** Usage statistics for every employed platform font. */
            fonts: PlatformFontUsage[];
        }
        
        interface GetStyleSheetTextRequest{
            styleSheetId: StyleSheetId;
        }
        
        interface GetStyleSheetTextResponse{
            /** The stylesheet text. */
            text: string;
        }
        
        interface SetStyleSheetTextRequest{
            styleSheetId: StyleSheetId;
            text: string;
        }
        
        interface SetStyleSheetTextResponse{
            /** URL of source map associated with script (if any). */
            sourceMapURL?: string;
        }
        
        interface SetRuleSelectorRequest{
            styleSheetId: StyleSheetId;
            range: SourceRange;
            selector: string;
        }
        
        interface SetRuleSelectorResponse{
            /** The resulting selector list after modification. */
            selectorList: SelectorList;
        }
        
        interface SetKeyframeKeyRequest{
            styleSheetId: StyleSheetId;
            range: SourceRange;
            keyText: string;
        }
        
        interface SetKeyframeKeyResponse{
            /** The resulting key text after modification. */
            keyText: Value;
        }
        
        interface SetStyleTextsRequest{
            edits: StyleDeclarationEdit[];
        }
        
        interface SetStyleTextsResponse{
            /** The resulting styles after modification. */
            styles: CSSStyle[];
        }
        
        interface SetMediaTextRequest{
            styleSheetId: StyleSheetId;
            range: SourceRange;
            text: string;
        }
        
        interface SetMediaTextResponse{
            /** The resulting CSS media rule after modification. */
            media: CSSMedia;
        }
        
        interface CreateStyleSheetRequest{
            /** Identifier of the frame where "via-inspector" stylesheet should be created. */
            frameId: Page.FrameId;
        }
        
        interface CreateStyleSheetResponse{
            /** Identifier of the created "via-inspector" stylesheet. */
            styleSheetId: StyleSheetId;
        }
        
        interface AddRuleRequest{
            /** The css style sheet identifier where a new rule should be inserted. */
            styleSheetId: StyleSheetId;
            /** The text of a new rule. */
            ruleText: string;
            /** Text position of a new rule in the target style sheet. */
            location: SourceRange;
        }
        
        interface AddRuleResponse{
            /** The newly created rule. */
            rule: CSSRule;
        }
        
        interface ForcePseudoStateRequest{
            /** The element id for which to force the pseudo state. */
            nodeId: DOM.NodeId;
            /** Element pseudo classes to force when computing the element's style. */
            forcedPseudoClasses: 'active' | 'focus' | 'hover' | 'visited'[];
        }
        
        interface GetMediaQueriesResponse{
            medias: CSSMedia[];
        }
        
        interface SetEffectivePropertyValueForNodeRequest{
            /** The element id for which to set property. */
            nodeId: DOM.NodeId;
            propertyName: string;
            value: string;
        }
        
        interface GetBackgroundColorsRequest{
            /** Id of the node to get background colors for. */
            nodeId: DOM.NodeId;
        }
        
        interface GetBackgroundColorsResponse{
            /** The range of background colors behind this element, if it contains any visible text. If no visible text is present, this will be undefined. In the case of a flat background color, this will consist of simply that color. In the case of a gradient, this will consist of each of the color stops. For anything more complicated, this will be an empty array. Images will be ignored (as if the image had failed to load). */
            backgroundColors?: string[];
        }
        
        interface StyleSheetChangedEvent{
            styleSheetId: StyleSheetId;
        }
        
        interface StyleSheetAddedEvent{
            /** Added stylesheet metainfo. */
            header: CSSStyleSheetHeader;
        }
        
        interface StyleSheetRemovedEvent{
            /** Identifier of the removed stylesheet. */
            styleSheetId: StyleSheetId;
        }
        
        interface LayoutEditorChangeEvent{
            /** Identifier of the stylesheet where the modification occurred. */
            styleSheetId: StyleSheetId;
            /** Range where the modification occurred. */
            changeRange: SourceRange;
        }
    }
    
    interface ICSS{
        /** Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been enabled until the result of this command is received. */
        enable(): Promise<void>;
        /** Disables the CSS agent for the given page. */
        disable(): Promise<void>;
        /** Returns requested styles for a DOM node identified by 'nodeId'. */
        getMatchedStylesForNode(params: CSS.GetMatchedStylesForNodeRequest): Promise<CSS.GetMatchedStylesForNodeResponse>;
        /** Returns the styles defined inline (explicitly in the "style" attribute and implicitly, using DOM attributes) for a DOM node identified by 'nodeId'. */
        getInlineStylesForNode(params: CSS.GetInlineStylesForNodeRequest): Promise<CSS.GetInlineStylesForNodeResponse>;
        /** Returns the computed style for a DOM node identified by 'nodeId'. */
        getComputedStyleForNode(params: CSS.GetComputedStyleForNodeRequest): Promise<CSS.GetComputedStyleForNodeResponse>;
        /** Requests information about platform fonts which we used to render child TextNodes in the given node. */
        getPlatformFontsForNode(params: CSS.GetPlatformFontsForNodeRequest): Promise<CSS.GetPlatformFontsForNodeResponse>;
        /** Returns the current textual content and the URL for a stylesheet. */
        getStyleSheetText(params: CSS.GetStyleSheetTextRequest): Promise<CSS.GetStyleSheetTextResponse>;
        /** Sets the new stylesheet text. */
        setStyleSheetText(params: CSS.SetStyleSheetTextRequest): Promise<CSS.SetStyleSheetTextResponse>;
        /** Modifies the rule selector. */
        setRuleSelector(params: CSS.SetRuleSelectorRequest): Promise<CSS.SetRuleSelectorResponse>;
        /** Modifies the keyframe rule key text. */
        setKeyframeKey(params: CSS.SetKeyframeKeyRequest): Promise<CSS.SetKeyframeKeyResponse>;
        /** Applies specified style edits one after another in the given order. */
        setStyleTexts(params: CSS.SetStyleTextsRequest): Promise<CSS.SetStyleTextsResponse>;
        /** Modifies the rule selector. */
        setMediaText(params: CSS.SetMediaTextRequest): Promise<CSS.SetMediaTextResponse>;
        /** Creates a new special "via-inspector" stylesheet in the frame with given 'frameId'. */
        createStyleSheet(params: CSS.CreateStyleSheetRequest): Promise<CSS.CreateStyleSheetResponse>;
        /** Inserts a new rule with the given 'ruleText</code> in a stylesheet with given <code>styleSheetId</code>, at the position specified by <code>location'. */
        addRule(params: CSS.AddRuleRequest): Promise<CSS.AddRuleResponse>;
        /** Ensures that the given node will have specified pseudo-classes whenever its style is computed by the browser. */
        forcePseudoState(params: CSS.ForcePseudoStateRequest): Promise<void>;
        /** Returns all media queries parsed by the rendering engine. */
        getMediaQueries(): Promise<CSS.GetMediaQueriesResponse>;
        /** Find a rule with the given active property for the given node and set the new value for this property */
        setEffectivePropertyValueForNode(params: CSS.SetEffectivePropertyValueForNodeRequest): Promise<void>;
        getBackgroundColors(params: CSS.GetBackgroundColorsRequest): Promise<CSS.GetBackgroundColorsResponse>;
        /** Fires whenever a MediaQuery result changes (for example, after a browser window has been resized.) The current implementation considers only viewport-dependent media features. */
        onMediaQueryResultChanged(handler: () => void);
        /** Fired whenever a stylesheet is changed as a result of the client operation. */
        onStyleSheetChanged(handler: (event: CSS.StyleSheetChangedEvent) => void);
        /** Fired whenever an active document stylesheet is added. */
        onStyleSheetAdded(handler: (event: CSS.StyleSheetAddedEvent) => void);
        /** Fired whenever an active document stylesheet is removed. */
        onStyleSheetRemoved(handler: (event: CSS.StyleSheetRemovedEvent) => void);
        onLayoutEditorChange(handler: (event: CSS.LayoutEditorChangeEvent) => void);
    }
    
    /** Input/Output operations for streams produced by DevTools. */
    module IO{
        
        type StreamHandle = string;
        
        interface ReadRequest{
            /** Handle of the stream to read. */
            handle: StreamHandle;
            /** Seek to the specified offset before reading (if not specificed, proceed with offset following the last read). */
            offset?: number;
            /** Maximum number of bytes to read (left upon the agent discretion if not specified). */
            size?: number;
        }
        
        interface ReadResponse{
            /** Data that were read. */
            data: string;
            /** Set if the end-of-file condition occured while reading. */
            eof: boolean;
        }
        
        interface CloseRequest{
            /** Handle of the stream to close. */
            handle: StreamHandle;
        }
    }
    
    interface IIO{
        /** Read a chunk of the stream */
        read(params: IO.ReadRequest): Promise<IO.ReadResponse>;
        /** Close the stream, discard any temporary backing storage. */
        close(params: IO.CloseRequest): Promise<void>;
    }
    
    /** DOM debugging allows setting breakpoints on particular DOM operations and events. JavaScript execution will stop on these operations as if there was a regular breakpoint set. */
    module DOMDebugger{
        
        /** DOM breakpoint type. */
        type DOMBreakpointType = 'subtree-modified' | 'attribute-modified' | 'node-removed';
        
        /** Object event listener. */
        interface EventListener{
            /** 'EventListener''s type. */
            type: string;
            /** 'EventListener''s useCapture. */
            useCapture: boolean;
            /** 'EventListener''s passive flag. */
            passive: boolean;
            /** Handler code location. */
            location: Debugger.Location;
            /** Event handler function value. */
            handler?: Runtime.RemoteObject;
            /** Event original handler function value. */
            originalHandler?: Runtime.RemoteObject;
            /** Event listener remove function. */
            removeFunction?: Runtime.RemoteObject;
        }
        
        interface SetDOMBreakpointRequest{
            /** Identifier of the node to set breakpoint on. */
            nodeId: DOM.NodeId;
            /** Type of the operation to stop upon. */
            type: DOMBreakpointType;
        }
        
        interface RemoveDOMBreakpointRequest{
            /** Identifier of the node to remove breakpoint from. */
            nodeId: DOM.NodeId;
            /** Type of the breakpoint to remove. */
            type: DOMBreakpointType;
        }
        
        interface SetEventListenerBreakpointRequest{
            /** DOM Event name to stop on (any DOM event will do). */
            eventName: string;
            /** EventTarget interface name to stop on. If equal to '"*"' or not provided, will stop on any EventTarget. */
            targetName?: string;
        }
        
        interface RemoveEventListenerBreakpointRequest{
            /** Event name. */
            eventName: string;
            /** EventTarget interface name. */
            targetName?: string;
        }
        
        interface SetInstrumentationBreakpointRequest{
            /** Instrumentation name to stop on. */
            eventName: string;
        }
        
        interface RemoveInstrumentationBreakpointRequest{
            /** Instrumentation name to stop on. */
            eventName: string;
        }
        
        interface SetXHRBreakpointRequest{
            /** Resource URL substring. All XHRs having this substring in the URL will get stopped upon. */
            url: string;
        }
        
        interface RemoveXHRBreakpointRequest{
            /** Resource URL substring. */
            url: string;
        }
        
        interface GetEventListenersRequest{
            /** Identifier of the object to return listeners for. */
            objectId: Runtime.RemoteObjectId;
        }
        
        interface GetEventListenersResponse{
            /** Array of relevant listeners. */
            listeners: EventListener[];
        }
    }
    
    interface IDOMDebugger{
        /** Sets breakpoint on particular operation with DOM. */
        setDOMBreakpoint(params: DOMDebugger.SetDOMBreakpointRequest): Promise<void>;
        /** Removes DOM breakpoint that was set using 'setDOMBreakpoint'. */
        removeDOMBreakpoint(params: DOMDebugger.RemoveDOMBreakpointRequest): Promise<void>;
        /** Sets breakpoint on particular DOM event. */
        setEventListenerBreakpoint(params: DOMDebugger.SetEventListenerBreakpointRequest): Promise<void>;
        /** Removes breakpoint on particular DOM event. */
        removeEventListenerBreakpoint(params: DOMDebugger.RemoveEventListenerBreakpointRequest): Promise<void>;
        /** Sets breakpoint on particular native event. */
        setInstrumentationBreakpoint(params: DOMDebugger.SetInstrumentationBreakpointRequest): Promise<void>;
        /** Removes breakpoint on particular native event. */
        removeInstrumentationBreakpoint(params: DOMDebugger.RemoveInstrumentationBreakpointRequest): Promise<void>;
        /** Sets breakpoint on XMLHttpRequest. */
        setXHRBreakpoint(params: DOMDebugger.SetXHRBreakpointRequest): Promise<void>;
        /** Removes breakpoint from XMLHttpRequest. */
        removeXHRBreakpoint(params: DOMDebugger.RemoveXHRBreakpointRequest): Promise<void>;
        /** Returns event listeners of the given object. */
        getEventListeners(params: DOMDebugger.GetEventListenersRequest): Promise<DOMDebugger.GetEventListenersResponse>;
    }
    
    module Worker{
        
        interface SendMessageToWorkerRequest{
            workerId: string;
            message: string;
        }
        
        interface SetWaitForDebuggerOnStartRequest{
            value: boolean;
        }
        
        interface WorkerCreatedEvent{
            workerId: string;
            url: string;
            waitingForDebugger: boolean;
        }
        
        interface WorkerTerminatedEvent{
            workerId: string;
        }
        
        interface DispatchMessageFromWorkerEvent{
            workerId: string;
            message: string;
        }
    }
    
    interface IWorker{
        enable(): Promise<void>;
        disable(): Promise<void>;
        sendMessageToWorker(params: Worker.SendMessageToWorkerRequest): Promise<void>;
        setWaitForDebuggerOnStart(params: Worker.SetWaitForDebuggerOnStartRequest): Promise<void>;
        onWorkerCreated(handler: (event: Worker.WorkerCreatedEvent) => void);
        onWorkerTerminated(handler: (event: Worker.WorkerTerminatedEvent) => void);
        onDispatchMessageFromWorker(handler: (event: Worker.DispatchMessageFromWorkerEvent) => void);
    }
    
    module ServiceWorker{
        
        /** ServiceWorker registration. */
        interface ServiceWorkerRegistration{
            registrationId: string;
            scopeURL: string;
            isDeleted: boolean;
        }
        
        type ServiceWorkerVersionRunningStatus = 'stopped' | 'starting' | 'running' | 'stopping';
        
        type ServiceWorkerVersionStatus = 'new' | 'installing' | 'installed' | 'activating' | 'activated' | 'redundant';
        
        type TargetID = string;
        
        /** ServiceWorker version. */
        interface ServiceWorkerVersion{
            versionId: string;
            registrationId: string;
            scriptURL: string;
            runningStatus: ServiceWorkerVersionRunningStatus;
            status: ServiceWorkerVersionStatus;
            /** The Last-Modified header value of the main script. */
            scriptLastModified?: number;
            /** The time at which the response headers of the main script were received from the server.  For cached script it is the last time the cache entry was validated. */
            scriptResponseTime?: number;
            controlledClients?: TargetID[];
        }
        
        /** ServiceWorker error message. */
        interface ServiceWorkerErrorMessage{
            errorMessage: string;
            registrationId: string;
            versionId: string;
            sourceURL: string;
            lineNumber: number;
            columnNumber: number;
        }
        
        interface TargetInfo{
            id: TargetID;
            type: string;
            title: string;
            url: string;
        }
        
        interface SendMessageRequest{
            workerId: string;
            message: string;
        }
        
        interface StopRequest{
            workerId: string;
        }
        
        interface UnregisterRequest{
            scopeURL: string;
        }
        
        interface UpdateRegistrationRequest{
            scopeURL: string;
        }
        
        interface StartWorkerRequest{
            scopeURL: string;
        }
        
        interface SkipWaitingRequest{
            scopeURL: string;
        }
        
        interface StopWorkerRequest{
            versionId: string;
        }
        
        interface InspectWorkerRequest{
            versionId: string;
        }
        
        interface SetForceUpdateOnPageLoadRequest{
            forceUpdateOnPageLoad: boolean;
        }
        
        interface DeliverPushMessageRequest{
            origin: string;
            registrationId: string;
            data: string;
        }
        
        interface DispatchSyncEventRequest{
            origin: string;
            registrationId: string;
            tag: string;
            lastChance: boolean;
        }
        
        interface GetTargetInfoRequest{
            targetId: TargetID;
        }
        
        interface GetTargetInfoResponse{
            targetInfo: TargetInfo;
        }
        
        interface ActivateTargetRequest{
            targetId: TargetID;
        }
        
        interface WorkerCreatedEvent{
            workerId: string;
            url: string;
            versionId: string;
        }
        
        interface WorkerTerminatedEvent{
            workerId: string;
        }
        
        interface DispatchMessageEvent{
            workerId: string;
            message: string;
        }
        
        interface WorkerRegistrationUpdatedEvent{
            registrations: ServiceWorkerRegistration[];
        }
        
        interface WorkerVersionUpdatedEvent{
            versions: ServiceWorkerVersion[];
        }
        
        interface WorkerErrorReportedEvent{
            errorMessage: ServiceWorkerErrorMessage;
        }
    }
    
    interface IServiceWorker{
        enable(): Promise<void>;
        disable(): Promise<void>;
        sendMessage(params: ServiceWorker.SendMessageRequest): Promise<void>;
        stop(params: ServiceWorker.StopRequest): Promise<void>;
        unregister(params: ServiceWorker.UnregisterRequest): Promise<void>;
        updateRegistration(params: ServiceWorker.UpdateRegistrationRequest): Promise<void>;
        startWorker(params: ServiceWorker.StartWorkerRequest): Promise<void>;
        skipWaiting(params: ServiceWorker.SkipWaitingRequest): Promise<void>;
        stopWorker(params: ServiceWorker.StopWorkerRequest): Promise<void>;
        inspectWorker(params: ServiceWorker.InspectWorkerRequest): Promise<void>;
        setForceUpdateOnPageLoad(params: ServiceWorker.SetForceUpdateOnPageLoadRequest): Promise<void>;
        deliverPushMessage(params: ServiceWorker.DeliverPushMessageRequest): Promise<void>;
        dispatchSyncEvent(params: ServiceWorker.DispatchSyncEventRequest): Promise<void>;
        getTargetInfo(params: ServiceWorker.GetTargetInfoRequest): Promise<ServiceWorker.GetTargetInfoResponse>;
        activateTarget(params: ServiceWorker.ActivateTargetRequest): Promise<void>;
        onWorkerCreated(handler: (event: ServiceWorker.WorkerCreatedEvent) => void);
        onWorkerTerminated(handler: (event: ServiceWorker.WorkerTerminatedEvent) => void);
        onDispatchMessage(handler: (event: ServiceWorker.DispatchMessageEvent) => void);
        onWorkerRegistrationUpdated(handler: (event: ServiceWorker.WorkerRegistrationUpdatedEvent) => void);
        onWorkerVersionUpdated(handler: (event: ServiceWorker.WorkerVersionUpdatedEvent) => void);
        onWorkerErrorReported(handler: (event: ServiceWorker.WorkerErrorReportedEvent) => void);
    }
    
    module Input{
        
        interface TouchPoint{
            /** State of the touch point. */
            state: 'touchPressed' | 'touchReleased' | 'touchMoved' | 'touchStationary' | 'touchCancelled';
            /** X coordinate of the event relative to the main frame's viewport. */
            x: number;
            /** Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport. */
            y: number;
            /** X radius of the touch area (default: 1). */
            radiusX?: number;
            /** Y radius of the touch area (default: 1). */
            radiusY?: number;
            /** Rotation angle (default: 0.0). */
            rotationAngle?: number;
            /** Force (default: 1.0). */
            force?: number;
            /** Identifier used to track touch sources between events, must be unique within an event. */
            id?: number;
        }
        
        type GestureSourceType = 'default' | 'touch' | 'mouse';
        
        interface DispatchKeyEventRequest{
            /** Type of the key event. */
            type: 'keyDown' | 'keyUp' | 'rawKeyDown' | 'char';
            /** Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0). */
            modifiers?: number;
            /** Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time). */
            timestamp?: number;
            /** Text as generated by processing a virtual key code with a keyboard layout. Not needed for for 'keyUp</code> and <code>rawKeyDown' events (default: "") */
            text?: string;
            /** Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: ""). */
            unmodifiedText?: string;
            /** Unique key identifier (e.g., 'U+0041') (default: ""). */
            keyIdentifier?: string;
            /** Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: ""). */
            code?: string;
            /** Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: ""). */
            key?: string;
            /** Windows virtual key code (default: 0). */
            windowsVirtualKeyCode?: number;
            /** Native virtual key code (default: 0). */
            nativeVirtualKeyCode?: number;
            /** Whether the event was generated from auto repeat (default: false). */
            autoRepeat?: boolean;
            /** Whether the event was generated from the keypad (default: false). */
            isKeypad?: boolean;
            /** Whether the event was a system key event (default: false). */
            isSystemKey?: boolean;
        }
        
        interface DispatchMouseEventRequest{
            /** Type of the mouse event. */
            type: 'mousePressed' | 'mouseReleased' | 'mouseMoved';
            /** X coordinate of the event relative to the main frame's viewport. */
            x: number;
            /** Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport. */
            y: number;
            /** Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0). */
            modifiers?: number;
            /** Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time). */
            timestamp?: number;
            /** Mouse button (default: "none"). */
            button?: 'none' | 'left' | 'middle' | 'right';
            /** Number of times the mouse button was clicked (default: 0). */
            clickCount?: number;
        }
        
        interface DispatchTouchEventRequest{
            /** Type of the touch event. */
            type: 'touchStart' | 'touchEnd' | 'touchMove';
            /** Touch points. */
            touchPoints: TouchPoint[];
            /** Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0). */
            modifiers?: number;
            /** Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time). */
            timestamp?: number;
        }
        
        interface EmulateTouchFromMouseEventRequest{
            /** Type of the mouse event. */
            type: 'mousePressed' | 'mouseReleased' | 'mouseMoved' | 'mouseWheel';
            /** X coordinate of the mouse pointer in DIP. */
            x: number;
            /** Y coordinate of the mouse pointer in DIP. */
            y: number;
            /** Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970. */
            timestamp: number;
            /** Mouse button. */
            button: 'none' | 'left' | 'middle' | 'right';
            /** X delta in DIP for mouse wheel event (default: 0). */
            deltaX?: number;
            /** Y delta in DIP for mouse wheel event (default: 0). */
            deltaY?: number;
            /** Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0). */
            modifiers?: number;
            /** Number of times the mouse button was clicked (default: 0). */
            clickCount?: number;
        }
        
        interface SynthesizePinchGestureRequest{
            /** X coordinate of the start of the gesture in CSS pixels. */
            x: number;
            /** Y coordinate of the start of the gesture in CSS pixels. */
            y: number;
            /** Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out). */
            scaleFactor: number;
            /** Relative pointer speed in pixels per second (default: 800). */
            relativeSpeed?: number;
            /** Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type). */
            gestureSourceType?: GestureSourceType;
        }
        
        interface SynthesizeScrollGestureRequest{
            /** X coordinate of the start of the gesture in CSS pixels. */
            x: number;
            /** Y coordinate of the start of the gesture in CSS pixels. */
            y: number;
            /** The distance to scroll along the X axis (positive to scroll left). */
            xDistance?: number;
            /** The distance to scroll along the Y axis (positive to scroll up). */
            yDistance?: number;
            /** The number of additional pixels to scroll back along the X axis, in addition to the given distance. */
            xOverscroll?: number;
            /** The number of additional pixels to scroll back along the Y axis, in addition to the given distance. */
            yOverscroll?: number;
            /** Prevent fling (default: true). */
            preventFling?: boolean;
            /** Swipe speed in pixels per second (default: 800). */
            speed?: number;
            /** Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type). */
            gestureSourceType?: GestureSourceType;
            /** The number of times to repeat the gesture (default: 0). */
            repeatCount?: number;
            /** The number of milliseconds delay between each repeat. (default: 250). */
            repeatDelayMs?: number;
            /** The name of the interaction markers to generate, if not empty (default: ""). */
            interactionMarkerName?: string;
        }
        
        interface SynthesizeTapGestureRequest{
            /** X coordinate of the start of the gesture in CSS pixels. */
            x: number;
            /** Y coordinate of the start of the gesture in CSS pixels. */
            y: number;
            /** Duration between touchdown and touchup events in ms (default: 50). */
            duration?: number;
            /** Number of times to perform the tap (e.g. 2 for double tap, default: 1). */
            tapCount?: number;
            /** Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type). */
            gestureSourceType?: GestureSourceType;
        }
    }
    
    interface IInput{
        /** Dispatches a key event to the page. */
        dispatchKeyEvent(params: Input.DispatchKeyEventRequest): Promise<void>;
        /** Dispatches a mouse event to the page. */
        dispatchMouseEvent(params: Input.DispatchMouseEventRequest): Promise<void>;
        /** Dispatches a touch event to the page. */
        dispatchTouchEvent(params: Input.DispatchTouchEventRequest): Promise<void>;
        /** Emulates touch event from the mouse event parameters. */
        emulateTouchFromMouseEvent(params: Input.EmulateTouchFromMouseEventRequest): Promise<void>;
        /** Synthesizes a pinch gesture over a time period by issuing appropriate touch events. */
        synthesizePinchGesture(params: Input.SynthesizePinchGestureRequest): Promise<void>;
        /** Synthesizes a scroll gesture over a time period by issuing appropriate touch events. */
        synthesizeScrollGesture(params: Input.SynthesizeScrollGestureRequest): Promise<void>;
        /** Synthesizes a tap gesture over a time period by issuing appropriate touch events. */
        synthesizeTapGesture(params: Input.SynthesizeTapGestureRequest): Promise<void>;
    }
    
    module LayerTree{
        
        /** Unique Layer identifier. */
        type LayerId = string;
        
        /** Unique snapshot identifier. */
        type SnapshotId = string;
        
        /** Rectangle where scrolling happens on the main thread. */
        interface ScrollRect{
            /** Rectangle itself. */
            rect: DOM.Rect;
            /** Reason for rectangle to force scrolling on the main thread */
            type: 'RepaintsOnScroll' | 'TouchEventHandler' | 'WheelEventHandler';
        }
        
        /** Serialized fragment of layer picture along with its offset within the layer. */
        interface PictureTile{
            /** Offset from owning layer left boundary */
            x: number;
            /** Offset from owning layer top boundary */
            y: number;
            /** Base64-encoded snapshot data. */
            picture: string;
        }
        
        /** Information about a compositing layer. */
        interface Layer{
            /** The unique id for this layer. */
            layerId: LayerId;
            /** The id of parent (not present for root). */
            parentLayerId?: LayerId;
            /** The backend id for the node associated with this layer. */
            backendNodeId?: DOM.BackendNodeId;
            /** Offset from parent layer, X coordinate. */
            offsetX: number;
            /** Offset from parent layer, Y coordinate. */
            offsetY: number;
            /** Layer width. */
            width: number;
            /** Layer height. */
            height: number;
            /** Transformation matrix for layer, default is identity matrix */
            transform?: number[];
            /** Transform anchor point X, absent if no transform specified */
            anchorX?: number;
            /** Transform anchor point Y, absent if no transform specified */
            anchorY?: number;
            /** Transform anchor point Z, absent if no transform specified */
            anchorZ?: number;
            /** Indicates how many time this layer has painted. */
            paintCount: number;
            /** Indicates whether this layer hosts any content, rather than being used for transform/scrolling purposes only. */
            drawsContent: boolean;
            /** Set if layer is not visible. */
            invisible?: boolean;
            /** Rectangles scrolling on main thread only. */
            scrollRects?: ScrollRect[];
        }
        
        /** Array of timings, one per paint step. */
        type PaintProfile = number[];
        
        interface CompositingReasonsRequest{
            /** The id of the layer for which we want to get the reasons it was composited. */
            layerId: LayerId;
        }
        
        interface CompositingReasonsResponse{
            /** A list of strings specifying reasons for the given layer to become composited. */
            compositingReasons: string[];
        }
        
        interface MakeSnapshotRequest{
            /** The id of the layer. */
            layerId: LayerId;
        }
        
        interface MakeSnapshotResponse{
            /** The id of the layer snapshot. */
            snapshotId: SnapshotId;
        }
        
        interface LoadSnapshotRequest{
            /** An array of tiles composing the snapshot. */
            tiles: PictureTile[];
        }
        
        interface LoadSnapshotResponse{
            /** The id of the snapshot. */
            snapshotId: SnapshotId;
        }
        
        interface ReleaseSnapshotRequest{
            /** The id of the layer snapshot. */
            snapshotId: SnapshotId;
        }
        
        interface ProfileSnapshotRequest{
            /** The id of the layer snapshot. */
            snapshotId: SnapshotId;
            /** The maximum number of times to replay the snapshot (1, if not specified). */
            minRepeatCount?: number;
            /** The minimum duration (in seconds) to replay the snapshot. */
            minDuration?: number;
            /** The clip rectangle to apply when replaying the snapshot. */
            clipRect?: DOM.Rect;
        }
        
        interface ProfileSnapshotResponse{
            /** The array of paint profiles, one per run. */
            timings: PaintProfile[];
        }
        
        interface ReplaySnapshotRequest{
            /** The id of the layer snapshot. */
            snapshotId: SnapshotId;
            /** The first step to replay from (replay from the very start if not specified). */
            fromStep?: number;
            /** The last step to replay to (replay till the end if not specified). */
            toStep?: number;
            /** The scale to apply while replaying (defaults to 1). */
            scale?: number;
        }
        
        interface ReplaySnapshotResponse{
            /** A data: URL for resulting image. */
            dataURL: string;
        }
        
        interface SnapshotCommandLogRequest{
            /** The id of the layer snapshot. */
            snapshotId: SnapshotId;
        }
        
        interface SnapshotCommandLogResponse{
            /** The array of canvas function calls. */
            commandLog: any[];
        }
        
        interface LayerTreeDidChangeEvent{
            /** Layer tree, absent if not in the comspositing mode. */
            layers?: Layer[];
        }
        
        interface LayerPaintedEvent{
            /** The id of the painted layer. */
            layerId: LayerId;
            /** Clip rectangle. */
            clip: DOM.Rect;
        }
    }
    
    interface ILayerTree{
        /** Enables compositing tree inspection. */
        enable(): Promise<void>;
        /** Disables compositing tree inspection. */
        disable(): Promise<void>;
        /** Provides the reasons why the given layer was composited. */
        compositingReasons(params: LayerTree.CompositingReasonsRequest): Promise<LayerTree.CompositingReasonsResponse>;
        /** Returns the layer snapshot identifier. */
        makeSnapshot(params: LayerTree.MakeSnapshotRequest): Promise<LayerTree.MakeSnapshotResponse>;
        /** Returns the snapshot identifier. */
        loadSnapshot(params: LayerTree.LoadSnapshotRequest): Promise<LayerTree.LoadSnapshotResponse>;
        /** Releases layer snapshot captured by the back-end. */
        releaseSnapshot(params: LayerTree.ReleaseSnapshotRequest): Promise<void>;
        profileSnapshot(params: LayerTree.ProfileSnapshotRequest): Promise<LayerTree.ProfileSnapshotResponse>;
        /** Replays the layer snapshot and returns the resulting bitmap. */
        replaySnapshot(params: LayerTree.ReplaySnapshotRequest): Promise<LayerTree.ReplaySnapshotResponse>;
        /** Replays the layer snapshot and returns canvas log. */
        snapshotCommandLog(params: LayerTree.SnapshotCommandLogRequest): Promise<LayerTree.SnapshotCommandLogResponse>;
        onLayerTreeDidChange(handler: (event: LayerTree.LayerTreeDidChangeEvent) => void);
        onLayerPainted(handler: (event: LayerTree.LayerPaintedEvent) => void);
    }
    
    module DeviceOrientation{
        
        interface SetDeviceOrientationOverrideRequest{
            /** Mock alpha */
            alpha: number;
            /** Mock beta */
            beta: number;
            /** Mock gamma */
            gamma: number;
        }
    }
    
    interface IDeviceOrientation{
        /** Overrides the Device Orientation. */
        setDeviceOrientationOverride(params: DeviceOrientation.SetDeviceOrientationOverrideRequest): Promise<void>;
        /** Clears the overridden Device Orientation. */
        clearDeviceOrientationOverride(): Promise<void>;
    }
    
    module Tracing{
        
        /** Configuration for memory dump. Used only when "memory-infra" category is enabled. */
        interface MemoryDumpConfig{
            [key: string]: string;
        }
        
        interface TraceConfig{
            /** Controls how the trace buffer stores data. */
            recordMode?: 'recordUntilFull' | 'recordContinuously' | 'recordAsMuchAsPossible' | 'echoToConsole';
            /** Turns on JavaScript stack sampling. */
            enableSampling?: boolean;
            /** Turns on system tracing. */
            enableSystrace?: boolean;
            /** Turns on argument filter. */
            enableArgumentFilter?: boolean;
            /** Included category filters. */
            includedCategories?: string[];
            /** Excluded category filters. */
            excludedCategories?: string[];
            /** Configuration to synthesize the delays in tracing. */
            syntheticDelays?: string[];
            /** Configuration for memory dump triggers. Used only when "memory-infra" category is enabled. */
            memoryDumpConfig?: MemoryDumpConfig;
        }
        
        interface StartRequest{
            /** Category/tag filter */
            categories?: string;
            /** Tracing options */
            options?: string;
            /** If set, the agent will issue bufferUsage events at this interval, specified in milliseconds */
            bufferUsageReportingInterval?: number;
            /** Whether to report trace events as series of dataCollected events or to save trace to a stream (defaults to 'ReportEvents'). */
            transferMode?: 'ReportEvents' | 'ReturnAsStream';
            traceConfig?: TraceConfig;
        }
        
        interface GetCategoriesResponse{
            /** A list of supported tracing categories. */
            categories: string[];
        }
        
        interface RequestMemoryDumpResponse{
            /** GUID of the resulting global memory dump. */
            dumpGuid: string;
            /** True iff the global memory dump succeeded. */
            success: boolean;
        }
        
        interface RecordClockSyncMarkerRequest{
            /** The ID of this clock sync marker */
            syncId: string;
        }
        
        interface DataCollectedEvent{
            value: any[];
        }
        
        interface TracingCompleteEvent{
            /** A handle of the stream that holds resulting trace data. */
            stream?: IO.StreamHandle;
        }
        
        interface BufferUsageEvent{
            /** A number in range [0..1] that indicates the used size of event buffer as a fraction of its total size. */
            percentFull?: number;
            /** An approximate number of events in the trace log. */
            eventCount?: number;
            /** A number in range [0..1] that indicates the used size of event buffer as a fraction of its total size. */
            value?: number;
        }
    }
    
    interface ITracing{
        /** Start trace events collection. */
        start(params: Tracing.StartRequest): Promise<void>;
        /** Stop trace events collection. */
        end(): Promise<void>;
        /** Gets supported tracing categories. */
        getCategories(): Promise<Tracing.GetCategoriesResponse>;
        /** Request a global memory dump. */
        requestMemoryDump(): Promise<Tracing.RequestMemoryDumpResponse>;
        /** Record a clock sync marker in the trace. */
        recordClockSyncMarker(params: Tracing.RecordClockSyncMarkerRequest): Promise<void>;
        /** Contains an bucket of collected trace events. When tracing is stopped collected events will be send as a sequence of dataCollected events followed by tracingComplete event. */
        onDataCollected(handler: (event: Tracing.DataCollectedEvent) => void);
        /** Signals that tracing is stopped and there is no trace buffers pending flush, all data were delivered via dataCollected events. */
        onTracingComplete(handler: (event: Tracing.TracingCompleteEvent) => void);
        onBufferUsage(handler: (event: Tracing.BufferUsageEvent) => void);
    }
    
    module Animation{
        
        /** Animation instance. */
        interface Animation{
            /** 'Animation''s id. */
            id: string;
            /** 'Animation''s name. */
            name: string;
            /** 'Animation''s internal paused state. */
            pausedState: boolean;
            /** 'Animation''s play state. */
            playState: string;
            /** 'Animation''s playback rate. */
            playbackRate: number;
            /** 'Animation''s start time. */
            startTime: number;
            /** 'Animation''s current time. */
            currentTime: number;
            /** 'Animation''s source animation node. */
            source: AnimationEffect;
            /** Animation type of 'Animation'. */
            type: 'CSSTransition' | 'CSSAnimation' | 'WebAnimation';
            /** A unique ID for 'Animation' representing the sources that triggered this CSS animation/transition. */
            cssId?: string;
        }
        
        /** AnimationEffect instance */
        interface AnimationEffect{
            /** 'AnimationEffect''s delay. */
            delay: number;
            /** 'AnimationEffect''s end delay. */
            endDelay: number;
            /** 'AnimationEffect''s playbackRate. */
            playbackRate: number;
            /** 'AnimationEffect''s iteration start. */
            iterationStart: number;
            /** 'AnimationEffect''s iterations. */
            iterations: number;
            /** 'AnimationEffect''s iteration duration. */
            duration: number;
            /** 'AnimationEffect''s playback direction. */
            direction: string;
            /** 'AnimationEffect''s fill mode. */
            fill: string;
            /** 'AnimationEffect''s target node. */
            backendNodeId: DOM.BackendNodeId;
            /** 'AnimationEffect''s keyframes. */
            keyframesRule?: KeyframesRule;
            /** 'AnimationEffect''s timing function. */
            easing: string;
        }
        
        /** Keyframes Rule */
        interface KeyframesRule{
            /** CSS keyframed animation's name. */
            name?: string;
            /** List of animation keyframes. */
            keyframes: KeyframeStyle[];
        }
        
        /** Keyframe Style */
        interface KeyframeStyle{
            /** Keyframe's time offset. */
            offset: string;
            /** 'AnimationEffect''s timing function. */
            easing: string;
        }
        
        interface GetPlaybackRateResponse{
            /** Playback rate for animations on page. */
            playbackRate: number;
        }
        
        interface SetPlaybackRateRequest{
            /** Playback rate for animations on page */
            playbackRate: number;
        }
        
        interface GetCurrentTimeRequest{
            /** Id of animation. */
            id: string;
        }
        
        interface GetCurrentTimeResponse{
            /** Current time of the page. */
            currentTime: number;
        }
        
        interface SetPausedRequest{
            /** Animations to set the pause state of. */
            animations: string[];
            /** Paused state to set to. */
            paused: boolean;
        }
        
        interface SetTimingRequest{
            /** Animation id. */
            animationId: string;
            /** Duration of the animation. */
            duration: number;
            /** Delay of the animation. */
            delay: number;
        }
        
        interface SeekAnimationsRequest{
            /** List of animation ids to seek. */
            animations: string[];
            /** Set the current time of each animation. */
            currentTime: number;
        }
        
        interface ReleaseAnimationsRequest{
            /** List of animation ids to seek. */
            animations: string[];
        }
        
        interface ResolveAnimationRequest{
            /** Animation id. */
            animationId: string;
        }
        
        interface ResolveAnimationResponse{
            /** Corresponding remote object. */
            remoteObject: Runtime.RemoteObject;
        }
        
        interface AnimationCreatedEvent{
            /** Id of the animation that was created. */
            id: string;
        }
        
        interface AnimationStartedEvent{
            /** Animation that was started. */
            animation: Animation;
        }
        
        interface AnimationCanceledEvent{
            /** Id of the animation that was cancelled. */
            id: string;
        }
    }
    
    interface IAnimation{
        /** Enables animation domain notifications. */
        enable(): Promise<void>;
        /** Disables animation domain notifications. */
        disable(): Promise<void>;
        /** Gets the playback rate of the document timeline. */
        getPlaybackRate(): Promise<Animation.GetPlaybackRateResponse>;
        /** Sets the playback rate of the document timeline. */
        setPlaybackRate(params: Animation.SetPlaybackRateRequest): Promise<void>;
        /** Returns the current time of the an animation. */
        getCurrentTime(params: Animation.GetCurrentTimeRequest): Promise<Animation.GetCurrentTimeResponse>;
        /** Sets the paused state of a set of animations. */
        setPaused(params: Animation.SetPausedRequest): Promise<void>;
        /** Sets the timing of an animation node. */
        setTiming(params: Animation.SetTimingRequest): Promise<void>;
        /** Seek a set of animations to a particular time within each animation. */
        seekAnimations(params: Animation.SeekAnimationsRequest): Promise<void>;
        /** Releases a set of animations to no longer be manipulated. */
        releaseAnimations(params: Animation.ReleaseAnimationsRequest): Promise<void>;
        /** Gets the remote object of the Animation. */
        resolveAnimation(params: Animation.ResolveAnimationRequest): Promise<Animation.ResolveAnimationResponse>;
        /** Event for each animation that has been created. */
        onAnimationCreated(handler: (event: Animation.AnimationCreatedEvent) => void);
        /** Event for animation that has been started. */
        onAnimationStarted(handler: (event: Animation.AnimationStartedEvent) => void);
        /** Event for when an animation has been cancelled. */
        onAnimationCanceled(handler: (event: Animation.AnimationCanceledEvent) => void);
    }
    
    module Accessibility{
        
        /** Unique accessibility node identifier. */
        type AXNodeId = string;
        
        /** Enum of possible property types. */
        type AXValueType = 'boolean' | 'tristate' | 'booleanOrUndefined' | 'idref' | 'idrefList' | 'integer' | 'node' | 'nodeList' | 'number' | 'string' | 'computedString' | 'token' | 'tokenList' | 'domRelation' | 'role' | 'internalRole' | 'valueUndefined';
        
        /** Enum of possible property sources. */
        type AXValueSourceType = 'attribute' | 'implicit' | 'style' | 'contents' | 'placeholder' | 'relatedElement';
        
        /** Enum of possible native property sources (as a subtype of a particular AXValueSourceType). */
        type AXValueNativeSourceType = 'figcaption' | 'label' | 'labelfor' | 'labelwrapped' | 'legend' | 'tablecaption' | 'title' | 'other';
        
        /** A single source for a computed AX property. */
        interface AXValueSource{
            /** What type of source this is. */
            type: AXValueSourceType;
            /** The value of this property source. */
            value?: AXValue;
            /** The name of the relevant attribute, if any. */
            attribute?: string;
            /** The value of the relevant attribute, if any. */
            attributeValue?: AXValue;
            /** Whether this source is superseded by a higher priority source. */
            superseded?: boolean;
            /** The native markup source for this value, e.g. a <label> element. */
            nativeSource?: AXValueNativeSourceType;
            /** The value, such as a node or node list, of the native source. */
            nativeSourceValue?: AXValue;
            /** Whether the value for this property is invalid. */
            invalid?: boolean;
            /** Reason for the value being invalid, if it is. */
            invalidReason?: string;
        }
        
        interface AXRelatedNode{
            /** The BackendNodeId of the related node. */
            backendNodeId: DOM.BackendNodeId;
            /** The IDRef value provided, if any. */
            idref?: string;
            /** The text alternative of this node in the current context. */
            text?: string;
        }
        
        interface AXProperty{
            /** The name of this property. */
            name: string;
            /** The value of this property. */
            value: AXValue;
        }
        
        /** A single computed AX property. */
        interface AXValue{
            /** The type of this value. */
            type: AXValueType;
            /** The computed value of this property. */
            value?: any;
            /** One or more related nodes, if applicable. */
            relatedNodes?: AXRelatedNode[];
            /** The sources which contributed to the computation of this property. */
            sources?: AXValueSource[];
        }
        
        /** States which apply to every AX node. */
        type AXGlobalStates = 'disabled' | 'hidden' | 'hiddenRoot' | 'invalid';
        
        /** Attributes which apply to nodes in live regions. */
        type AXLiveRegionAttributes = 'live' | 'atomic' | 'relevant' | 'busy' | 'root';
        
        type AXWidgetAttributes = 'autocomplete' | 'haspopup' | 'level' | 'multiselectable' | 'orientation' | 'multiline' | 'readonly' | 'required' | 'valuemin' | 'valuemax' | 'valuetext';
        
        /** States which apply to widgets. */
        type AXWidgetStates = 'checked' | 'expanded' | 'pressed' | 'selected';
        
        /** Relationships between elements other than parent/child/sibling. */
        type AXRelationshipAttributes = 'activedescendant' | 'flowto' | 'controls' | 'describedby' | 'labelledby' | 'owns';
        
        /** A node in the accessibility tree. */
        interface AXNode{
            /** Unique identifier for this node. */
            nodeId: AXNodeId;
            /** Whether this node is ignored for accessibility */
            ignored: boolean;
            /** Collection of reasons why this node is hidden. */
            ignoredReasons?: AXProperty[];
            /** This 'Node''s role, whether explicit or implicit. */
            role?: AXValue;
            /** The accessible name for this 'Node'. */
            name?: AXValue;
            /** The accessible description for this 'Node'. */
            description?: AXValue;
            /** The value for this 'Node'. */
            value?: AXValue;
            /** All other properties */
            properties?: AXProperty[];
        }
        
        interface GetAXNodeRequest{
            /** ID of node to get accessibility node for. */
            nodeId: DOM.NodeId;
        }
        
        interface GetAXNodeResponse{
            /** The 'Accessibility.AXNode' for this DOM node, if it exists. */
            accessibilityNode?: AXNode;
        }
    }
    
    interface IAccessibility{
        /** Fetches the accessibility node for this DOM node, if it exists. */
        getAXNode(params: Accessibility.GetAXNodeRequest): Promise<Accessibility.GetAXNodeResponse>;
    }
    
    module Storage{
        
        /** Enum of possible storage types. */
        type StorageType = 'appcache' | 'cookies' | 'file_systems' | 'indexeddb' | 'local_storage' | 'shader_cache' | 'websql' | 'webrtc_indetity' | 'service_workers' | 'cache_storage' | 'all';
        
        interface ClearDataForOriginRequest{
            /** Security origin. */
            origin: string;
            /** Comma separated origin names. */
            storageTypes: string;
        }
    }
    
    interface IStorage{
        /** Clears storage for origin. */
        clearDataForOrigin(params: Storage.ClearDataForOriginRequest): Promise<void>;
    }
    
    /** The Browser domain allows listing, creating, activating and attaching to the targets. */
    module Browser{
        
        type TargetID = string;
        
        interface TargetInfo{
            targetId: TargetID;
            type: string;
            title: string;
            url: string;
        }
        
        interface GetTargetsResponse{
            targetInfo: TargetInfo[];
        }
        
        interface AttachRequest{
            /** Target id. */
            targetId: TargetID;
        }
        
        interface DetachRequest{
            targetId: TargetID;
        }
        
        interface SendMessageRequest{
            targetId: TargetID;
            message: string;
        }
        
        interface DispatchMessageEvent{
            targetId: TargetID;
            message: string;
        }
    }
    
    interface IBrowser{
        /** Returns target information for all potential targets. */
        getTargets(): Promise<Browser.GetTargetsResponse>;
        /** Attaches to the target with given id. */
        attach(params: Browser.AttachRequest): Promise<void>;
        /** Detaches from the target with given id. */
        detach(params: Browser.DetachRequest): Promise<void>;
        /** Sends protocol message to the target with given id. */
        sendMessage(params: Browser.SendMessageRequest): Promise<void>;
        /** Dispatches protocol message from the target with given id. */
        onDispatchMessage(handler: (event: Browser.DispatchMessageEvent) => void);
    }
}
