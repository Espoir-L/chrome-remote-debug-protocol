/**************************************
 * Auto-generated by protocolJsonToApi
 **************************************/

declare module 'crdpApi' {
    
    type integer = number;
    type object = any;
    
    /** Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects. Evaluation results are returned as mirror object that expose object type, string representation and unique identifier that can be used for further object reference. Original objects are maintained in memory unless they are either explicitly released or are released along with the other objects in their object group. */
    namespace Runtime {
        
        /** Unique script identifier. */
        type ScriptId = string;
        
        /** Unique object identifier. */
        type RemoteObjectId = string;
        
        /** Mirror object referencing original JavaScript object. */
        interface RemoteObject {
            
            /** Object type. */
            type: string;
            
            /** Object subtype hint. Specified for <code>object</code> type values only. */
            subtype?: string;
            
            /** Object class (constructor) name. Specified for <code>object</code> type values only. */
            className?: string;
            
            /** Remote object value in case of primitive values or JSON values (if it was requested), or description string if the value can not be JSON-stringified (like NaN, Infinity, -Infinity, -0). */
            value?: any;
            
            /** String representation of the object. */
            description?: string;
            
            /** Unique object identifier (for non-primitive values). */
            objectId?: RemoteObjectId;
            
            /** Preview containing abbreviated property values. Specified for <code>object</code> type values only. */
            preview?: ObjectPreview;
            
            customPreview?: CustomPreview;
        }
        
        interface CustomPreview {
            
            header: string;
            
            hasBody: boolean;
            
            formatterObjectId: RemoteObjectId;
            
            bindRemoteObjectFunctionId: RemoteObjectId;
            
            configObjectId?: RemoteObjectId;
        }
        
        /** Object containing abbreviated remote object value. */
        interface ObjectPreview {
            
            /** Object type. */
            type: string;
            
            /** Object subtype hint. Specified for <code>object</code> type values only. */
            subtype?: string;
            
            /** String representation of the object. */
            description?: string;
            
            /** True iff some of the properties or entries of the original object did not fit. */
            overflow: boolean;
            
            /** List of the properties. */
            properties: PropertyPreview[];
            
            /** List of the entries. Specified for <code>map</code> and <code>set</code> subtype values only. */
            entries?: EntryPreview[];
        }
        
        interface PropertyPreview {
            
            /** Property name. */
            name: string;
            
            /** Object type. Accessor means that the property itself is an accessor property. */
            type: string;
            
            /** User-friendly property value string. */
            value?: string;
            
            /** Nested value preview. */
            valuePreview?: ObjectPreview;
            
            /** Object subtype hint. Specified for <code>object</code> type values only. */
            subtype?: string;
        }
        
        interface EntryPreview {
            
            /** Preview of the key. Specified for map-like collection entries. */
            key?: ObjectPreview;
            
            /** Preview of the value. */
            value: ObjectPreview;
        }
        
        /** Object property descriptor. */
        interface PropertyDescriptor {
            
            /** Property name or symbol description. */
            name: string;
            
            /** The value associated with the property. */
            value?: RemoteObject;
            
            /** True if the value associated with the property may be changed (data descriptors only). */
            writable?: boolean;
            
            /** A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only). */
            get?: RemoteObject;
            
            /** A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only). */
            set?: RemoteObject;
            
            /** True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object. */
            configurable: boolean;
            
            /** True if this property shows up during enumeration of the properties on the corresponding object. */
            enumerable: boolean;
            
            /** True if the result was thrown during the evaluation. */
            wasThrown?: boolean;
            
            /** True if the property is owned for the object. */
            isOwn?: boolean;
            
            /** Property symbol object, if the property is of the <code>symbol</code> type. */
            symbol?: RemoteObject;
        }
        
        /** Object internal property descriptor. This property isn't normally visible in JavaScript code. */
        interface InternalPropertyDescriptor {
            
            /** Conventional property name. */
            name: string;
            
            /** The value associated with the property. */
            value?: RemoteObject;
        }
        
        /** Represents function call argument. Either remote object id <code>objectId</code> or primitive <code>value</code> or neither of (for undefined) them should be specified. */
        interface CallArgument {
            
            /** Primitive value, or description string if the value can not be JSON-stringified (like NaN, Infinity, -Infinity, -0). */
            value?: any;
            
            /** Remote object handle. */
            objectId?: RemoteObjectId;
            
            /** Object type. */
            type?: string;
        }
        
        /** Id of an execution context. */
        type ExecutionContextId = integer;
        
        /** Description of an isolated world. */
        interface ExecutionContextDescription {
            
            /** Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed. */
            id: ExecutionContextId;
            
            /** Whether context is the default page context (as opposite to e.g. context of content script). */
            isDefault: boolean;
            
            /** Execution context origin. */
            origin: string;
            
            /** Human readable name describing given context. */
            name: string;
            
            /** Id of the owning frame. May be an empty string if the context is not associated with a frame. */
            frameId: string;
        }
        
        /** Detailed information on exception (or error) that was thrown during script compilation or execution. */
        interface ExceptionDetails {
            
            /** Exception text. */
            text: string;
            
            /** URL of the message origin. */
            url?: string;
            
            /** Script ID of the message origin. */
            scriptId?: string;
            
            /** Line number in the resource that generated this message. */
            line?: integer;
            
            /** Column number in the resource that generated this message. */
            column?: integer;
            
            /** JavaScript stack trace for assertions and error messages. */
            stack?: StackTrace;
        }
        
        /** Stack entry for runtime errors and assertions. */
        interface CallFrame {
            
            /** JavaScript function name. */
            functionName: string;
            
            /** JavaScript script id. */
            scriptId: ScriptId;
            
            /** JavaScript script name or url. */
            url: string;
            
            /** JavaScript script line number. */
            lineNumber: integer;
            
            /** JavaScript script column number. */
            columnNumber: integer;
        }
        
        /** Call frames for assertions or error messages. */
        interface StackTrace {
            
            /** String label of this stack trace. For async traces this may be a name of the function that initiated the async call. */
            description?: string;
            
            /** JavaScript function name. */
            callFrames: CallFrame[];
            
            /** Asynchronous JavaScript stack trace that preceded this stack, if available. */
            parent?: StackTrace;
        }
        
        /**
         * Evaluates expression on global object.
         * @param expression - Expression to evaluate.
         * @param objectGroup - Symbolic group name that can be used to release multiple objects.
         * @param includeCommandLineAPI - Determines whether Command Line API should be available during the evaluation.
         * @param doNotPauseOnExceptionsAndMuteConsole - Specifies whether evaluation should stop on exceptions and mute console. Overrides setPauseOnException state.
         * @param contextId - Specifies in which isolated context to perform evaluation. Each content script lives in an isolated context and this parameter may be used to specify one of those contexts. If the parameter is omitted or 0 the evaluation will be performed in the context of the inspected page.
         * @param returnByValue - Whether the result is expected to be a JSON object that should be sent by value.
         * @param generatePreview - Whether preview should be generated for the result.
         * @param userGesture - Whether execution should be treated as initiated by user in the UI.
         */
        function evaluate(expression: string, objectGroup?: string, includeCommandLineAPI?: boolean, doNotPauseOnExceptionsAndMuteConsole?: boolean, contextId?: ExecutionContextId, returnByValue?: boolean, generatePreview?: boolean, userGesture?: boolean);
        
        /**
         * Calls function with given declaration on the given object. Object group of the result is inherited from the target object.
         * @param objectId - Identifier of the object to call function on.
         * @param functionDeclaration - Declaration of the function to call.
         * @param arguments - Call arguments. All call arguments must belong to the same JavaScript world as the target object.
         * @param doNotPauseOnExceptionsAndMuteConsole - Specifies whether function call should stop on exceptions and mute console. Overrides setPauseOnException state.
         * @param returnByValue - Whether the result is expected to be a JSON object which should be sent by value.
         * @param generatePreview - Whether preview should be generated for the result.
         * @param userGesture - Whether execution should be treated as initiated by user in the UI.
         */
        function callFunctionOn(objectId: RemoteObjectId, functionDeclaration: string, arguments?: CallArgument[], doNotPauseOnExceptionsAndMuteConsole?: boolean, returnByValue?: boolean, generatePreview?: boolean, userGesture?: boolean);
        
        /**
         * Returns properties of a given object. Object group of the result is inherited from the target object.
         * @param objectId - Identifier of the object to return properties for.
         * @param ownProperties - If true, returns properties belonging only to the element itself, not to its prototype chain.
         * @param accessorPropertiesOnly - If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.
         * @param generatePreview - Whether preview should be generated for the results.
         */
        function getProperties(objectId: RemoteObjectId, ownProperties?: boolean, accessorPropertiesOnly?: boolean, generatePreview?: boolean);
        
        /**
         * Releases remote object with given id.
         * @param objectId - Identifier of the object to release.
         */
        function releaseObject(objectId: RemoteObjectId);
        
        /**
         * Releases all remote objects that belong to a given group.
         * @param objectGroup - Symbolic object group name.
         */
        function releaseObjectGroup(objectGroup: string);
        
        /**
         * Tells inspected instance(worker or page) that it can run in case it was started paused.
         */
        function run();
        
        /**
         * Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context.
         */
        function enable();
        
        /**
         * Disables reporting of execution contexts creation.
         */
        function disable();
        
        /**
         * @param enabled - 
         */
        function setCustomObjectFormatterEnabled(enabled: boolean);
        
        /**
         * Compiles expression.
         * @param expression - Expression to compile.
         * @param sourceURL - Source url to be set for the script.
         * @param persistScript - Specifies whether the compiled script should be persisted.
         * @param executionContextId - Specifies in which isolated context to perform script run. Each content script lives in an isolated context and this parameter is used to specify one of those contexts.
         */
        function compileScript(expression: string, sourceURL: string, persistScript: boolean, executionContextId: ExecutionContextId);
        
        /**
         * Runs script with given id in a given context.
         * @param scriptId - Id of the script to run.
         * @param executionContextId - Specifies in which isolated context to perform script run. Each content script lives in an isolated context and this parameter is used to specify one of those contexts.
         * @param objectGroup - Symbolic group name that can be used to release multiple objects.
         * @param doNotPauseOnExceptionsAndMuteConsole - Specifies whether script run should stop on exceptions and mute console. Overrides setPauseOnException state.
         * @param includeCommandLineAPI - Determines whether Command Line API should be available during the evaluation.
         */
        function runScript(scriptId: ScriptId, executionContextId: ExecutionContextId, objectGroup?: string, doNotPauseOnExceptionsAndMuteConsole?: boolean, includeCommandLineAPI?: boolean);
        
        /**
         * Issued when new execution context is created.
         * @param context - A newly created execution contex.
         */
        function onExecutionContextCreated(handler: (context: ExecutionContextDescription) => void);
        
        /**
         * Issued when execution context is destroyed.
         * @param executionContextId - Id of the destroyed context
         */
        function onExecutionContextDestroyed(handler: (executionContextId: ExecutionContextId) => void);
        
        /**
         * Issued when all executionContexts were cleared in browser
         */
        function onExecutionContextsCleared(handler: () => void);
        
        /**
         * @param object - 
         * @param hints - 
         */
        function onInspectRequested(handler: (object: RemoteObject, hints: object) => void);
    }
    
    /** Debugger domain exposes JavaScript debugging capabilities. It allows setting and removing breakpoints, stepping through execution, exploring stack traces, etc. */
    namespace Debugger {
        
        /** Breakpoint identifier. */
        type BreakpointId = string;
        
        /** Call frame identifier. */
        type CallFrameId = string;
        
        /** Location in the source code. */
        interface Location {
            
            /** Script identifier as reported in the <code>Debugger.scriptParsed</code>. */
            scriptId: Runtime.ScriptId;
            
            /** Line number in the script (0-based). */
            lineNumber: integer;
            
            /** Column number in the script (0-based). */
            columnNumber?: integer;
        }
        
        /** Location in the source code. */
        interface ScriptPosition {
            
            line: integer;
            
            column: integer;
        }
        
        /** Information about the function. */
        interface FunctionDetails {
            
            /** Location of the function, none for native functions. */
            location?: Location;
            
            /** Name of the function. */
            functionName: string;
            
            /** Whether this is a generator function. */
            isGenerator: boolean;
            
            /** Scope chain for this closure. */
            scopeChain?: Scope[];
        }
        
        /** Information about the generator object. */
        interface GeneratorObjectDetails {
            
            /** Generator function. */
            function: Runtime.RemoteObject;
            
            /** Name of the generator function. */
            functionName: string;
            
            /** Current generator object status. */
            status: string;
            
            /** If suspended, location where generator function was suspended (e.g. location of the last 'yield'). Otherwise, location of the generator function. */
            location?: Location;
        }
        
        /** Collection entry. */
        interface CollectionEntry {
            
            /** Entry key of a map-like collection, otherwise not provided. */
            key?: Runtime.RemoteObject;
            
            /** Entry value. */
            value: Runtime.RemoteObject;
        }
        
        /** JavaScript call frame. Array of call frames form the call stack. */
        interface CallFrame {
            
            /** Call frame identifier. This identifier is only valid while the virtual machine is paused. */
            callFrameId: CallFrameId;
            
            /** Name of the JavaScript function called on this call frame. */
            functionName: string;
            
            /** Location in the source code. */
            functionLocation?: Location;
            
            /** Location in the source code. */
            location: Location;
            
            /** Scope chain for this call frame. */
            scopeChain: Scope[];
            
            /** <code>this</code> object for this call frame. */
            this: Runtime.RemoteObject;
            
            /** The value being returned, if the function is at return point. */
            returnValue?: Runtime.RemoteObject;
        }
        
        /** Scope description. */
        interface Scope {
            
            /** Scope type. */
            type: string;
            
            /** Object representing the scope. For <code>global</code> and <code>with</code> scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties. */
            object: Runtime.RemoteObject;
            
            name?: string;
            
            /** Location in the source code where scope starts */
            startLocation?: Location;
            
            /** Location in the source code where scope ends */
            endLocation?: Location;
        }
        
        /** Error data for setScriptSource command. Contains uncompilable script source error. */
        interface SetScriptSourceError {
            
            /** Compiler error message */
            message: string;
            
            /** Compile error line number (1-based) */
            lineNumber: integer;
            
            /** Compile error column number (1-based) */
            columnNumber: integer;
        }
        
        /** Search match for resource. */
        interface SearchMatch {
            
            /** Line number in resource content. */
            lineNumber: number;
            
            /** Line with match content. */
            lineContent: string;
        }
        
        /**
         * Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received.
         */
        function enable();
        
        /**
         * Disables debugger for given page.
         */
        function disable();
        
        /**
         * Activates / deactivates all breakpoints on the page.
         * @param active - New value for breakpoints active state.
         */
        function setBreakpointsActive(active: boolean);
        
        /**
         * Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).
         * @param skipped - New value for skip pauses state.
         */
        function setSkipAllPauses(skipped: boolean);
        
        /**
         * Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads.
         * @param lineNumber - Line number to set breakpoint at.
         * @param url - URL of the resources to set breakpoint on.
         * @param urlRegex - Regex pattern for the URLs of the resources to set breakpoints on. Either <code>url</code> or <code>urlRegex</code> must be specified.
         * @param columnNumber - Offset in the line to set breakpoint at.
         * @param condition - Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.
         */
        function setBreakpointByUrl(lineNumber: integer, url?: string, urlRegex?: string, columnNumber?: integer, condition?: string);
        
        /**
         * Sets JavaScript breakpoint at a given location.
         * @param location - Location to set breakpoint in.
         * @param condition - Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.
         */
        function setBreakpoint(location: Location, condition?: string);
        
        /**
         * Removes JavaScript breakpoint.
         * @param breakpointId - 
         */
        function removeBreakpoint(breakpointId: BreakpointId);
        
        /**
         * Continues execution until specific location is reached.
         * @param location - Location to continue to.
         * @param interstatementLocation - Allows breakpoints at the intemediate positions inside statements.
         */
        function continueToLocation(location: Location, interstatementLocation?: boolean);
        
        /**
         * Steps over the statement.
         */
        function stepOver();
        
        /**
         * Steps into the function call.
         */
        function stepInto();
        
        /**
         * Steps out of the function call.
         */
        function stepOut();
        
        /**
         * Stops on the next JavaScript statement.
         */
        function pause();
        
        /**
         * Resumes JavaScript execution.
         */
        function resume();
        
        /**
         * Searches for given string in script content.
         * @param scriptId - Id of the script to search in.
         * @param query - String to search for.
         * @param caseSensitive - If true, search is case sensitive.
         * @param isRegex - If true, treats string parameter as regex.
         */
        function searchInContent(scriptId: Runtime.ScriptId, query: string, caseSensitive?: boolean, isRegex?: boolean);
        
        /**
         * Always returns true.
         */
        function canSetScriptSource();
        
        /**
         * Edits JavaScript source live.
         * @param scriptId - Id of the script to edit.
         * @param scriptSource - New content of the script.
         * @param preview -  If true the change will not actually be applied. Preview mode may be used to get result description without actually modifying the code.
         */
        function setScriptSource(scriptId: Runtime.ScriptId, scriptSource: string, preview?: boolean);
        
        /**
         * Restarts particular call frame from the beginning.
         * @param callFrameId - Call frame identifier to evaluate on.
         */
        function restartFrame(callFrameId: CallFrameId);
        
        /**
         * Returns source for the script with given id.
         * @param scriptId - Id of the script to get source for.
         */
        function getScriptSource(scriptId: Runtime.ScriptId);
        
        /**
         * Returns detailed information on given function.
         * @param functionId - Id of the function to get details for.
         */
        function getFunctionDetails(functionId: Runtime.RemoteObjectId);
        
        /**
         * Returns detailed information on given generator object.
         * @param objectId - Id of the generator object to get details for.
         */
        function getGeneratorObjectDetails(objectId: Runtime.RemoteObjectId);
        
        /**
         * Returns entries of given collection.
         * @param objectId - Id of the collection to get entries for.
         */
        function getCollectionEntries(objectId: Runtime.RemoteObjectId);
        
        /**
         * Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>.
         * @param state - Pause on exceptions mode.
         */
        function setPauseOnExceptions(state: string);
        
        /**
         * Evaluates expression on a given call frame.
         * @param callFrameId - Call frame identifier to evaluate on.
         * @param expression - Expression to evaluate.
         * @param objectGroup - String object group name to put result into (allows rapid releasing resulting object handles using <code>releaseObjectGroup</code>).
         * @param includeCommandLineAPI - Specifies whether command line API should be available to the evaluated expression, defaults to false.
         * @param doNotPauseOnExceptionsAndMuteConsole - Specifies whether evaluation should stop on exceptions and mute console. Overrides setPauseOnException state.
         * @param returnByValue - Whether the result is expected to be a JSON object that should be sent by value.
         * @param generatePreview - Whether preview should be generated for the result.
         */
        function evaluateOnCallFrame(callFrameId: CallFrameId, expression: string, objectGroup?: string, includeCommandLineAPI?: boolean, doNotPauseOnExceptionsAndMuteConsole?: boolean, returnByValue?: boolean, generatePreview?: boolean);
        
        /**
         * Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually.
         * @param scopeNumber - 0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch' scope types are allowed. Other scopes could be manipulated manually.
         * @param variableName - Variable name.
         * @param newValue - New variable value.
         * @param callFrameId - Id of callframe that holds variable.
         */
        function setVariableValue(scopeNumber: integer, variableName: string, newValue: Runtime.CallArgument, callFrameId: CallFrameId);
        
        /**
         * Returns call stack including variables changed since VM was paused. VM must be paused.
         */
        function getBacktrace();
        
        /**
         * Enables or disables async call stacks tracking.
         * @param maxDepth - Maximum depth of async call stacks. Setting to <code>0</code> will effectively disable collecting async call stacks (default).
         */
        function setAsyncCallStackDepth(maxDepth: integer);
        
        /**
         * Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.
         * @param patterns - Array of regexps that will be used to check script url for blackbox state.
         */
        function setBlackboxPatterns(patterns: string[]);
        
        /**
         * Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted.
         * @param scriptId - Id of the script.
         * @param positions - 
         */
        function setBlackboxedRanges(scriptId: Runtime.ScriptId, positions: ScriptPosition[]);
        
        /**
         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.
         * @param scriptId - Identifier of the script parsed.
         * @param url - URL or name of the script parsed (if any).
         * @param startLine - Line offset of the script within the resource with given URL (for script tags).
         * @param startColumn - Column offset of the script within the resource with given URL.
         * @param endLine - Last line of the script.
         * @param endColumn - Length of the last line of the script.
         * @param executionContextId - Specifies script creation context.
         * @param hash - Content hash of the script.
         * @param isContentScript - Determines whether this script is a user extension script.
         * @param isInternalScript - Determines whether this script is an internal script.
         * @param isLiveEdit - True, if this script is generated as a result of the live edit operation.
         * @param sourceMapURL - URL of source map associated with script (if any).
         * @param hasSourceURL - True, if this script has sourceURL.
         * @param deprecatedCommentWasUsed - True, if '//@ sourceURL' or '//@ sourceMappingURL' was used.
         */
        function onScriptParsed(handler: (scriptId: Runtime.ScriptId, url: string, startLine: integer, startColumn: integer, endLine: integer, endColumn: integer, executionContextId: Runtime.ExecutionContextId, hash: string, isContentScript?: boolean, isInternalScript?: boolean, isLiveEdit?: boolean, sourceMapURL?: string, hasSourceURL?: boolean, deprecatedCommentWasUsed?: boolean) => void);
        
        /**
         * Fired when virtual machine fails to parse the script.
         * @param scriptId - Identifier of the script parsed.
         * @param url - URL or name of the script parsed (if any).
         * @param startLine - Line offset of the script within the resource with given URL (for script tags).
         * @param startColumn - Column offset of the script within the resource with given URL.
         * @param endLine - Last line of the script.
         * @param endColumn - Length of the last line of the script.
         * @param executionContextId - Specifies script creation context.
         * @param hash - Content hash of the script.
         * @param isContentScript - Determines whether this script is a user extension script.
         * @param isInternalScript - Determines whether this script is an internal script.
         * @param sourceMapURL - URL of source map associated with script (if any).
         * @param hasSourceURL - True, if this script has sourceURL.
         * @param deprecatedCommentWasUsed - True, if '//@ sourceURL' or '//@ sourceMappingURL' was used.
         */
        function onScriptFailedToParse(handler: (scriptId: Runtime.ScriptId, url: string, startLine: integer, startColumn: integer, endLine: integer, endColumn: integer, executionContextId: Runtime.ExecutionContextId, hash: string, isContentScript?: boolean, isInternalScript?: boolean, sourceMapURL?: string, hasSourceURL?: boolean, deprecatedCommentWasUsed?: boolean) => void);
        
        /**
         * Fired when breakpoint is resolved to an actual script and location.
         * @param breakpointId - Breakpoint unique identifier.
         * @param location - Actual breakpoint location.
         */
        function onBreakpointResolved(handler: (breakpointId: BreakpointId, location: Location) => void);
        
        /**
         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.
         * @param callFrames - Call stack the virtual machine stopped on.
         * @param reason - Pause reason.
         * @param data - Object containing break-specific auxiliary properties.
         * @param hitBreakpoints - Hit breakpoints IDs
         * @param asyncStackTrace - Async stack trace, if any.
         */
        function onPaused(handler: (callFrames: CallFrame[], reason: string, data?: object, hitBreakpoints?: string[], asyncStackTrace?: Runtime.StackTrace) => void);
        
        /**
         * Fired when the virtual machine resumed execution.
         */
        function onResumed(handler: () => void);
    }
    
    namespace Profiler {
        
        /** CPU Profile node. Holds callsite information, execution statistics and child nodes. */
        interface CPUProfileNode {
            
            /** Function name. */
            functionName: string;
            
            /** Script identifier. */
            scriptId: Runtime.ScriptId;
            
            /** URL. */
            url: string;
            
            /** 1-based line number of the function start position. */
            lineNumber: integer;
            
            /** 1-based column number of the function start position. */
            columnNumber: integer;
            
            /** Number of samples where this node was on top of the call stack. */
            hitCount: integer;
            
            /** Call UID. */
            callUID: number;
            
            /** Child nodes. */
            children: CPUProfileNode[];
            
            /** The reason of being not optimized. The function may be deoptimized or marked as don't optimize. */
            deoptReason: string;
            
            /** Unique id of the node. */
            id: integer;
            
            /** An array of source position ticks. */
            positionTicks: PositionTickInfo[];
        }
        
        /** Profile. */
        interface CPUProfile {
            
            head: CPUProfileNode;
            
            /** Profiling start time in seconds. */
            startTime: number;
            
            /** Profiling end time in seconds. */
            endTime: number;
            
            /** Ids of samples top nodes. */
            samples?: integer[];
            
            /** Timestamps of the samples in microseconds. */
            timestamps?: number[];
        }
        
        /** Specifies a number of samples attributed to a certain source position. */
        interface PositionTickInfo {
            
            /** Source line number (1-based). */
            line: integer;
            
            /** Number of samples attributed to the source line. */
            ticks: integer;
        }
        
        function enable();
        
        function disable();
        
        /**
         * Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.
         * @param interval - New sampling interval in microseconds.
         */
        function setSamplingInterval(interval: integer);
        
        function start();
        
        function stop();
        
        /**
         * Sent when new profile recodring is started using console.profile() call.
         * @param id - 
         * @param location - Location of console.profile().
         * @param title - Profile title passed as argument to console.profile().
         */
        function onConsoleProfileStarted(handler: (id: string, location: Debugger.Location, title?: string) => void);
        
        /**
         * @param id - 
         * @param location - Location of console.profileEnd().
         * @param profile - 
         * @param title - Profile title passed as argunet to console.profile().
         */
        function onConsoleProfileFinished(handler: (id: string, location: Debugger.Location, profile: CPUProfile, title?: string) => void);
    }
    
    namespace HeapProfiler {
        
        /** Heap snapshot object id. */
        type HeapSnapshotObjectId = string;
        
        /** Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes. */
        interface SamplingHeapProfileNode {
            
            /** Function name. */
            functionName: string;
            
            /** Script identifier. */
            scriptId: Runtime.ScriptId;
            
            /** URL. */
            url: string;
            
            /** 1-based line number of the function start position. */
            lineNumber: integer;
            
            /** 1-based column number of the function start position. */
            columnNumber: integer;
            
            /** Allocations size in bytes for the node excluding children. */
            selfSize: number;
            
            /** Child nodes. */
            children: SamplingHeapProfileNode[];
        }
        
        /** Profile. */
        interface SamplingHeapProfile {
            
            head: SamplingHeapProfileNode;
        }
        
        function enable();
        
        function disable();
        
        /**
         * @param trackAllocations - 
         */
        function startTrackingHeapObjects(trackAllocations?: boolean);
        
        /**
         * @param reportProgress - If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped.
         */
        function stopTrackingHeapObjects(reportProgress?: boolean);
        
        /**
         * @param reportProgress - If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.
         */
        function takeHeapSnapshot(reportProgress?: boolean);
        
        function collectGarbage();
        
        /**
         * @param objectId - 
         * @param objectGroup - Symbolic group name that can be used to release multiple objects.
         */
        function getObjectByHeapObjectId(objectId: HeapSnapshotObjectId, objectGroup?: string);
        
        /**
         * Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
         * @param heapObjectId - Heap snapshot object id to be accessible by means of $x command line API.
         */
        function addInspectedHeapObject(heapObjectId: HeapSnapshotObjectId);
        
        /**
         * @param objectId - Identifier of the object to get heap object id for.
         */
        function getHeapObjectId(objectId: Runtime.RemoteObjectId);
        
        /**
         * @param samplingInterval - Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes.
         */
        function startSampling(samplingInterval?: number);
        
        function stopSampling();
        
        /**
         * @param chunk - 
         */
        function onAddHeapSnapshotChunk(handler: (chunk: string) => void);
        
        function onResetProfiles(handler: () => void);
        
        /**
         * @param done - 
         * @param total - 
         * @param finished - 
         */
        function onReportHeapSnapshotProgress(handler: (done: integer, total: integer, finished?: boolean) => void);
        
        /**
         * If heap objects tracking has been started then backend regulary sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.
         * @param lastSeenObjectId - 
         * @param timestamp - 
         */
        function onLastSeenObjectId(handler: (lastSeenObjectId: integer, timestamp: number) => void);
        
        /**
         * If heap objects tracking has been started then backend may send update for one or more fragments
         * @param statsUpdate - An array of triplets. Each triplet describes a fragment. The first integer is the fragment index, the second integer is a total count of objects for the fragment, the third integer is a total size of the objects for the fragment.
         */
        function onHeapStatsUpdate(handler: (statsUpdate: integer[]) => void);
    }
    
    namespace Inspector {
        
        /**
         * Enables inspector domain notifications.
         */
        function enable();
        
        /**
         * Disables inspector domain notifications.
         */
        function disable();
        
        /**
         * Fired when remote debugging connection is about to be terminated. Contains detach reason.
         * @param reason - The reason why connection has been terminated.
         */
        function onDetached(handler: (reason: string) => void);
        
        /**
         * Fired when debugging target has crashed
         */
        function onTargetCrashed(handler: () => void);
    }
    
    namespace Memory {
        
        /** Memory pressure level. */
        type PressureLevel = string;
        
        function getDOMCounters();
        
        /**
         * Enable/disable suppressing memory pressure notifications in all processes.
         * @param suppressed - If true, memory pressure notifications will be suppressed.
         */
        function setPressureNotificationsSuppressed(suppressed: boolean);
        
        /**
         * Simulate a memory pressure notification in all processes.
         * @param level - Memory pressure level of the notification.
         */
        function simulatePressureNotification(level: PressureLevel);
    }
    
    /** Actions and events related to the inspected page belong to the page domain. */
    namespace Page {
        
        /** Resource type as it was perceived by the rendering engine. */
        type ResourceType = string;
        
        /** Unique frame identifier. */
        type FrameId = string;
        
        /** Information about the Frame on the page. */
        interface Frame {
            
            /** Frame unique identifier. */
            id: string;
            
            /** Parent frame identifier. */
            parentId?: string;
            
            /** Identifier of the loader associated with this frame. */
            loaderId: Network.LoaderId;
            
            /** Frame's name as specified in the tag. */
            name?: string;
            
            /** Frame document's URL. */
            url: string;
            
            /** Frame document's security origin. */
            securityOrigin: string;
            
            /** Frame document's mimeType as determined by the browser. */
            mimeType: string;
        }
        
        /** Information about the Resource on the page. */
        interface FrameResource {
            
            /** Resource URL. */
            url: string;
            
            /** Type of this resource. */
            type: ResourceType;
            
            /** Resource mimeType as determined by the browser. */
            mimeType: string;
            
            /** True if the resource failed to load. */
            failed?: boolean;
            
            /** True if the resource was canceled during loading. */
            canceled?: boolean;
        }
        
        /** Information about the Frame hierarchy along with their cached resources. */
        interface FrameResourceTree {
            
            /** Frame information for this tree item. */
            frame: Frame;
            
            /** Child frames. */
            childFrames?: FrameResourceTree[];
            
            /** Information about frame resources. */
            resources: FrameResource[];
        }
        
        /** Unique script identifier. */
        type ScriptIdentifier = string;
        
        /** Navigation history entry. */
        interface NavigationEntry {
            
            /** Unique id of the navigation history entry. */
            id: integer;
            
            /** URL of the navigation history entry. */
            url: string;
            
            /** Title of the navigation history entry. */
            title: string;
        }
        
        /** Screencast frame metadata. */
        interface ScreencastFrameMetadata {
            
            /** Top offset in DIP. */
            offsetTop: number;
            
            /** Page scale factor. */
            pageScaleFactor: number;
            
            /** Device screen width in DIP. */
            deviceWidth: number;
            
            /** Device screen height in DIP. */
            deviceHeight: number;
            
            /** Position of horizontal scroll in CSS pixels. */
            scrollOffsetX: number;
            
            /** Position of vertical scroll in CSS pixels. */
            scrollOffsetY: number;
            
            /** Frame swap timestamp. */
            timestamp?: number;
        }
        
        /** Javascript dialog type. */
        type DialogType = string;
        
        /** Error while paring app manifest. */
        interface AppManifestError {
            
            /** Error message. */
            message: string;
            
            /** If criticial, this is a non-recoverable parse error. */
            critical: integer;
            
            /** Error line. */
            line: integer;
            
            /** Error column. */
            column: integer;
        }
        
        /**
         * Enables page domain notifications.
         */
        function enable();
        
        /**
         * Disables page domain notifications.
         */
        function disable();
        
        /**
         * @param scriptSource - 
         */
        function addScriptToEvaluateOnLoad(scriptSource: string);
        
        /**
         * @param identifier - 
         */
        function removeScriptToEvaluateOnLoad(identifier: ScriptIdentifier);
        
        /**
         * Controls whether browser will open a new inspector window for connected pages.
         * @param autoAttach - If true, browser will open a new inspector window for every page created from this one.
         */
        function setAutoAttachToCreatedPages(autoAttach: boolean);
        
        /**
         * Reloads given page optionally ignoring the cache.
         * @param ignoreCache - If true, browser cache is ignored (as if the user pressed Shift+refresh).
         * @param scriptToEvaluateOnLoad - If set, the script will be injected into all frames of the inspected page after reload.
         */
        function reload(ignoreCache?: boolean, scriptToEvaluateOnLoad?: string);
        
        /**
         * Navigates current page to the given URL.
         * @param url - URL to navigate the page to.
         */
        function navigate(url: string);
        
        /**
         * Returns navigation history for the current page.
         */
        function getNavigationHistory();
        
        /**
         * Navigates current page to the given history entry.
         * @param entryId - Unique id of the entry to navigate to.
         */
        function navigateToHistoryEntry(entryId: integer);
        
        /**
         * Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the <code>cookies</code> field.
         */
        function getCookies();
        
        /**
         * Deletes browser cookie with given name, domain and path.
         * @param cookieName - Name of the cookie to remove.
         * @param url - URL to match cooke domain and path.
         */
        function deleteCookie(cookieName: string, url: string);
        
        /**
         * Returns present frame / resource tree structure.
         */
        function getResourceTree();
        
        /**
         * Returns content of the given resource.
         * @param frameId - Frame id to get resource for.
         * @param url - URL of the resource to get content for.
         */
        function getResourceContent(frameId: FrameId, url: string);
        
        /**
         * Searches for given string in resource content.
         * @param frameId - Frame id for resource to search in.
         * @param url - URL of the resource to search in.
         * @param query - String to search for.
         * @param caseSensitive - If true, search is case sensitive.
         * @param isRegex - If true, treats string parameter as regex.
         */
        function searchInResource(frameId: FrameId, url: string, query: string, caseSensitive?: boolean, isRegex?: boolean);
        
        /**
         * Sets given markup as the document's HTML.
         * @param frameId - Frame id to set HTML for.
         * @param html - HTML content to set.
         */
        function setDocumentContent(frameId: FrameId, html: string);
        
        /**
         * Overrides the values of device screen dimensions (window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media query results).
         * @param width - Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
         * @param height - Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
         * @param deviceScaleFactor - Overriding device scale factor value. 0 disables the override.
         * @param mobile - Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
         * @param fitWindow - Whether a view that exceeds the available browser window area should be scaled down to fit.
         * @param scale - Scale to apply to resulting view image. Ignored in |fitWindow| mode.
         * @param offsetX - X offset to shift resulting view image by. Ignored in |fitWindow| mode.
         * @param offsetY - Y offset to shift resulting view image by. Ignored in |fitWindow| mode.
         * @param screenWidth - Overriding screen width value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
         * @param screenHeight - Overriding screen height value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
         * @param positionX - Overriding view X position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
         * @param positionY - Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
         * @param screenOrientation - Screen orientation override.
         */
        function setDeviceMetricsOverride(width: integer, height: integer, deviceScaleFactor: number, mobile: boolean, fitWindow: boolean, scale?: number, offsetX?: number, offsetY?: number, screenWidth?: integer, screenHeight?: integer, positionX?: integer, positionY?: integer, screenOrientation?: Emulation.ScreenOrientation);
        
        /**
         * Clears the overriden device metrics.
         */
        function clearDeviceMetricsOverride();
        
        /**
         * Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable.
         * @param latitude - Mock latitude
         * @param longitude - Mock longitude
         * @param accuracy - Mock accuracy
         */
        function setGeolocationOverride(latitude?: number, longitude?: number, accuracy?: number);
        
        /**
         * Clears the overriden Geolocation Position and Error.
         */
        function clearGeolocationOverride();
        
        /**
         * Overrides the Device Orientation.
         * @param alpha - Mock alpha
         * @param beta - Mock beta
         * @param gamma - Mock gamma
         */
        function setDeviceOrientationOverride(alpha: number, beta: number, gamma: number);
        
        /**
         * Clears the overridden Device Orientation.
         */
        function clearDeviceOrientationOverride();
        
        /**
         * Toggles mouse event-based touch event emulation.
         * @param enabled - Whether the touch event emulation should be enabled.
         * @param configuration - Touch/gesture events configuration. Default: current platform.
         */
        function setTouchEmulationEnabled(enabled: boolean, configuration?: string);
        
        /**
         * Capture page screenshot.
         */
        function captureScreenshot();
        
        /**
         * Starts sending each frame using the <code>screencastFrame</code> event.
         * @param format - Image compression format.
         * @param quality - Compression quality from range [0..100].
         * @param maxWidth - Maximum screenshot width.
         * @param maxHeight - Maximum screenshot height.
         * @param everyNthFrame - Send every n-th frame.
         */
        function startScreencast(format?: string, quality?: integer, maxWidth?: integer, maxHeight?: integer, everyNthFrame?: integer);
        
        /**
         * Stops sending each frame in the <code>screencastFrame</code>.
         */
        function stopScreencast();
        
        /**
         * Acknowledges that a screencast frame has been received by the frontend.
         * @param sessionId - Frame number.
         */
        function screencastFrameAck(sessionId: integer);
        
        /**
         * Accepts or dismisses a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload).
         * @param accept - Whether to accept or dismiss the dialog.
         * @param promptText - The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog.
         */
        function handleJavaScriptDialog(accept: boolean, promptText?: string);
        
        /**
         * Shows / hides color picker
         * @param enabled - Shows / hides color picker
         */
        function setColorPickerEnabled(enabled: boolean);
        
        /**
         * Sets overlay message.
         * @param message - Overlay message to display when paused in debugger.
         */
        function setOverlayMessage(message?: string);
        
        function getAppManifest();
        
        function requestAppBanner();
        
        /**
         * @param threshold - If set to a positive number, specifies threshold in seconds for input event latency that will cause a console warning about blocked event to be issued. If zero or less, the warning is disabled.
         */
        function setBlockedEventsWarningThreshold(threshold: number);
        
        /**
         * @param timestamp - 
         */
        function onDomContentEventFired(handler: (timestamp: number) => void);
        
        /**
         * @param timestamp - 
         */
        function onLoadEventFired(handler: (timestamp: number) => void);
        
        /**
         * Fired when frame has been attached to its parent.
         * @param frameId - Id of the frame that has been attached.
         * @param parentFrameId - Parent frame identifier.
         */
        function onFrameAttached(handler: (frameId: FrameId, parentFrameId: FrameId) => void);
        
        /**
         * Fired once navigation of the frame has completed. Frame is now associated with the new loader.
         * @param frame - Frame object.
         */
        function onFrameNavigated(handler: (frame: Frame) => void);
        
        /**
         * Fired when frame has been detached from its parent.
         * @param frameId - Id of the frame that has been detached.
         */
        function onFrameDetached(handler: (frameId: FrameId) => void);
        
        /**
         * Fired when frame has started loading.
         * @param frameId - Id of the frame that has started loading.
         */
        function onFrameStartedLoading(handler: (frameId: FrameId) => void);
        
        /**
         * Fired when frame has stopped loading.
         * @param frameId - Id of the frame that has stopped loading.
         */
        function onFrameStoppedLoading(handler: (frameId: FrameId) => void);
        
        /**
         * Fired when frame schedules a potential navigation.
         * @param frameId - Id of the frame that has scheduled a navigation.
         * @param delay - Delay (in seconds) until the navigation is scheduled to begin. The navigation is not guaranteed to start.
         */
        function onFrameScheduledNavigation(handler: (frameId: FrameId, delay: number) => void);
        
        /**
         * Fired when frame no longer has a scheduled navigation.
         * @param frameId - Id of the frame that has cleared its scheduled navigation.
         */
        function onFrameClearedScheduledNavigation(handler: (frameId: FrameId) => void);
        
        function onFrameResized(handler: () => void);
        
        /**
         * Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to open.
         * @param message - Message that will be displayed by the dialog.
         * @param type - Dialog type.
         */
        function onJavascriptDialogOpening(handler: (message: string, type: DialogType) => void);
        
        /**
         * Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been closed.
         * @param result - Whether dialog was confirmed.
         */
        function onJavascriptDialogClosed(handler: (result: boolean) => void);
        
        /**
         * Compressed image data requested by the <code>startScreencast</code>.
         * @param data - Base64-encoded compressed image.
         * @param metadata - Screencast frame metadata.
         * @param sessionId - Frame number.
         */
        function onScreencastFrame(handler: (data: string, metadata: ScreencastFrameMetadata, sessionId: integer) => void);
        
        /**
         * Fired when the page with currently enabled screencast was shown or hidden </code>.
         * @param visible - True if the page is visible.
         */
        function onScreencastVisibilityChanged(handler: (visible: boolean) => void);
        
        /**
         * Fired when a color has been picked.
         * @param color - RGBA of the picked color.
         */
        function onColorPicked(handler: (color: DOM.RGBA) => void);
        
        /**
         * Fired when interstitial page was shown
         */
        function onInterstitialShown(handler: () => void);
        
        /**
         * Fired when interstitial page was hidden
         */
        function onInterstitialHidden(handler: () => void);
    }
    
    /** This domain allows to control rendering of the page. */
    namespace Rendering {
        
        /**
         * Requests that backend shows paint rectangles
         * @param result - True for showing paint rectangles
         */
        function setShowPaintRects(result: boolean);
        
        /**
         * Requests that backend shows debug borders on layers
         * @param show - True for showing debug borders
         */
        function setShowDebugBorders(show: boolean);
        
        /**
         * Requests that backend shows the FPS counter
         * @param show - True for showing the FPS counter
         */
        function setShowFPSCounter(show: boolean);
        
        /**
         * Requests that backend shows scroll bottleneck rects
         * @param show - True for showing scroll bottleneck rects
         */
        function setShowScrollBottleneckRects(show: boolean);
        
        /**
         * Paints viewport size upon main frame resize.
         * @param show - Whether to paint size or not.
         */
        function setShowViewportSizeOnResize(show: boolean);
    }
    
    /** This domain emulates different environments for the page. */
    namespace Emulation {
        
        /** Screen orientation. */
        interface ScreenOrientation {
            
            /** Orientation type. */
            type: string;
            
            /** Orientation angle. */
            angle: integer;
        }
        
        /**
         * Overrides the values of device screen dimensions (window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and "device-width"/"device-height"-related CSS media query results).
         * @param width - Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
         * @param height - Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
         * @param deviceScaleFactor - Overriding device scale factor value. 0 disables the override.
         * @param mobile - Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
         * @param fitWindow - Whether a view that exceeds the available browser window area should be scaled down to fit.
         * @param scale - Scale to apply to resulting view image. Ignored in |fitWindow| mode.
         * @param offsetX - X offset to shift resulting view image by. Ignored in |fitWindow| mode.
         * @param offsetY - Y offset to shift resulting view image by. Ignored in |fitWindow| mode.
         * @param screenWidth - Overriding screen width value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
         * @param screenHeight - Overriding screen height value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
         * @param positionX - Overriding view X position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
         * @param positionY - Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|.
         * @param screenOrientation - Screen orientation override.
         */
        function setDeviceMetricsOverride(width: integer, height: integer, deviceScaleFactor: number, mobile: boolean, fitWindow: boolean, scale?: number, offsetX?: number, offsetY?: number, screenWidth?: integer, screenHeight?: integer, positionX?: integer, positionY?: integer, screenOrientation?: ScreenOrientation);
        
        /**
         * Clears the overriden device metrics.
         */
        function clearDeviceMetricsOverride();
        
        /**
         * Requests that page scale factor is reset to initial values.
         */
        function resetPageScaleFactor();
        
        /**
         * Sets a specified page scale factor.
         * @param pageScaleFactor - Page scale factor.
         */
        function setPageScaleFactor(pageScaleFactor: number);
        
        /**
         * Switches script execution in the page.
         * @param value - Whether script execution should be disabled in the page.
         */
        function setScriptExecutionDisabled(value: boolean);
        
        /**
         * Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable.
         * @param latitude - Mock latitude
         * @param longitude - Mock longitude
         * @param accuracy - Mock accuracy
         */
        function setGeolocationOverride(latitude?: number, longitude?: number, accuracy?: number);
        
        /**
         * Clears the overriden Geolocation Position and Error.
         */
        function clearGeolocationOverride();
        
        /**
         * Toggles mouse event-based touch event emulation.
         * @param enabled - Whether the touch event emulation should be enabled.
         * @param configuration - Touch/gesture events configuration. Default: current platform.
         */
        function setTouchEmulationEnabled(enabled: boolean, configuration?: string);
        
        /**
         * Emulates the given media for CSS media queries.
         * @param media - Media type to emulate. Empty string disables the override.
         */
        function setEmulatedMedia(media: string);
        
        /**
         * Enables CPU throttling to emulate slow CPUs.
         * @param rate - Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
         */
        function setCPUThrottlingRate(rate: number);
        
        /**
         * Tells whether emulation is supported.
         */
        function canEmulate();
    }
    
    /** Console domain defines methods and events for interaction with the JavaScript console. Console collects messages created by means of the <a href='http://getfirebug.com/wiki/index.php/Console_API'>JavaScript Console API</a>. One needs to enable this domain using <code>enable</code> command in order to start receiving the console messages. Browser collects messages issued while console domain is not enabled as well and reports them using <code>messageAdded</code> notification upon enabling. */
    namespace Console {
        
        /** Number of seconds since epoch. */
        type Timestamp = number;
        
        /** Console message. */
        interface ConsoleMessage {
            
            /** Message source. */
            source: string;
            
            /** Message severity. */
            level: string;
            
            /** Message text. */
            text: string;
            
            /** Console message type. */
            type?: string;
            
            /** Script ID of the message origin. */
            scriptId?: string;
            
            /** URL of the message origin. */
            url?: string;
            
            /** Line number in the resource that generated this message. */
            line?: integer;
            
            /** Column number in the resource that generated this message. */
            column?: integer;
            
            /** Repeat count for repeated messages. */
            repeatCount?: integer;
            
            /** Message parameters in case of the formatted message. */
            parameters?: Runtime.RemoteObject[];
            
            /** JavaScript stack trace for assertions and error messages. */
            stack?: Runtime.StackTrace;
            
            /** Identifier of the network request associated with this message. */
            networkRequestId?: Network.RequestId;
            
            /** Timestamp, when this message was fired. */
            timestamp: Timestamp;
            
            /** Identifier of the context where this message was created */
            executionContextId?: Runtime.ExecutionContextId;
            
            /** Message id. */
            messageId?: integer;
            
            /** Related message id. */
            relatedMessageId?: integer;
        }
        
        /**
         * Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification.
         */
        function enable();
        
        /**
         * Disables console domain, prevents further console messages from being reported to the client.
         */
        function disable();
        
        /**
         * Clears console messages collected in the browser.
         */
        function clearMessages();
        
        /**
         * Issued when new console message is added.
         * @param message - Console message that has been added.
         */
        function onMessageAdded(handler: (message: ConsoleMessage) => void);
        
        /**
         * Is not issued. Will be gone in the future versions of the protocol.
         * @param count - New repeat count value.
         * @param timestamp - Timestamp of most recent message in batch.
         */
        function onMessageRepeatCountUpdated(handler: (count: integer, timestamp: Timestamp) => void);
        
        /**
         * Issued when console is cleared. This happens either upon <code>clearMessages</code> command or after page navigation.
         */
        function onMessagesCleared(handler: () => void);
    }
    
    /** Security */
    namespace Security {
        
        /** An internal certificate ID value. */
        type CertificateId = integer;
        
        /** The security level of a page or resource. */
        type SecurityState = string;
        
        /** An explanation of an factor contributing to the security state. */
        interface SecurityStateExplanation {
            
            /** Security state representing the severity of the factor being explained. */
            securityState: SecurityState;
            
            /** Short phrase describing the type of factor. */
            summary: string;
            
            /** Full text explanation of the factor. */
            description: string;
            
            /** Associated certificate id. */
            certificateId?: CertificateId;
        }
        
        /** Information about mixed content on the page. */
        interface MixedContentStatus {
            
            /** True if the page ran insecure content such as scripts. */
            ranInsecureContent: boolean;
            
            /** True if the page displayed insecure content such as images. */
            displayedInsecureContent: boolean;
            
            /** Security state representing a page that ran insecure content. */
            ranInsecureContentStyle: SecurityState;
            
            /** Security state representing a page that displayed insecure content. */
            displayedInsecureContentStyle: SecurityState;
        }
        
        /**
         * Enables tracking security state changes.
         */
        function enable();
        
        /**
         * Disables tracking security state changes.
         */
        function disable();
        
        /**
         * The security state of the page changed.
         * @param securityState - Security state.
         * @param explanations - List of explanations for the security state. If the overall security state is `insecure` or `warning`, at least one corresponding explanation should be included.
         * @param mixedContentStatus - Information about mixed content on the page.
         * @param schemeIsCryptographic - True if the page was loaded over cryptographic transport such as HTTPS.
         */
        function onSecurityStateChanged(handler: (securityState: SecurityState, explanations?: SecurityStateExplanation[], mixedContentStatus?: MixedContentStatus, schemeIsCryptographic?: boolean) => void);
    }
    
    /** Network domain allows tracking network activities of the page. It exposes information about http, file, data and other requests and responses, their headers, bodies, timing, etc. */
    namespace Network {
        
        /** Unique loader identifier. */
        type LoaderId = string;
        
        /** Unique request identifier. */
        type RequestId = string;
        
        /** Number of seconds since epoch. */
        type Timestamp = number;
        
        /** Request / response headers as keys / values of JSON object. */
        interface Headers {
            [key: string]: string;
        }
        
        /** Timing information for the request. */
        interface ResourceTiming {
            
            /** Timing's requestTime is a baseline in seconds, while the other numbers are ticks in milliseconds relatively to this requestTime. */
            requestTime: number;
            
            /** Started resolving proxy. */
            proxyStart: number;
            
            /** Finished resolving proxy. */
            proxyEnd: number;
            
            /** Started DNS address resolve. */
            dnsStart: number;
            
            /** Finished DNS address resolve. */
            dnsEnd: number;
            
            /** Started connecting to the remote host. */
            connectStart: number;
            
            /** Connected to the remote host. */
            connectEnd: number;
            
            /** Started SSL handshake. */
            sslStart: number;
            
            /** Finished SSL handshake. */
            sslEnd: number;
            
            /** Started running ServiceWorker. */
            workerStart: number;
            
            /** Finished Starting ServiceWorker. */
            workerReady: number;
            
            /** Started sending request. */
            sendStart: number;
            
            /** Finished sending request. */
            sendEnd: number;
            
            /** Time the server started pushing request. */
            pushStart: number;
            
            /** Time the server finished pushing request. */
            pushEnd: number;
            
            /** Finished receiving response headers. */
            receiveHeadersEnd: number;
        }
        
        /** Loading priority of a resource request. */
        type ResourcePriority = string;
        
        /** HTTP request data. */
        interface Request {
            
            /** Request URL. */
            url: string;
            
            /** HTTP request method. */
            method: string;
            
            /** HTTP request headers. */
            headers: Headers;
            
            /** HTTP POST request data. */
            postData?: string;
            
            /** The mixed content status of the request, as defined in http://www.w3.org/TR/mixed-content/ */
            mixedContentType?: string;
            
            /** Priority of the resource request at the time request is sent. */
            initialPriority: ResourcePriority;
        }
        
        /** Subject of a certificate. */
        interface CertificateSubject {
            
            /** Certificate subject name. */
            name: string;
            
            /** Subject Alternative Name (SAN) DNS names. */
            sanDnsNames: string[];
            
            /** Subject Alternative Name (SAN) IP addresses. */
            sanIpAddresses: string[];
        }
        
        /** Details about a request's certificate. */
        interface CertificateDetails {
            
            /** Certificate subject. */
            subject: CertificateSubject;
            
            /** Name of the issuing CA. */
            issuer: string;
            
            /** Certificate valid from date. */
            validFrom: Timestamp;
            
            /** Certificate valid to (expiration) date */
            validTo: Timestamp;
        }
        
        /** Details about the validation status of a request's certificate. */
        interface CertificateValidationDetails {
            
            /** The number of SCTs from unknown logs. */
            numUnknownScts: integer;
            
            /** The number of invalid SCTs. */
            numInvalidScts: integer;
            
            /** The number of valid SCTs. */
            numValidScts: integer;
        }
        
        /** Security details about a request. */
        interface SecurityDetails {
            
            /** Protocol name (e.g. "TLS 1.2" or "QUIC"). */
            protocol: string;
            
            /** Key Exchange used by the connection. */
            keyExchange: string;
            
            /** Cipher name. */
            cipher: string;
            
            /** TLS MAC. Note that AEAD ciphers do not have separate MACs. */
            mac?: string;
            
            /** Certificate ID value. */
            certificateId: Security.CertificateId;
            
            /** Validation details for the request's certficate. */
            certificateValidationDetails?: CertificateValidationDetails;
        }
        
        /** The reason why request was blocked. */
        type BlockedReason = string;
        
        /** HTTP response data. */
        interface Response {
            
            /** Response URL. This URL can be different from CachedResource.url in case of redirect. */
            url: string;
            
            /** HTTP response status code. */
            status: number;
            
            /** HTTP response status text. */
            statusText: string;
            
            /** HTTP response headers. */
            headers: Headers;
            
            /** HTTP response headers text. */
            headersText?: string;
            
            /** Resource mimeType as determined by the browser. */
            mimeType: string;
            
            /** Refined HTTP request headers that were actually transmitted over the network. */
            requestHeaders?: Headers;
            
            /** HTTP request headers text. */
            requestHeadersText?: string;
            
            /** Specifies whether physical connection was actually reused for this request. */
            connectionReused: boolean;
            
            /** Physical connection id that was actually used for this request. */
            connectionId: number;
            
            /** Remote IP address. */
            remoteIPAddress?: string;
            
            /** Remote port. */
            remotePort?: integer;
            
            /** Specifies that the request was served from the disk cache. */
            fromDiskCache?: boolean;
            
            /** Specifies that the request was served from the ServiceWorker. */
            fromServiceWorker?: boolean;
            
            /** Total number of bytes received for this request so far. */
            encodedDataLength: number;
            
            /** Timing information for the given request. */
            timing?: ResourceTiming;
            
            /** Protocol used to fetch this request. */
            protocol?: string;
            
            /** Security state of the request resource. */
            securityState: Security.SecurityState;
            
            /** Security details for the request. */
            securityDetails?: SecurityDetails;
        }
        
        /** WebSocket request data. */
        interface WebSocketRequest {
            
            /** HTTP request headers. */
            headers: Headers;
        }
        
        /** WebSocket response data. */
        interface WebSocketResponse {
            
            /** HTTP response status code. */
            status: number;
            
            /** HTTP response status text. */
            statusText: string;
            
            /** HTTP response headers. */
            headers: Headers;
            
            /** HTTP response headers text. */
            headersText?: string;
            
            /** HTTP request headers. */
            requestHeaders?: Headers;
            
            /** HTTP request headers text. */
            requestHeadersText?: string;
        }
        
        /** WebSocket frame data. */
        interface WebSocketFrame {
            
            /** WebSocket frame opcode. */
            opcode: number;
            
            /** WebSocke frame mask. */
            mask: boolean;
            
            /** WebSocke frame payload data. */
            payloadData: string;
        }
        
        /** Information about the cached resource. */
        interface CachedResource {
            
            /** Resource URL. This is the url of the original network request. */
            url: string;
            
            /** Type of this resource. */
            type: Page.ResourceType;
            
            /** Cached response data. */
            response?: Response;
            
            /** Cached response body size. */
            bodySize: number;
        }
        
        /** Information about the request initiator. */
        interface Initiator {
            
            /** Type of this initiator. */
            type: string;
            
            /** Initiator JavaScript stack trace, set for Script only. */
            stack?: Runtime.StackTrace;
            
            /** Initiator URL, set for Parser type only. */
            url?: string;
            
            /** Initiator line number, set for Parser type only. */
            lineNumber?: number;
        }
        
        /** Cookie object */
        interface Cookie {
            
            /** Cookie name. */
            name: string;
            
            /** Cookie value. */
            value: string;
            
            /** Cookie domain. */
            domain: string;
            
            /** Cookie path. */
            path: string;
            
            /** Cookie expires. */
            expires: number;
            
            /** Cookie size. */
            size: integer;
            
            /** True if cookie is http-only. */
            httpOnly: boolean;
            
            /** True if cookie is secure. */
            secure: boolean;
            
            /** True in case of session cookie. */
            session: boolean;
            
            /** Represents the cookies' 'SameSite' status: https://tools.ietf.org/html/draft-west-first-party-cookies */
            sameSite?: string;
        }
        
        /**
         * Enables network tracking, network events will now be delivered to the client.
         * @param maxTotalBufferSize - Buffer size in bytes to use when preserving network payloads (XHRs, etc).
         * @param maxResourceBufferSize - Per-resource buffer size in bytes to use when preserving network payloads (XHRs, etc).
         */
        function enable(maxTotalBufferSize?: integer, maxResourceBufferSize?: integer);
        
        /**
         * Disables network tracking, prevents network events from being sent to the client.
         */
        function disable();
        
        /**
         * Allows overriding user agent with the given string.
         * @param userAgent - User agent to use.
         */
        function setUserAgentOverride(userAgent: string);
        
        /**
         * Specifies whether to always send extra HTTP headers with the requests from this page.
         * @param headers - Map with extra HTTP headers.
         */
        function setExtraHTTPHeaders(headers: Headers);
        
        /**
         * Returns content served for the given request.
         * @param requestId - Identifier of the network request to get content for.
         */
        function getResponseBody(requestId: RequestId);
        
        /**
         * Blocks specific URL from loading.
         * @param url - URL to block.
         */
        function addBlockedURL(url: string);
        
        /**
         * Cancels blocking of a specific URL from loading.
         * @param url - URL to stop blocking.
         */
        function removeBlockedURL(url: string);
        
        /**
         * This method sends a new XMLHttpRequest which is identical to the original one. The following parameters should be identical: method, url, async, request body, extra headers, withCredentials attribute, user, password.
         * @param requestId - Identifier of XHR to replay.
         */
        function replayXHR(requestId: RequestId);
        
        /**
         * Toggles monitoring of XMLHttpRequest. If <code>true</code>, console will receive messages upon each XHR issued.
         * @param enabled - Monitoring enabled state.
         */
        function setMonitoringXHREnabled(enabled: boolean);
        
        /**
         * Tells whether clearing browser cache is supported.
         */
        function canClearBrowserCache();
        
        /**
         * Clears browser cache.
         */
        function clearBrowserCache();
        
        /**
         * Tells whether clearing browser cookies is supported.
         */
        function canClearBrowserCookies();
        
        /**
         * Clears browser cookies.
         */
        function clearBrowserCookies();
        
        /**
         * Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the <code>cookies</code> field.
         */
        function getCookies();
        
        /**
         * Deletes browser cookie with given name, domain and path.
         * @param cookieName - Name of the cookie to remove.
         * @param url - URL to match cooke domain and path.
         */
        function deleteCookie(cookieName: string, url: string);
        
        /**
         * Tells whether emulation of network conditions is supported.
         */
        function canEmulateNetworkConditions();
        
        /**
         * Activates emulation of network conditions.
         * @param offline - True to emulate internet disconnection.
         * @param latency - Additional latency (ms).
         * @param downloadThroughput - Maximal aggregated download throughput.
         * @param uploadThroughput - Maximal aggregated upload throughput.
         */
        function emulateNetworkConditions(offline: boolean, latency: number, downloadThroughput: number, uploadThroughput: number);
        
        /**
         * Toggles ignoring cache for each request. If <code>true</code>, cache will not be used.
         * @param cacheDisabled - Cache disabled state.
         */
        function setCacheDisabled(cacheDisabled: boolean);
        
        /**
         * Toggles ignoring of service worker for each request.
         * @param bypass - Bypass service worker and load from network.
         */
        function setBypassServiceWorker(bypass: boolean);
        
        /**
         * For testing.
         * @param maxTotalSize - Maximum total buffer size.
         * @param maxResourceSize - Maximum per-resource size.
         */
        function setDataSizeLimitsForTest(maxTotalSize: integer, maxResourceSize: integer);
        
        /**
         * Returns details for the given certificate.
         * @param certificateId - ID of the certificate to get details for.
         */
        function getCertificateDetails(certificateId: Security.CertificateId);
        
        /**
         * Displays native dialog with the certificate details.
         * @param certificateId - Certificate id.
         */
        function showCertificateViewer(certificateId: Security.CertificateId);
        
        /**
         * Fired when resource loading priority is changed
         * @param requestId - Request identifier.
         * @param newPriority - New priority
         * @param timestamp - Timestamp.
         */
        function onResourceChangedPriority(handler: (requestId: RequestId, newPriority: ResourcePriority, timestamp: Timestamp) => void);
        
        /**
         * Fired when page is about to send HTTP request.
         * @param requestId - Request identifier.
         * @param frameId - Frame identifier.
         * @param loaderId - Loader identifier.
         * @param documentURL - URL of the document this request is loaded for.
         * @param request - Request data.
         * @param timestamp - Timestamp.
         * @param wallTime - UTC Timestamp.
         * @param initiator - Request initiator.
         * @param redirectResponse - Redirect response data.
         * @param type - Type of this resource.
         */
        function onRequestWillBeSent(handler: (requestId: RequestId, frameId: Page.FrameId, loaderId: LoaderId, documentURL: string, request: Request, timestamp: Timestamp, wallTime: Timestamp, initiator: Initiator, redirectResponse?: Response, type?: Page.ResourceType) => void);
        
        /**
         * Fired if request ended up loading from cache.
         * @param requestId - Request identifier.
         */
        function onRequestServedFromCache(handler: (requestId: RequestId) => void);
        
        /**
         * Fired when HTTP response is available.
         * @param requestId - Request identifier.
         * @param frameId - Frame identifier.
         * @param loaderId - Loader identifier.
         * @param timestamp - Timestamp.
         * @param type - Resource type.
         * @param response - Response data.
         */
        function onResponseReceived(handler: (requestId: RequestId, frameId: Page.FrameId, loaderId: LoaderId, timestamp: Timestamp, type: Page.ResourceType, response: Response) => void);
        
        /**
         * Fired when data chunk was received over the network.
         * @param requestId - Request identifier.
         * @param timestamp - Timestamp.
         * @param dataLength - Data chunk length.
         * @param encodedDataLength - Actual bytes received (might be less than dataLength for compressed encodings).
         */
        function onDataReceived(handler: (requestId: RequestId, timestamp: Timestamp, dataLength: integer, encodedDataLength: integer) => void);
        
        /**
         * Fired when HTTP request has finished loading.
         * @param requestId - Request identifier.
         * @param timestamp - Timestamp.
         * @param encodedDataLength - Total number of bytes received for this request.
         */
        function onLoadingFinished(handler: (requestId: RequestId, timestamp: Timestamp, encodedDataLength: number) => void);
        
        /**
         * Fired when HTTP request has failed to load.
         * @param requestId - Request identifier.
         * @param timestamp - Timestamp.
         * @param type - Resource type.
         * @param errorText - User friendly error message.
         * @param canceled - True if loading was canceled.
         * @param blockedReason - The reason why loading was blocked, if any.
         */
        function onLoadingFailed(handler: (requestId: RequestId, timestamp: Timestamp, type: Page.ResourceType, errorText: string, canceled?: boolean, blockedReason?: BlockedReason) => void);
        
        /**
         * Fired when WebSocket is about to initiate handshake.
         * @param requestId - Request identifier.
         * @param timestamp - Timestamp.
         * @param wallTime - UTC Timestamp.
         * @param request - WebSocket request data.
         */
        function onWebSocketWillSendHandshakeRequest(handler: (requestId: RequestId, timestamp: Timestamp, wallTime: Timestamp, request: WebSocketRequest) => void);
        
        /**
         * Fired when WebSocket handshake response becomes available.
         * @param requestId - Request identifier.
         * @param timestamp - Timestamp.
         * @param response - WebSocket response data.
         */
        function onWebSocketHandshakeResponseReceived(handler: (requestId: RequestId, timestamp: Timestamp, response: WebSocketResponse) => void);
        
        /**
         * Fired upon WebSocket creation.
         * @param requestId - Request identifier.
         * @param url - WebSocket request URL.
         */
        function onWebSocketCreated(handler: (requestId: RequestId, url: string) => void);
        
        /**
         * Fired when WebSocket is closed.
         * @param requestId - Request identifier.
         * @param timestamp - Timestamp.
         */
        function onWebSocketClosed(handler: (requestId: RequestId, timestamp: Timestamp) => void);
        
        /**
         * Fired when WebSocket frame is received.
         * @param requestId - Request identifier.
         * @param timestamp - Timestamp.
         * @param response - WebSocket response data.
         */
        function onWebSocketFrameReceived(handler: (requestId: RequestId, timestamp: Timestamp, response: WebSocketFrame) => void);
        
        /**
         * Fired when WebSocket frame error occurs.
         * @param requestId - Request identifier.
         * @param timestamp - Timestamp.
         * @param errorMessage - WebSocket frame error message.
         */
        function onWebSocketFrameError(handler: (requestId: RequestId, timestamp: Timestamp, errorMessage: string) => void);
        
        /**
         * Fired when WebSocket frame is sent.
         * @param requestId - Request identifier.
         * @param timestamp - Timestamp.
         * @param response - WebSocket response data.
         */
        function onWebSocketFrameSent(handler: (requestId: RequestId, timestamp: Timestamp, response: WebSocketFrame) => void);
        
        /**
         * Fired when EventSource message is received.
         * @param requestId - Request identifier.
         * @param timestamp - Timestamp.
         * @param eventName - Message type.
         * @param eventId - Message identifier.
         * @param data - Message content.
         */
        function onEventSourceMessageReceived(handler: (requestId: RequestId, timestamp: Timestamp, eventName: string, eventId: string, data: string) => void);
    }
    
    namespace Database {
        
        /** Unique identifier of Database object. */
        type DatabaseId = string;
        
        /** Database object. */
        interface Database {
            
            /** Database ID. */
            id: DatabaseId;
            
            /** Database domain. */
            domain: string;
            
            /** Database name. */
            name: string;
            
            /** Database version. */
            version: string;
        }
        
        /** Database error. */
        interface Error {
            
            /** Error message. */
            message: string;
            
            /** Error code. */
            code: integer;
        }
        
        /**
         * Enables database tracking, database events will now be delivered to the client.
         */
        function enable();
        
        /**
         * Disables database tracking, prevents database events from being sent to the client.
         */
        function disable();
        
        /**
         * @param databaseId - 
         */
        function getDatabaseTableNames(databaseId: DatabaseId);
        
        /**
         * @param databaseId - 
         * @param query - 
         */
        function executeSQL(databaseId: DatabaseId, query: string);
        
        /**
         * @param database - 
         */
        function onAddDatabase(handler: (database: Database) => void);
    }
    
    namespace IndexedDB {
        
        /** Database with an array of object stores. */
        interface DatabaseWithObjectStores {
            
            /** Database name. */
            name: string;
            
            /** Database version. */
            version: integer;
            
            /** Object stores in this database. */
            objectStores: ObjectStore[];
        }
        
        /** Object store. */
        interface ObjectStore {
            
            /** Object store name. */
            name: string;
            
            /** Object store key path. */
            keyPath: KeyPath;
            
            /** If true, object store has auto increment flag set. */
            autoIncrement: boolean;
            
            /** Indexes in this object store. */
            indexes: ObjectStoreIndex[];
        }
        
        /** Object store index. */
        interface ObjectStoreIndex {
            
            /** Index name. */
            name: string;
            
            /** Index key path. */
            keyPath: KeyPath;
            
            /** If true, index is unique. */
            unique: boolean;
            
            /** If true, index allows multiple entries for a key. */
            multiEntry: boolean;
        }
        
        /** Key. */
        interface Key {
            
            /** Key type. */
            type: string;
            
            /** Number value. */
            number?: number;
            
            /** String value. */
            string?: string;
            
            /** Date value. */
            date?: number;
            
            /** Array value. */
            array?: Key[];
        }
        
        /** Key range. */
        interface KeyRange {
            
            /** Lower bound. */
            lower?: Key;
            
            /** Upper bound. */
            upper?: Key;
            
            /** If true lower bound is open. */
            lowerOpen: boolean;
            
            /** If true upper bound is open. */
            upperOpen: boolean;
        }
        
        /** Data entry. */
        interface DataEntry {
            
            /** JSON-stringified key object. */
            key: string;
            
            /** JSON-stringified primary key object. */
            primaryKey: string;
            
            /** JSON-stringified value object. */
            value: string;
        }
        
        /** Key path. */
        interface KeyPath {
            
            /** Key path type. */
            type: string;
            
            /** String value. */
            string?: string;
            
            /** Array value. */
            array?: string[];
        }
        
        /**
         * Enables events from backend.
         */
        function enable();
        
        /**
         * Disables events from backend.
         */
        function disable();
        
        /**
         * Requests database names for given security origin.
         * @param securityOrigin - Security origin.
         */
        function requestDatabaseNames(securityOrigin: string);
        
        /**
         * Requests database with given name in given frame.
         * @param securityOrigin - Security origin.
         * @param databaseName - Database name.
         */
        function requestDatabase(securityOrigin: string, databaseName: string);
        
        /**
         * Requests data from object store or index.
         * @param securityOrigin - Security origin.
         * @param databaseName - Database name.
         * @param objectStoreName - Object store name.
         * @param indexName - Index name, empty string for object store data requests.
         * @param skipCount - Number of records to skip.
         * @param pageSize - Number of records to fetch.
         * @param keyRange - Key range.
         */
        function requestData(securityOrigin: string, databaseName: string, objectStoreName: string, indexName: string, skipCount: integer, pageSize: integer, keyRange?: KeyRange);
        
        /**
         * Clears all entries from an object store.
         * @param securityOrigin - Security origin.
         * @param databaseName - Database name.
         * @param objectStoreName - Object store name.
         */
        function clearObjectStore(securityOrigin: string, databaseName: string, objectStoreName: string);
    }
    
    namespace CacheStorage {
        
        /** Unique identifier of the Cache object. */
        type CacheId = string;
        
        /** Data entry. */
        interface DataEntry {
            
            /** Request url spec. */
            request: string;
            
            /** Response stataus text. */
            response: string;
        }
        
        /** Cache identifier. */
        interface Cache {
            
            /** An opaque unique id of the cache. */
            cacheId: CacheId;
            
            /** Security origin of the cache. */
            securityOrigin: string;
            
            /** The name of the cache. */
            cacheName: string;
        }
        
        /**
         * Requests cache names.
         * @param securityOrigin - Security origin.
         */
        function requestCacheNames(securityOrigin: string);
        
        /**
         * Requests data from cache.
         * @param cacheId - ID of cache to get entries from.
         * @param skipCount - Number of records to skip.
         * @param pageSize - Number of records to fetch.
         */
        function requestEntries(cacheId: CacheId, skipCount: integer, pageSize: integer);
        
        /**
         * Deletes a cache.
         * @param cacheId - Id of cache for deletion.
         */
        function deleteCache(cacheId: CacheId);
        
        /**
         * Deletes a cache entry.
         * @param cacheId - Id of cache where the entry will be deleted.
         * @param request - URL spec of the request.
         */
        function deleteEntry(cacheId: CacheId, request: string);
    }
    
    /** Query and modify DOM storage. */
    namespace DOMStorage {
        
        /** DOM Storage identifier. */
        interface StorageId {
            
            /** Security origin for the storage. */
            securityOrigin: string;
            
            /** Whether the storage is local storage (not session storage). */
            isLocalStorage: boolean;
        }
        
        /** DOM Storage item. */
        type Item = string[];
        
        /**
         * Enables storage tracking, storage events will now be delivered to the client.
         */
        function enable();
        
        /**
         * Disables storage tracking, prevents storage events from being sent to the client.
         */
        function disable();
        
        /**
         * @param storageId - 
         */
        function getDOMStorageItems(storageId: StorageId);
        
        /**
         * @param storageId - 
         * @param key - 
         * @param value - 
         */
        function setDOMStorageItem(storageId: StorageId, key: string, value: string);
        
        /**
         * @param storageId - 
         * @param key - 
         */
        function removeDOMStorageItem(storageId: StorageId, key: string);
        
        /**
         * @param storageId - 
         */
        function onDomStorageItemsCleared(handler: (storageId: StorageId) => void);
        
        /**
         * @param storageId - 
         * @param key - 
         */
        function onDomStorageItemRemoved(handler: (storageId: StorageId, key: string) => void);
        
        /**
         * @param storageId - 
         * @param key - 
         * @param newValue - 
         */
        function onDomStorageItemAdded(handler: (storageId: StorageId, key: string, newValue: string) => void);
        
        /**
         * @param storageId - 
         * @param key - 
         * @param oldValue - 
         * @param newValue - 
         */
        function onDomStorageItemUpdated(handler: (storageId: StorageId, key: string, oldValue: string, newValue: string) => void);
    }
    
    namespace ApplicationCache {
        
        /** Detailed application cache resource information. */
        interface ApplicationCacheResource {
            
            /** Resource url. */
            url: string;
            
            /** Resource size. */
            size: integer;
            
            /** Resource type. */
            type: string;
        }
        
        /** Detailed application cache information. */
        interface ApplicationCache {
            
            /** Manifest URL. */
            manifestURL: string;
            
            /** Application cache size. */
            size: number;
            
            /** Application cache creation time. */
            creationTime: number;
            
            /** Application cache update time. */
            updateTime: number;
            
            /** Application cache resources. */
            resources: ApplicationCacheResource[];
        }
        
        /** Frame identifier - manifest URL pair. */
        interface FrameWithManifest {
            
            /** Frame identifier. */
            frameId: Page.FrameId;
            
            /** Manifest URL. */
            manifestURL: string;
            
            /** Application cache status. */
            status: integer;
        }
        
        /**
         * Returns array of frame identifiers with manifest urls for each frame containing a document associated with some application cache.
         */
        function getFramesWithManifests();
        
        /**
         * Enables application cache domain notifications.
         */
        function enable();
        
        /**
         * Returns manifest URL for document in the given frame.
         * @param frameId - Identifier of the frame containing document whose manifest is retrieved.
         */
        function getManifestForFrame(frameId: Page.FrameId);
        
        /**
         * Returns relevant application cache data for the document in given frame.
         * @param frameId - Identifier of the frame containing document whose application cache is retrieved.
         */
        function getApplicationCacheForFrame(frameId: Page.FrameId);
        
        /**
         * @param frameId - Identifier of the frame containing document whose application cache updated status.
         * @param manifestURL - Manifest URL.
         * @param status - Updated application cache status.
         */
        function onApplicationCacheStatusUpdated(handler: (frameId: Page.FrameId, manifestURL: string, status: integer) => void);
        
        /**
         * @param isNowOnline - 
         */
        function onNetworkStateUpdated(handler: (isNowOnline: boolean) => void);
    }
    
    /** This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object that has an <code>id</code>. This <code>id</code> can be used to get additional information on the Node, resolve it into the JavaScript object wrapper, etc. It is important that client receives DOM events only for the nodes that are known to the client. Backend keeps track of the nodes that were sent to the client and never sends the same node twice. It is client's responsibility to collect information about the nodes that were sent to the client.<p>Note that <code>iframe</code> owner elements will return corresponding document elements as their child nodes.</p> */
    namespace DOM {
        
        /** Unique DOM node identifier. */
        type NodeId = integer;
        
        /** Unique DOM node identifier used to reference a node that may not have been pushed to the front-end. */
        type BackendNodeId = integer;
        
        /** Backend node with a friendly name. */
        interface BackendNode {
            
            /** <code>Node</code>'s nodeType. */
            nodeType: integer;
            
            /** <code>Node</code>'s nodeName. */
            nodeName: string;
            
            backendNodeId: BackendNodeId;
        }
        
        /** Pseudo element type. */
        type PseudoType = string;
        
        /** Shadow root type. */
        type ShadowRootType = string;
        
        /** DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type. */
        interface Node {
            
            /** Node identifier that is passed into the rest of the DOM messages as the <code>nodeId</code>. Backend will only push node with given <code>id</code> once. It is aware of all requested nodes and will only fire DOM events for nodes known to the client. */
            nodeId: NodeId;
            
            /** <code>Node</code>'s nodeType. */
            nodeType: integer;
            
            /** <code>Node</code>'s nodeName. */
            nodeName: string;
            
            /** <code>Node</code>'s localName. */
            localName: string;
            
            /** <code>Node</code>'s nodeValue. */
            nodeValue: string;
            
            /** Child count for <code>Container</code> nodes. */
            childNodeCount?: integer;
            
            /** Child nodes of this node when requested with children. */
            children?: Node[];
            
            /** Attributes of the <code>Element</code> node in the form of flat array <code>[name1, value1, name2, value2]</code>. */
            attributes?: string[];
            
            /** Document URL that <code>Document</code> or <code>FrameOwner</code> node points to. */
            documentURL?: string;
            
            /** Base URL that <code>Document</code> or <code>FrameOwner</code> node uses for URL completion. */
            baseURL?: string;
            
            /** <code>DocumentType</code>'s publicId. */
            publicId?: string;
            
            /** <code>DocumentType</code>'s systemId. */
            systemId?: string;
            
            /** <code>DocumentType</code>'s internalSubset. */
            internalSubset?: string;
            
            /** <code>Document</code>'s XML version in case of XML documents. */
            xmlVersion?: string;
            
            /** <code>Attr</code>'s name. */
            name?: string;
            
            /** <code>Attr</code>'s value. */
            value?: string;
            
            /** Pseudo element type for this node. */
            pseudoType?: PseudoType;
            
            /** Shadow root type. */
            shadowRootType?: ShadowRootType;
            
            /** Frame ID for frame owner elements. */
            frameId?: Page.FrameId;
            
            /** Content document for frame owner elements. */
            contentDocument?: Node;
            
            /** Shadow root list for given element host. */
            shadowRoots?: Node[];
            
            /** Content document fragment for template elements. */
            templateContent?: Node;
            
            /** Pseudo elements associated with this node. */
            pseudoElements?: Node[];
            
            /** Import document for the HTMLImport links. */
            importedDocument?: Node;
            
            /** Distributed nodes for given insertion point. */
            distributedNodes?: BackendNode[];
        }
        
        /** A structure holding an RGBA color. */
        interface RGBA {
            
            /** The red component, in the [0-255] range. */
            r: integer;
            
            /** The green component, in the [0-255] range. */
            g: integer;
            
            /** The blue component, in the [0-255] range. */
            b: integer;
            
            /** The alpha component, in the [0-1] range (default: 1). */
            a?: number;
        }
        
        /** An array of quad vertices, x immediately followed by y for each point, points clock-wise. */
        type Quad = number[];
        
        /** Box model. */
        interface BoxModel {
            
            /** Content box */
            content: Quad;
            
            /** Padding box */
            padding: Quad;
            
            /** Border box */
            border: Quad;
            
            /** Margin box */
            margin: Quad;
            
            /** Node width */
            width: integer;
            
            /** Node height */
            height: integer;
            
            /** Shape outside coordinates */
            shapeOutside?: ShapeOutsideInfo;
        }
        
        /** CSS Shape Outside details. */
        interface ShapeOutsideInfo {
            
            /** Shape bounds */
            bounds: Quad;
            
            /** Shape coordinate details */
            shape: any[];
            
            /** Margin shape bounds */
            marginShape: any[];
        }
        
        /** Rectangle. */
        interface Rect {
            
            /** X coordinate */
            x: number;
            
            /** Y coordinate */
            y: number;
            
            /** Rectangle width */
            width: number;
            
            /** Rectangle height */
            height: number;
        }
        
        /** Configuration data for the highlighting of page elements. */
        interface HighlightConfig {
            
            /** Whether the node info tooltip should be shown (default: false). */
            showInfo?: boolean;
            
            /** Whether the rulers should be shown (default: false). */
            showRulers?: boolean;
            
            /** Whether the extension lines from node to the rulers should be shown (default: false). */
            showExtensionLines?: boolean;
            
            displayAsMaterial?: boolean;
            
            /** The content box highlight fill color (default: transparent). */
            contentColor?: RGBA;
            
            /** The padding highlight fill color (default: transparent). */
            paddingColor?: RGBA;
            
            /** The border highlight fill color (default: transparent). */
            borderColor?: RGBA;
            
            /** The margin highlight fill color (default: transparent). */
            marginColor?: RGBA;
            
            /** The event target element highlight fill color (default: transparent). */
            eventTargetColor?: RGBA;
            
            /** The shape outside fill color (default: transparent). */
            shapeColor?: RGBA;
            
            /** The shape margin fill color (default: transparent). */
            shapeMarginColor?: RGBA;
            
            /** Selectors to highlight relevant nodes. */
            selectorList?: string;
        }
        
        type InspectMode = string;
        
        /**
         * Enables DOM agent for the given page.
         */
        function enable();
        
        /**
         * Disables DOM agent for the given page.
         */
        function disable();
        
        /**
         * Returns the root DOM node to the caller.
         */
        function getDocument();
        
        /**
         * Requests that children of the node with given id are returned to the caller in form of <code>setChildNodes</code> events where not only immediate children are retrieved, but all children down to the specified depth.
         * @param nodeId - Id of the node to get children for.
         * @param depth - The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
         */
        function requestChildNodes(nodeId: NodeId, depth?: integer);
        
        /**
         * Executes <code>querySelector</code> on a given node.
         * @param nodeId - Id of the node to query upon.
         * @param selector - Selector string.
         */
        function querySelector(nodeId: NodeId, selector: string);
        
        /**
         * Executes <code>querySelectorAll</code> on a given node.
         * @param nodeId - Id of the node to query upon.
         * @param selector - Selector string.
         */
        function querySelectorAll(nodeId: NodeId, selector: string);
        
        /**
         * Sets node name for a node with given id.
         * @param nodeId - Id of the node to set name for.
         * @param name - New node's name.
         */
        function setNodeName(nodeId: NodeId, name: string);
        
        /**
         * Sets node value for a node with given id.
         * @param nodeId - Id of the node to set value for.
         * @param value - New node's value.
         */
        function setNodeValue(nodeId: NodeId, value: string);
        
        /**
         * Removes node with given id.
         * @param nodeId - Id of the node to remove.
         */
        function removeNode(nodeId: NodeId);
        
        /**
         * Sets attribute for an element with given id.
         * @param nodeId - Id of the element to set attribute for.
         * @param name - Attribute name.
         * @param value - Attribute value.
         */
        function setAttributeValue(nodeId: NodeId, name: string, value: string);
        
        /**
         * Sets attributes on element with given id. This method is useful when user edits some existing attribute value and types in several attribute name/value pairs.
         * @param nodeId - Id of the element to set attributes for.
         * @param text - Text with a number of attributes. Will parse this text using HTML parser.
         * @param name - Attribute name to replace with new attributes derived from text in case text parsed successfully.
         */
        function setAttributesAsText(nodeId: NodeId, text: string, name?: string);
        
        /**
         * Removes attribute with given name from an element with given id.
         * @param nodeId - Id of the element to remove attribute from.
         * @param name - Name of the attribute to remove.
         */
        function removeAttribute(nodeId: NodeId, name: string);
        
        /**
         * Returns node's HTML markup.
         * @param nodeId - Id of the node to get markup for.
         */
        function getOuterHTML(nodeId: NodeId);
        
        /**
         * Sets node HTML markup, returns new node id.
         * @param nodeId - Id of the node to set markup for.
         * @param outerHTML - Outer HTML markup to set.
         */
        function setOuterHTML(nodeId: NodeId, outerHTML: string);
        
        /**
         * Searches for a given string in the DOM tree. Use <code>getSearchResults</code> to access search results or <code>cancelSearch</code> to end this search session.
         * @param query - Plain text or query selector or XPath search query.
         * @param includeUserAgentShadowDOM - True to search in user agent shadow DOM.
         */
        function performSearch(query: string, includeUserAgentShadowDOM?: boolean);
        
        /**
         * Returns search results from given <code>fromIndex</code> to given <code>toIndex</code> from the sarch with the given identifier.
         * @param searchId - Unique search session identifier.
         * @param fromIndex - Start index of the search result to be returned.
         * @param toIndex - End index of the search result to be returned.
         */
        function getSearchResults(searchId: string, fromIndex: integer, toIndex: integer);
        
        /**
         * Discards search results from the session with the given id. <code>getSearchResults</code> should no longer be called for that search.
         * @param searchId - Unique search session identifier.
         */
        function discardSearchResults(searchId: string);
        
        /**
         * Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of <code>setChildNodes</code> notifications.
         * @param objectId - JavaScript object id to convert into node.
         */
        function requestNode(objectId: Runtime.RemoteObjectId);
        
        /**
         * Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted. Backend then generates 'inspectNodeRequested' event upon element selection.
         * @param mode - Set an inspection mode.
         * @param highlightConfig - A descriptor for the highlight appearance of hovered-over nodes. May be omitted if <code>enabled == false</code>.
         */
        function setInspectMode(mode: InspectMode, highlightConfig?: HighlightConfig);
        
        /**
         * Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.
         * @param x - X coordinate
         * @param y - Y coordinate
         * @param width - Rectangle width
         * @param height - Rectangle height
         * @param color - The highlight fill color (default: transparent).
         * @param outlineColor - The highlight outline color (default: transparent).
         */
        function highlightRect(x: integer, y: integer, width: integer, height: integer, color?: RGBA, outlineColor?: RGBA);
        
        /**
         * Highlights given quad. Coordinates are absolute with respect to the main frame viewport.
         * @param quad - Quad to highlight
         * @param color - The highlight fill color (default: transparent).
         * @param outlineColor - The highlight outline color (default: transparent).
         */
        function highlightQuad(quad: Quad, color?: RGBA, outlineColor?: RGBA);
        
        /**
         * Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified.
         * @param highlightConfig - A descriptor for the highlight appearance.
         * @param nodeId - Identifier of the node to highlight.
         * @param backendNodeId - Identifier of the backend node to highlight.
         * @param objectId - JavaScript object id of the node to be highlighted.
         */
        function highlightNode(highlightConfig: HighlightConfig, nodeId?: NodeId, backendNodeId?: BackendNodeId, objectId?: Runtime.RemoteObjectId);
        
        /**
         * Hides DOM node highlight.
         */
        function hideHighlight();
        
        /**
         * Highlights owner element of the frame with given id.
         * @param frameId - Identifier of the frame to highlight.
         * @param contentColor - The content box highlight fill color (default: transparent).
         * @param contentOutlineColor - The content box highlight outline color (default: transparent).
         */
        function highlightFrame(frameId: Page.FrameId, contentColor?: RGBA, contentOutlineColor?: RGBA);
        
        /**
         * Requests that the node is sent to the caller given its path. // FIXME, use XPath
         * @param path - Path to node in the proprietary format.
         */
        function pushNodeByPathToFrontend(path: string);
        
        /**
         * Requests that a batch of nodes is sent to the caller given their backend node ids.
         * @param backendNodeIds - The array of backend node ids.
         */
        function pushNodesByBackendIdsToFrontend(backendNodeIds: BackendNodeId[]);
        
        /**
         * Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).
         * @param nodeId - DOM node id to be accessible by means of $x command line API.
         */
        function setInspectedNode(nodeId: NodeId);
        
        /**
         * Resolves JavaScript node object for given node id.
         * @param nodeId - Id of the node to resolve.
         * @param objectGroup - Symbolic group name that can be used to release multiple objects.
         */
        function resolveNode(nodeId: NodeId, objectGroup?: string);
        
        /**
         * Returns attributes for the specified node.
         * @param nodeId - Id of the node to retrieve attibutes for.
         */
        function getAttributes(nodeId: NodeId);
        
        /**
         * Creates a deep copy of the specified node and places it into the target container before the given anchor.
         * @param nodeId - Id of the node to copy.
         * @param targetNodeId - Id of the element to drop the copy into.
         * @param insertBeforeNodeId - Drop the copy before this node (if absent, the copy becomes the last child of <code>targetNodeId</code>).
         */
        function copyTo(nodeId: NodeId, targetNodeId: NodeId, insertBeforeNodeId?: NodeId);
        
        /**
         * Moves node into the new container, places it before the given anchor.
         * @param nodeId - Id of the node to move.
         * @param targetNodeId - Id of the element to drop the moved node into.
         * @param insertBeforeNodeId - Drop node before this one (if absent, the moved node becomes the last child of <code>targetNodeId</code>).
         */
        function moveTo(nodeId: NodeId, targetNodeId: NodeId, insertBeforeNodeId?: NodeId);
        
        /**
         * Undoes the last performed action.
         */
        function undo();
        
        /**
         * Re-does the last undone action.
         */
        function redo();
        
        /**
         * Marks last undoable state.
         */
        function markUndoableState();
        
        /**
         * Focuses the given element.
         * @param nodeId - Id of the node to focus.
         */
        function focus(nodeId: NodeId);
        
        /**
         * Sets files for the given file input element.
         * @param nodeId - Id of the file input node to set files for.
         * @param files - Array of file paths to set.
         */
        function setFileInputFiles(nodeId: NodeId, files: string[]);
        
        /**
         * Returns boxes for the currently selected nodes.
         * @param nodeId - Id of the node to get box model for.
         */
        function getBoxModel(nodeId: NodeId);
        
        /**
         * Returns node id at given location.
         * @param x - X coordinate.
         * @param y - Y coordinate.
         */
        function getNodeForLocation(x: integer, y: integer);
        
        /**
         * Returns the id of the nearest ancestor that is a relayout boundary.
         * @param nodeId - Id of the node.
         */
        function getRelayoutBoundary(nodeId: NodeId);
        
        /**
         * For testing.
         * @param nodeId - Id of the node to get highlight object for.
         */
        function getHighlightObjectForTest(nodeId: NodeId);
        
        /**
         * Fired when <code>Document</code> has been totally updated. Node ids are no longer valid.
         */
        function onDocumentUpdated(handler: () => void);
        
        /**
         * Fired when the node should be inspected. This happens after call to <code>setInspectMode</code>.
         * @param backendNodeId - Id of the node to inspect.
         */
        function onInspectNodeRequested(handler: (backendNodeId: BackendNodeId) => void);
        
        /**
         * Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids.
         * @param parentId - Parent node id to populate with children.
         * @param nodes - Child nodes array.
         */
        function onSetChildNodes(handler: (parentId: NodeId, nodes: Node[]) => void);
        
        /**
         * Fired when <code>Element</code>'s attribute is modified.
         * @param nodeId - Id of the node that has changed.
         * @param name - Attribute name.
         * @param value - Attribute value.
         */
        function onAttributeModified(handler: (nodeId: NodeId, name: string, value: string) => void);
        
        /**
         * Fired when <code>Element</code>'s attribute is removed.
         * @param nodeId - Id of the node that has changed.
         * @param name - A ttribute name.
         */
        function onAttributeRemoved(handler: (nodeId: NodeId, name: string) => void);
        
        /**
         * Fired when <code>Element</code>'s inline style is modified via a CSS property modification.
         * @param nodeIds - Ids of the nodes for which the inline styles have been invalidated.
         */
        function onInlineStyleInvalidated(handler: (nodeIds: NodeId[]) => void);
        
        /**
         * Mirrors <code>DOMCharacterDataModified</code> event.
         * @param nodeId - Id of the node that has changed.
         * @param characterData - New text value.
         */
        function onCharacterDataModified(handler: (nodeId: NodeId, characterData: string) => void);
        
        /**
         * Fired when <code>Container</code>'s child node count has changed.
         * @param nodeId - Id of the node that has changed.
         * @param childNodeCount - New node count.
         */
        function onChildNodeCountUpdated(handler: (nodeId: NodeId, childNodeCount: integer) => void);
        
        /**
         * Mirrors <code>DOMNodeInserted</code> event.
         * @param parentNodeId - Id of the node that has changed.
         * @param previousNodeId - If of the previous siblint.
         * @param node - Inserted node data.
         */
        function onChildNodeInserted(handler: (parentNodeId: NodeId, previousNodeId: NodeId, node: Node) => void);
        
        /**
         * Mirrors <code>DOMNodeRemoved</code> event.
         * @param parentNodeId - Parent id.
         * @param nodeId - Id of the node that has been removed.
         */
        function onChildNodeRemoved(handler: (parentNodeId: NodeId, nodeId: NodeId) => void);
        
        /**
         * Called when shadow root is pushed into the element.
         * @param hostId - Host element id.
         * @param root - Shadow root.
         */
        function onShadowRootPushed(handler: (hostId: NodeId, root: Node) => void);
        
        /**
         * Called when shadow root is popped from the element.
         * @param hostId - Host element id.
         * @param rootId - Shadow root id.
         */
        function onShadowRootPopped(handler: (hostId: NodeId, rootId: NodeId) => void);
        
        /**
         * Called when a pseudo element is added to an element.
         * @param parentId - Pseudo element's parent element id.
         * @param pseudoElement - The added pseudo element.
         */
        function onPseudoElementAdded(handler: (parentId: NodeId, pseudoElement: Node) => void);
        
        /**
         * Called when a pseudo element is removed from an element.
         * @param parentId - Pseudo element's parent element id.
         * @param pseudoElementId - The removed pseudo element id.
         */
        function onPseudoElementRemoved(handler: (parentId: NodeId, pseudoElementId: NodeId) => void);
        
        /**
         * Called when distrubution is changed.
         * @param insertionPointId - Insertion point where distrubuted nodes were updated.
         * @param distributedNodes - Distributed nodes for given insertion point.
         */
        function onDistributedNodesUpdated(handler: (insertionPointId: NodeId, distributedNodes: BackendNode[]) => void);
        
        /**
         * @param nodeId - 
         */
        function onNodeHighlightRequested(handler: (nodeId: NodeId) => void);
    }
    
    /** This domain exposes CSS read/write operations. All CSS objects (stylesheets, rules, and styles) have an associated <code>id</code> used in subsequent operations on the related object. Each object type has a specific <code>id</code> structure, and those are not interchangeable between objects of different kinds. CSS objects can be loaded using the <code>get*ForNode()</code> calls (which accept a DOM node id). A client can also discover all the existing stylesheets with the <code>getAllStyleSheets()</code> method (or keeping track of the <code>styleSheetAdded</code>/<code>styleSheetRemoved</code> events) and subsequently load the required stylesheet contents using the <code>getStyleSheet[Text]()</code> methods. */
    namespace CSS {
        
        type StyleSheetId = string;
        
        /** Stylesheet type: "injected" for stylesheets injected via extension, "user-agent" for user-agent stylesheets, "inspector" for stylesheets created by the inspector (i.e. those holding the "via inspector" rules), "regular" for regular stylesheets. */
        type StyleSheetOrigin = string;
        
        /** CSS rule collection for a single pseudo style. */
        interface PseudoElementMatches {
            
            /** Pseudo element type. */
            pseudoType: DOM.PseudoType;
            
            /** Matches of CSS rules applicable to the pseudo style. */
            matches: RuleMatch[];
        }
        
        /** Inherited CSS rule collection from ancestor node. */
        interface InheritedStyleEntry {
            
            /** The ancestor node's inline style, if any, in the style inheritance chain. */
            inlineStyle?: CSSStyle;
            
            /** Matches of CSS rules matching the ancestor node in the style inheritance chain. */
            matchedCSSRules: RuleMatch[];
        }
        
        /** Match data for a CSS rule. */
        interface RuleMatch {
            
            /** CSS rule in the match. */
            rule: CSSRule;
            
            /** Matching selector indices in the rule's selectorList selectors (0-based). */
            matchingSelectors: integer[];
        }
        
        /** Data for a simple selector (these are delimited by commas in a selector list). */
        interface Value {
            
            /** Value text. */
            text: string;
            
            /** Value range in the underlying resource (if available). */
            range?: SourceRange;
        }
        
        /** Selector list data. */
        interface SelectorList {
            
            /** Selectors in the list. */
            selectors: Value[];
            
            /** Rule selector text. */
            text: string;
        }
        
        /** CSS stylesheet metainformation. */
        interface CSSStyleSheetHeader {
            
            /** The stylesheet identifier. */
            styleSheetId: StyleSheetId;
            
            /** Owner frame identifier. */
            frameId: Page.FrameId;
            
            /** Stylesheet resource URL. */
            sourceURL: string;
            
            /** URL of source map associated with the stylesheet (if any). */
            sourceMapURL?: string;
            
            /** Stylesheet origin. */
            origin: StyleSheetOrigin;
            
            /** Stylesheet title. */
            title: string;
            
            /** The backend id for the owner node of the stylesheet. */
            ownerNode?: DOM.BackendNodeId;
            
            /** Denotes whether the stylesheet is disabled. */
            disabled: boolean;
            
            /** Whether the sourceURL field value comes from the sourceURL comment. */
            hasSourceURL?: boolean;
            
            /** Whether this stylesheet is created for STYLE tag by parser. This flag is not set for document.written STYLE tags. */
            isInline: boolean;
            
            /** Line offset of the stylesheet within the resource (zero based). */
            startLine: number;
            
            /** Column offset of the stylesheet within the resource (zero based). */
            startColumn: number;
        }
        
        /** CSS rule representation. */
        interface CSSRule {
            
            /** The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from. */
            styleSheetId?: StyleSheetId;
            
            /** Rule selector data. */
            selectorList: SelectorList;
            
            /** Parent stylesheet's origin. */
            origin: StyleSheetOrigin;
            
            /** Associated style declaration. */
            style: CSSStyle;
            
            /** Media list array (for rules involving media queries). The array enumerates media queries starting with the innermost one, going outwards. */
            media?: CSSMedia[];
        }
        
        /** Text range within a resource. All numbers are zero-based. */
        interface SourceRange {
            
            /** Start line of range. */
            startLine: integer;
            
            /** Start column of range (inclusive). */
            startColumn: integer;
            
            /** End line of range */
            endLine: integer;
            
            /** End column of range (exclusive). */
            endColumn: integer;
        }
        
        interface ShorthandEntry {
            
            /** Shorthand name. */
            name: string;
            
            /** Shorthand value. */
            value: string;
            
            /** Whether the property has "!important" annotation (implies <code>false</code> if absent). */
            important?: boolean;
        }
        
        interface CSSComputedStyleProperty {
            
            /** Computed style property name. */
            name: string;
            
            /** Computed style property value. */
            value: string;
        }
        
        /** CSS style representation. */
        interface CSSStyle {
            
            /** The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from. */
            styleSheetId?: StyleSheetId;
            
            /** CSS properties in the style. */
            cssProperties: CSSProperty[];
            
            /** Computed values for all shorthands found in the style. */
            shorthandEntries: ShorthandEntry[];
            
            /** Style declaration text (if available). */
            cssText?: string;
            
            /** Style declaration range in the enclosing stylesheet (if available). */
            range?: SourceRange;
        }
        
        /** CSS property declaration data. */
        interface CSSProperty {
            
            /** The property name. */
            name: string;
            
            /** The property value. */
            value: string;
            
            /** Whether the property has "!important" annotation (implies <code>false</code> if absent). */
            important?: boolean;
            
            /** Whether the property is implicit (implies <code>false</code> if absent). */
            implicit?: boolean;
            
            /** The full property text as specified in the style. */
            text?: string;
            
            /** Whether the property is understood by the browser (implies <code>true</code> if absent). */
            parsedOk?: boolean;
            
            /** Whether the property is disabled by the user (present for source-based properties only). */
            disabled?: boolean;
            
            /** The entire property range in the enclosing style declaration (if available). */
            range?: SourceRange;
        }
        
        /** CSS media rule descriptor. */
        interface CSSMedia {
            
            /** Media query text. */
            text: string;
            
            /** Source of the media query: "mediaRule" if specified by a @media rule, "importRule" if specified by an @import rule, "linkedSheet" if specified by a "media" attribute in a linked stylesheet's LINK tag, "inlineSheet" if specified by a "media" attribute in an inline stylesheet's STYLE tag. */
            source: string;
            
            /** URL of the document containing the media query description. */
            sourceURL?: string;
            
            /** The associated rule (@media or @import) header range in the enclosing stylesheet (if available). */
            range?: SourceRange;
            
            /** Identifier of the stylesheet containing this object (if exists). */
            styleSheetId?: StyleSheetId;
            
            /** Array of media queries. */
            mediaList?: MediaQuery[];
        }
        
        /** Media query descriptor. */
        interface MediaQuery {
            
            /** Array of media query expressions. */
            expressions: MediaQueryExpression[];
            
            /** Whether the media query condition is satisfied. */
            active: boolean;
        }
        
        /** Media query expression descriptor. */
        interface MediaQueryExpression {
            
            /** Media query expression value. */
            value: number;
            
            /** Media query expression units. */
            unit: string;
            
            /** Media query expression feature. */
            feature: string;
            
            /** The associated range of the value text in the enclosing stylesheet (if available). */
            valueRange?: SourceRange;
            
            /** Computed length of media query expression (if applicable). */
            computedLength?: number;
        }
        
        /** Information about amount of glyphs that were rendered with given font. */
        interface PlatformFontUsage {
            
            /** Font's family name reported by platform. */
            familyName: string;
            
            /** Indicates if the font was downloaded or resolved locally. */
            isCustomFont: boolean;
            
            /** Amount of glyphs that were rendered with this font. */
            glyphCount: number;
        }
        
        /** CSS keyframes rule representation. */
        interface CSSKeyframesRule {
            
            /** Animation name. */
            animationName: Value;
            
            /** List of keyframes. */
            keyframes: CSSKeyframeRule[];
        }
        
        /** CSS keyframe rule representation. */
        interface CSSKeyframeRule {
            
            /** The css style sheet identifier (absent for user agent stylesheet and user-specified stylesheet rules) this rule came from. */
            styleSheetId?: StyleSheetId;
            
            /** Parent stylesheet's origin. */
            origin: StyleSheetOrigin;
            
            /** Associated key text. */
            keyText: Value;
            
            /** Associated style declaration. */
            style: CSSStyle;
        }
        
        /** A descriptor of operation to mutate style declaration text. */
        interface StyleDeclarationEdit {
            
            /** The css style sheet identifier. */
            styleSheetId: StyleSheetId;
            
            /** The range of the style text in the enclosing stylesheet. */
            range: SourceRange;
            
            /** New style text. */
            text: string;
        }
        
        /**
         * Enables the CSS agent for the given page. Clients should not assume that the CSS agent has been enabled until the result of this command is received.
         */
        function enable();
        
        /**
         * Disables the CSS agent for the given page.
         */
        function disable();
        
        /**
         * Returns requested styles for a DOM node identified by <code>nodeId</code>.
         * @param nodeId - 
         */
        function getMatchedStylesForNode(nodeId: DOM.NodeId);
        
        /**
         * Returns the styles defined inline (explicitly in the "style" attribute and implicitly, using DOM attributes) for a DOM node identified by <code>nodeId</code>.
         * @param nodeId - 
         */
        function getInlineStylesForNode(nodeId: DOM.NodeId);
        
        /**
         * Returns the computed style for a DOM node identified by <code>nodeId</code>.
         * @param nodeId - 
         */
        function getComputedStyleForNode(nodeId: DOM.NodeId);
        
        /**
         * Requests information about platform fonts which we used to render child TextNodes in the given node.
         * @param nodeId - 
         */
        function getPlatformFontsForNode(nodeId: DOM.NodeId);
        
        /**
         * Returns the current textual content and the URL for a stylesheet.
         * @param styleSheetId - 
         */
        function getStyleSheetText(styleSheetId: StyleSheetId);
        
        /**
         * Sets the new stylesheet text.
         * @param styleSheetId - 
         * @param text - 
         */
        function setStyleSheetText(styleSheetId: StyleSheetId, text: string);
        
        /**
         * Modifies the rule selector.
         * @param styleSheetId - 
         * @param range - 
         * @param selector - 
         */
        function setRuleSelector(styleSheetId: StyleSheetId, range: SourceRange, selector: string);
        
        /**
         * Modifies the keyframe rule key text.
         * @param styleSheetId - 
         * @param range - 
         * @param keyText - 
         */
        function setKeyframeKey(styleSheetId: StyleSheetId, range: SourceRange, keyText: string);
        
        /**
         * Applies specified style edits one after another in the given order.
         * @param edits - 
         */
        function setStyleTexts(edits: StyleDeclarationEdit[]);
        
        /**
         * Modifies the rule selector.
         * @param styleSheetId - 
         * @param range - 
         * @param text - 
         */
        function setMediaText(styleSheetId: StyleSheetId, range: SourceRange, text: string);
        
        /**
         * Creates a new special "via-inspector" stylesheet in the frame with given <code>frameId</code>.
         * @param frameId - Identifier of the frame where "via-inspector" stylesheet should be created.
         */
        function createStyleSheet(frameId: Page.FrameId);
        
        /**
         * Inserts a new rule with the given <code>ruleText</code> in a stylesheet with given <code>styleSheetId</code>, at the position specified by <code>location</code>.
         * @param styleSheetId - The css style sheet identifier where a new rule should be inserted.
         * @param ruleText - The text of a new rule.
         * @param location - Text position of a new rule in the target style sheet.
         */
        function addRule(styleSheetId: StyleSheetId, ruleText: string, location: SourceRange);
        
        /**
         * Ensures that the given node will have specified pseudo-classes whenever its style is computed by the browser.
         * @param nodeId - The element id for which to force the pseudo state.
         * @param forcedPseudoClasses - Element pseudo classes to force when computing the element's style.
         */
        function forcePseudoState(nodeId: DOM.NodeId, forcedPseudoClasses: string[]);
        
        /**
         * Returns all media queries parsed by the rendering engine.
         */
        function getMediaQueries();
        
        /**
         * Find a rule with the given active property for the given node and set the new value for this property
         * @param nodeId - The element id for which to set property.
         * @param propertyName - 
         * @param value - 
         */
        function setEffectivePropertyValueForNode(nodeId: DOM.NodeId, propertyName: string, value: string);
        
        /**
         * @param nodeId - Id of the node to get background colors for.
         */
        function getBackgroundColors(nodeId: DOM.NodeId);
        
        /**
         * Fires whenever a MediaQuery result changes (for example, after a browser window has been resized.) The current implementation considers only viewport-dependent media features.
         */
        function onMediaQueryResultChanged(handler: () => void);
        
        /**
         * Fired whenever a stylesheet is changed as a result of the client operation.
         * @param styleSheetId - 
         */
        function onStyleSheetChanged(handler: (styleSheetId: StyleSheetId) => void);
        
        /**
         * Fired whenever an active document stylesheet is added.
         * @param header - Added stylesheet metainfo.
         */
        function onStyleSheetAdded(handler: (header: CSSStyleSheetHeader) => void);
        
        /**
         * Fired whenever an active document stylesheet is removed.
         * @param styleSheetId - Identifier of the removed stylesheet.
         */
        function onStyleSheetRemoved(handler: (styleSheetId: StyleSheetId) => void);
        
        /**
         * @param styleSheetId - Identifier of the stylesheet where the modification occurred.
         * @param changeRange - Range where the modification occurred.
         */
        function onLayoutEditorChange(handler: (styleSheetId: StyleSheetId, changeRange: SourceRange) => void);
    }
    
    /** Input/Output operations for streams produced by DevTools. */
    namespace IO {
        
        type StreamHandle = string;
        
        /**
         * Read a chunk of the stream
         * @param handle - Handle of the stream to read.
         * @param offset - Seek to the specified offset before reading (if not specificed, proceed with offset following the last read).
         * @param size - Maximum number of bytes to read (left upon the agent discretion if not specified).
         */
        function read(handle: StreamHandle, offset?: integer, size?: integer);
        
        /**
         * Close the stream, discard any temporary backing storage.
         * @param handle - Handle of the stream to close.
         */
        function close(handle: StreamHandle);
    }
    
    /** DOM debugging allows setting breakpoints on particular DOM operations and events. JavaScript execution will stop on these operations as if there was a regular breakpoint set. */
    namespace DOMDebugger {
        
        /** DOM breakpoint type. */
        type DOMBreakpointType = string;
        
        /** Object event listener. */
        interface EventListener {
            
            /** <code>EventListener</code>'s type. */
            type: string;
            
            /** <code>EventListener</code>'s useCapture. */
            useCapture: boolean;
            
            /** <code>EventListener</code>'s passive flag. */
            passive: boolean;
            
            /** Handler code location. */
            location: Debugger.Location;
            
            /** Event handler function value. */
            handler?: Runtime.RemoteObject;
            
            /** Event original handler function value. */
            originalHandler?: Runtime.RemoteObject;
            
            /** Event listener remove function. */
            removeFunction?: Runtime.RemoteObject;
        }
        
        /**
         * Sets breakpoint on particular operation with DOM.
         * @param nodeId - Identifier of the node to set breakpoint on.
         * @param type - Type of the operation to stop upon.
         */
        function setDOMBreakpoint(nodeId: DOM.NodeId, type: DOMBreakpointType);
        
        /**
         * Removes DOM breakpoint that was set using <code>setDOMBreakpoint</code>.
         * @param nodeId - Identifier of the node to remove breakpoint from.
         * @param type - Type of the breakpoint to remove.
         */
        function removeDOMBreakpoint(nodeId: DOM.NodeId, type: DOMBreakpointType);
        
        /**
         * Sets breakpoint on particular DOM event.
         * @param eventName - DOM Event name to stop on (any DOM event will do).
         * @param targetName - EventTarget interface name to stop on. If equal to <code>"*"</code> or not provided, will stop on any EventTarget.
         */
        function setEventListenerBreakpoint(eventName: string, targetName?: string);
        
        /**
         * Removes breakpoint on particular DOM event.
         * @param eventName - Event name.
         * @param targetName - EventTarget interface name.
         */
        function removeEventListenerBreakpoint(eventName: string, targetName?: string);
        
        /**
         * Sets breakpoint on particular native event.
         * @param eventName - Instrumentation name to stop on.
         */
        function setInstrumentationBreakpoint(eventName: string);
        
        /**
         * Removes breakpoint on particular native event.
         * @param eventName - Instrumentation name to stop on.
         */
        function removeInstrumentationBreakpoint(eventName: string);
        
        /**
         * Sets breakpoint on XMLHttpRequest.
         * @param url - Resource URL substring. All XHRs having this substring in the URL will get stopped upon.
         */
        function setXHRBreakpoint(url: string);
        
        /**
         * Removes breakpoint from XMLHttpRequest.
         * @param url - Resource URL substring.
         */
        function removeXHRBreakpoint(url: string);
        
        /**
         * Returns event listeners of the given object.
         * @param objectId - Identifier of the object to return listeners for.
         */
        function getEventListeners(objectId: Runtime.RemoteObjectId);
    }
    
    namespace Worker {
        
        function enable();
        
        function disable();
        
        /**
         * @param workerId - 
         * @param message - 
         */
        function sendMessageToWorker(workerId: string, message: string);
        
        /**
         * @param value - 
         */
        function setWaitForDebuggerOnStart(value: boolean);
        
        /**
         * @param workerId - 
         * @param url - 
         * @param waitingForDebugger - 
         */
        function onWorkerCreated(handler: (workerId: string, url: string, waitingForDebugger: boolean) => void);
        
        /**
         * @param workerId - 
         */
        function onWorkerTerminated(handler: (workerId: string) => void);
        
        /**
         * @param workerId - 
         * @param message - 
         */
        function onDispatchMessageFromWorker(handler: (workerId: string, message: string) => void);
    }
    
    namespace ServiceWorker {
        
        /** ServiceWorker registration. */
        interface ServiceWorkerRegistration {
            
            registrationId: string;
            
            scopeURL: string;
            
            isDeleted: boolean;
        }
        
        type ServiceWorkerVersionRunningStatus = string;
        
        type ServiceWorkerVersionStatus = string;
        
        type TargetID = string;
        
        /** ServiceWorker version. */
        interface ServiceWorkerVersion {
            
            versionId: string;
            
            registrationId: string;
            
            scriptURL: string;
            
            runningStatus: ServiceWorkerVersionRunningStatus;
            
            status: ServiceWorkerVersionStatus;
            
            /** The Last-Modified header value of the main script. */
            scriptLastModified?: number;
            
            /** The time at which the response headers of the main script were received from the server.  For cached script it is the last time the cache entry was validated. */
            scriptResponseTime?: number;
            
            controlledClients?: TargetID[];
        }
        
        /** ServiceWorker error message. */
        interface ServiceWorkerErrorMessage {
            
            errorMessage: string;
            
            registrationId: string;
            
            versionId: string;
            
            sourceURL: string;
            
            lineNumber: integer;
            
            columnNumber: integer;
        }
        
        interface TargetInfo {
            
            id: TargetID;
            
            type: string;
            
            title: string;
            
            url: string;
        }
        
        function enable();
        
        function disable();
        
        /**
         * @param workerId - 
         * @param message - 
         */
        function sendMessage(workerId: string, message: string);
        
        /**
         * @param workerId - 
         */
        function stop(workerId: string);
        
        /**
         * @param scopeURL - 
         */
        function unregister(scopeURL: string);
        
        /**
         * @param scopeURL - 
         */
        function updateRegistration(scopeURL: string);
        
        /**
         * @param scopeURL - 
         */
        function startWorker(scopeURL: string);
        
        /**
         * @param scopeURL - 
         */
        function skipWaiting(scopeURL: string);
        
        /**
         * @param versionId - 
         */
        function stopWorker(versionId: string);
        
        /**
         * @param versionId - 
         */
        function inspectWorker(versionId: string);
        
        /**
         * @param forceUpdateOnPageLoad - 
         */
        function setForceUpdateOnPageLoad(forceUpdateOnPageLoad: boolean);
        
        /**
         * @param origin - 
         * @param registrationId - 
         * @param data - 
         */
        function deliverPushMessage(origin: string, registrationId: string, data: string);
        
        /**
         * @param origin - 
         * @param registrationId - 
         * @param tag - 
         * @param lastChance - 
         */
        function dispatchSyncEvent(origin: string, registrationId: string, tag: string, lastChance: boolean);
        
        /**
         * @param targetId - 
         */
        function getTargetInfo(targetId: TargetID);
        
        /**
         * @param targetId - 
         */
        function activateTarget(targetId: TargetID);
        
        /**
         * @param workerId - 
         * @param url - 
         * @param versionId - 
         */
        function onWorkerCreated(handler: (workerId: string, url: string, versionId: string) => void);
        
        /**
         * @param workerId - 
         */
        function onWorkerTerminated(handler: (workerId: string) => void);
        
        /**
         * @param workerId - 
         * @param message - 
         */
        function onDispatchMessage(handler: (workerId: string, message: string) => void);
        
        /**
         * @param registrations - 
         */
        function onWorkerRegistrationUpdated(handler: (registrations: ServiceWorkerRegistration[]) => void);
        
        /**
         * @param versions - 
         */
        function onWorkerVersionUpdated(handler: (versions: ServiceWorkerVersion[]) => void);
        
        /**
         * @param errorMessage - 
         */
        function onWorkerErrorReported(handler: (errorMessage: ServiceWorkerErrorMessage) => void);
    }
    
    namespace Input {
        
        interface TouchPoint {
            
            /** State of the touch point. */
            state: string;
            
            /** X coordinate of the event relative to the main frame's viewport. */
            x: integer;
            
            /** Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport. */
            y: integer;
            
            /** X radius of the touch area (default: 1). */
            radiusX?: integer;
            
            /** Y radius of the touch area (default: 1). */
            radiusY?: integer;
            
            /** Rotation angle (default: 0.0). */
            rotationAngle?: number;
            
            /** Force (default: 1.0). */
            force?: number;
            
            /** Identifier used to track touch sources between events, must be unique within an event. */
            id?: number;
        }
        
        type GestureSourceType = string;
        
        /**
         * Dispatches a key event to the page.
         * @param type - Type of the key event.
         * @param modifiers - Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
         * @param timestamp - Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
         * @param text - Text as generated by processing a virtual key code with a keyboard layout. Not needed for for <code>keyUp</code> and <code>rawKeyDown</code> events (default: "")
         * @param unmodifiedText - Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: "").
         * @param keyIdentifier - Unique key identifier (e.g., 'U+0041') (default: "").
         * @param code - Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
         * @param key - Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
         * @param windowsVirtualKeyCode - Windows virtual key code (default: 0).
         * @param nativeVirtualKeyCode - Native virtual key code (default: 0).
         * @param autoRepeat - Whether the event was generated from auto repeat (default: false).
         * @param isKeypad - Whether the event was generated from the keypad (default: false).
         * @param isSystemKey - Whether the event was a system key event (default: false).
         */
        function dispatchKeyEvent(type: string, modifiers?: integer, timestamp?: number, text?: string, unmodifiedText?: string, keyIdentifier?: string, code?: string, key?: string, windowsVirtualKeyCode?: integer, nativeVirtualKeyCode?: integer, autoRepeat?: boolean, isKeypad?: boolean, isSystemKey?: boolean);
        
        /**
         * Dispatches a mouse event to the page.
         * @param type - Type of the mouse event.
         * @param x - X coordinate of the event relative to the main frame's viewport.
         * @param y - Y coordinate of the event relative to the main frame's viewport. 0 refers to the top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
         * @param modifiers - Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
         * @param timestamp - Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
         * @param button - Mouse button (default: "none").
         * @param clickCount - Number of times the mouse button was clicked (default: 0).
         */
        function dispatchMouseEvent(type: string, x: integer, y: integer, modifiers?: integer, timestamp?: number, button?: string, clickCount?: integer);
        
        /**
         * Dispatches a touch event to the page.
         * @param type - Type of the touch event.
         * @param touchPoints - Touch points.
         * @param modifiers - Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
         * @param timestamp - Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time).
         */
        function dispatchTouchEvent(type: string, touchPoints: TouchPoint[], modifiers?: integer, timestamp?: number);
        
        /**
         * Emulates touch event from the mouse event parameters.
         * @param type - Type of the mouse event.
         * @param x - X coordinate of the mouse pointer in DIP.
         * @param y - Y coordinate of the mouse pointer in DIP.
         * @param timestamp - Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970.
         * @param button - Mouse button.
         * @param deltaX - X delta in DIP for mouse wheel event (default: 0).
         * @param deltaY - Y delta in DIP for mouse wheel event (default: 0).
         * @param modifiers - Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).
         * @param clickCount - Number of times the mouse button was clicked (default: 0).
         */
        function emulateTouchFromMouseEvent(type: string, x: integer, y: integer, timestamp: number, button: string, deltaX?: number, deltaY?: number, modifiers?: integer, clickCount?: integer);
        
        /**
         * Synthesizes a pinch gesture over a time period by issuing appropriate touch events.
         * @param x - X coordinate of the start of the gesture in CSS pixels.
         * @param y - Y coordinate of the start of the gesture in CSS pixels.
         * @param scaleFactor - Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out).
         * @param relativeSpeed - Relative pointer speed in pixels per second (default: 800).
         * @param gestureSourceType - Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
         */
        function synthesizePinchGesture(x: integer, y: integer, scaleFactor: number, relativeSpeed?: integer, gestureSourceType?: GestureSourceType);
        
        /**
         * Synthesizes a scroll gesture over a time period by issuing appropriate touch events.
         * @param x - X coordinate of the start of the gesture in CSS pixels.
         * @param y - Y coordinate of the start of the gesture in CSS pixels.
         * @param xDistance - The distance to scroll along the X axis (positive to scroll left).
         * @param yDistance - The distance to scroll along the Y axis (positive to scroll up).
         * @param xOverscroll - The number of additional pixels to scroll back along the X axis, in addition to the given distance.
         * @param yOverscroll - The number of additional pixels to scroll back along the Y axis, in addition to the given distance.
         * @param preventFling - Prevent fling (default: true).
         * @param speed - Swipe speed in pixels per second (default: 800).
         * @param gestureSourceType - Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
         * @param repeatCount - The number of times to repeat the gesture (default: 0).
         * @param repeatDelayMs - The number of milliseconds delay between each repeat. (default: 250).
         * @param interactionMarkerName - The name of the interaction markers to generate, if not empty (default: "").
         */
        function synthesizeScrollGesture(x: integer, y: integer, xDistance?: integer, yDistance?: integer, xOverscroll?: integer, yOverscroll?: integer, preventFling?: boolean, speed?: integer, gestureSourceType?: GestureSourceType, repeatCount?: integer, repeatDelayMs?: integer, interactionMarkerName?: string);
        
        /**
         * Synthesizes a tap gesture over a time period by issuing appropriate touch events.
         * @param x - X coordinate of the start of the gesture in CSS pixels.
         * @param y - Y coordinate of the start of the gesture in CSS pixels.
         * @param duration - Duration between touchdown and touchup events in ms (default: 50).
         * @param tapCount - Number of times to perform the tap (e.g. 2 for double tap, default: 1).
         * @param gestureSourceType - Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type).
         */
        function synthesizeTapGesture(x: integer, y: integer, duration?: integer, tapCount?: integer, gestureSourceType?: GestureSourceType);
    }
    
    namespace LayerTree {
        
        /** Unique Layer identifier. */
        type LayerId = string;
        
        /** Unique snapshot identifier. */
        type SnapshotId = string;
        
        /** Rectangle where scrolling happens on the main thread. */
        interface ScrollRect {
            
            /** Rectangle itself. */
            rect: DOM.Rect;
            
            /** Reason for rectangle to force scrolling on the main thread */
            type: string;
        }
        
        /** Serialized fragment of layer picture along with its offset within the layer. */
        interface PictureTile {
            
            /** Offset from owning layer left boundary */
            x: number;
            
            /** Offset from owning layer top boundary */
            y: number;
            
            /** Base64-encoded snapshot data. */
            picture: string;
        }
        
        /** Information about a compositing layer. */
        interface Layer {
            
            /** The unique id for this layer. */
            layerId: LayerId;
            
            /** The id of parent (not present for root). */
            parentLayerId?: LayerId;
            
            /** The backend id for the node associated with this layer. */
            backendNodeId?: DOM.BackendNodeId;
            
            /** Offset from parent layer, X coordinate. */
            offsetX: number;
            
            /** Offset from parent layer, Y coordinate. */
            offsetY: number;
            
            /** Layer width. */
            width: number;
            
            /** Layer height. */
            height: number;
            
            /** Transformation matrix for layer, default is identity matrix */
            transform?: number[];
            
            /** Transform anchor point X, absent if no transform specified */
            anchorX?: number;
            
            /** Transform anchor point Y, absent if no transform specified */
            anchorY?: number;
            
            /** Transform anchor point Z, absent if no transform specified */
            anchorZ?: number;
            
            /** Indicates how many time this layer has painted. */
            paintCount: integer;
            
            /** Indicates whether this layer hosts any content, rather than being used for transform/scrolling purposes only. */
            drawsContent: boolean;
            
            /** Set if layer is not visible. */
            invisible?: boolean;
            
            /** Rectangles scrolling on main thread only. */
            scrollRects?: ScrollRect[];
        }
        
        /** Array of timings, one per paint step. */
        type PaintProfile = number[];
        
        /**
         * Enables compositing tree inspection.
         */
        function enable();
        
        /**
         * Disables compositing tree inspection.
         */
        function disable();
        
        /**
         * Provides the reasons why the given layer was composited.
         * @param layerId - The id of the layer for which we want to get the reasons it was composited.
         */
        function compositingReasons(layerId: LayerId);
        
        /**
         * Returns the layer snapshot identifier.
         * @param layerId - The id of the layer.
         */
        function makeSnapshot(layerId: LayerId);
        
        /**
         * Returns the snapshot identifier.
         * @param tiles - An array of tiles composing the snapshot.
         */
        function loadSnapshot(tiles: PictureTile[]);
        
        /**
         * Releases layer snapshot captured by the back-end.
         * @param snapshotId - The id of the layer snapshot.
         */
        function releaseSnapshot(snapshotId: SnapshotId);
        
        /**
         * @param snapshotId - The id of the layer snapshot.
         * @param minRepeatCount - The maximum number of times to replay the snapshot (1, if not specified).
         * @param minDuration - The minimum duration (in seconds) to replay the snapshot.
         * @param clipRect - The clip rectangle to apply when replaying the snapshot.
         */
        function profileSnapshot(snapshotId: SnapshotId, minRepeatCount?: integer, minDuration?: number, clipRect?: DOM.Rect);
        
        /**
         * Replays the layer snapshot and returns the resulting bitmap.
         * @param snapshotId - The id of the layer snapshot.
         * @param fromStep - The first step to replay from (replay from the very start if not specified).
         * @param toStep - The last step to replay to (replay till the end if not specified).
         * @param scale - The scale to apply while replaying (defaults to 1).
         */
        function replaySnapshot(snapshotId: SnapshotId, fromStep?: integer, toStep?: integer, scale?: number);
        
        /**
         * Replays the layer snapshot and returns canvas log.
         * @param snapshotId - The id of the layer snapshot.
         */
        function snapshotCommandLog(snapshotId: SnapshotId);
        
        /**
         * @param layers - Layer tree, absent if not in the comspositing mode.
         */
        function onLayerTreeDidChange(handler: (layers?: Layer[]) => void);
        
        /**
         * @param layerId - The id of the painted layer.
         * @param clip - Clip rectangle.
         */
        function onLayerPainted(handler: (layerId: LayerId, clip: DOM.Rect) => void);
    }
    
    namespace DeviceOrientation {
        
        /**
         * Overrides the Device Orientation.
         * @param alpha - Mock alpha
         * @param beta - Mock beta
         * @param gamma - Mock gamma
         */
        function setDeviceOrientationOverride(alpha: number, beta: number, gamma: number);
        
        /**
         * Clears the overridden Device Orientation.
         */
        function clearDeviceOrientationOverride();
    }
    
    namespace Tracing {
        
        /** Configuration for memory dump. Used only when "memory-infra" category is enabled. */
        interface MemoryDumpConfig {
            [key: string]: string;
        }
        
        interface TraceConfig {
            
            /** Controls how the trace buffer stores data. */
            recordMode?: string;
            
            /** Turns on JavaScript stack sampling. */
            enableSampling?: boolean;
            
            /** Turns on system tracing. */
            enableSystrace?: boolean;
            
            /** Turns on argument filter. */
            enableArgumentFilter?: boolean;
            
            /** Included category filters. */
            includedCategories?: string[];
            
            /** Excluded category filters. */
            excludedCategories?: string[];
            
            /** Configuration to synthesize the delays in tracing. */
            syntheticDelays?: string[];
            
            /** Configuration for memory dump triggers. Used only when "memory-infra" category is enabled. */
            memoryDumpConfig?: MemoryDumpConfig;
        }
        
        /**
         * Start trace events collection.
         * @param categories - Category/tag filter
         * @param options - Tracing options
         * @param bufferUsageReportingInterval - If set, the agent will issue bufferUsage events at this interval, specified in milliseconds
         * @param transferMode - Whether to report trace events as series of dataCollected events or to save trace to a stream (defaults to <code>ReportEvents</code>).
         * @param traceConfig - 
         */
        function start(categories?: string, options?: string, bufferUsageReportingInterval?: number, transferMode?: string, traceConfig?: TraceConfig);
        
        /**
         * Stop trace events collection.
         */
        function end();
        
        /**
         * Gets supported tracing categories.
         */
        function getCategories();
        
        /**
         * Request a global memory dump.
         */
        function requestMemoryDump();
        
        /**
         * Record a clock sync marker in the trace.
         * @param syncId - The ID of this clock sync marker
         */
        function recordClockSyncMarker(syncId: string);
        
        /**
         * Contains an bucket of collected trace events. When tracing is stopped collected events will be send as a sequence of dataCollected events followed by tracingComplete event.
         * @param value - 
         */
        function onDataCollected(handler: (value: object[]) => void);
        
        /**
         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were delivered via dataCollected events.
         * @param stream - A handle of the stream that holds resulting trace data.
         */
        function onTracingComplete(handler: (stream?: IO.StreamHandle) => void);
        
        /**
         * @param percentFull - A number in range [0..1] that indicates the used size of event buffer as a fraction of its total size.
         * @param eventCount - An approximate number of events in the trace log.
         * @param value - A number in range [0..1] that indicates the used size of event buffer as a fraction of its total size.
         */
        function onBufferUsage(handler: (percentFull?: number, eventCount?: number, value?: number) => void);
    }
    
    namespace Animation {
        
        /** Animation instance. */
        interface Animation {
            
            /** <code>Animation</code>'s id. */
            id: string;
            
            /** <code>Animation</code>'s name. */
            name: string;
            
            /** <code>Animation</code>'s internal paused state. */
            pausedState: boolean;
            
            /** <code>Animation</code>'s play state. */
            playState: string;
            
            /** <code>Animation</code>'s playback rate. */
            playbackRate: number;
            
            /** <code>Animation</code>'s start time. */
            startTime: number;
            
            /** <code>Animation</code>'s current time. */
            currentTime: number;
            
            /** <code>Animation</code>'s source animation node. */
            source: AnimationEffect;
            
            /** Animation type of <code>Animation</code>. */
            type: string;
            
            /** A unique ID for <code>Animation</code> representing the sources that triggered this CSS animation/transition. */
            cssId?: string;
        }
        
        /** AnimationEffect instance */
        interface AnimationEffect {
            
            /** <code>AnimationEffect</code>'s delay. */
            delay: number;
            
            /** <code>AnimationEffect</code>'s end delay. */
            endDelay: number;
            
            /** <code>AnimationEffect</code>'s playbackRate. */
            playbackRate: number;
            
            /** <code>AnimationEffect</code>'s iteration start. */
            iterationStart: number;
            
            /** <code>AnimationEffect</code>'s iterations. */
            iterations: number;
            
            /** <code>AnimationEffect</code>'s iteration duration. */
            duration: number;
            
            /** <code>AnimationEffect</code>'s playback direction. */
            direction: string;
            
            /** <code>AnimationEffect</code>'s fill mode. */
            fill: string;
            
            /** <code>AnimationEffect</code>'s target node. */
            backendNodeId: DOM.BackendNodeId;
            
            /** <code>AnimationEffect</code>'s keyframes. */
            keyframesRule?: KeyframesRule;
            
            /** <code>AnimationEffect</code>'s timing function. */
            easing: string;
        }
        
        /** Keyframes Rule */
        interface KeyframesRule {
            
            /** CSS keyframed animation's name. */
            name?: string;
            
            /** List of animation keyframes. */
            keyframes: KeyframeStyle[];
        }
        
        /** Keyframe Style */
        interface KeyframeStyle {
            
            /** Keyframe's time offset. */
            offset: string;
            
            /** <code>AnimationEffect</code>'s timing function. */
            easing: string;
        }
        
        /**
         * Enables animation domain notifications.
         */
        function enable();
        
        /**
         * Disables animation domain notifications.
         */
        function disable();
        
        /**
         * Gets the playback rate of the document timeline.
         */
        function getPlaybackRate();
        
        /**
         * Sets the playback rate of the document timeline.
         * @param playbackRate - Playback rate for animations on page
         */
        function setPlaybackRate(playbackRate: number);
        
        /**
         * Returns the current time of the an animation.
         * @param id - Id of animation.
         */
        function getCurrentTime(id: string);
        
        /**
         * Sets the paused state of a set of animations.
         * @param animations - Animations to set the pause state of.
         * @param paused - Paused state to set to.
         */
        function setPaused(animations: string[], paused: boolean);
        
        /**
         * Sets the timing of an animation node.
         * @param animationId - Animation id.
         * @param duration - Duration of the animation.
         * @param delay - Delay of the animation.
         */
        function setTiming(animationId: string, duration: number, delay: number);
        
        /**
         * Seek a set of animations to a particular time within each animation.
         * @param animations - List of animation ids to seek.
         * @param currentTime - Set the current time of each animation.
         */
        function seekAnimations(animations: string[], currentTime: number);
        
        /**
         * Releases a set of animations to no longer be manipulated.
         * @param animations - List of animation ids to seek.
         */
        function releaseAnimations(animations: string[]);
        
        /**
         * Gets the remote object of the Animation.
         * @param animationId - Animation id.
         */
        function resolveAnimation(animationId: string);
        
        /**
         * Event for each animation that has been created.
         * @param id - Id of the animation that was created.
         */
        function onAnimationCreated(handler: (id: string) => void);
        
        /**
         * Event for animation that has been started.
         * @param animation - Animation that was started.
         */
        function onAnimationStarted(handler: (animation: Animation) => void);
        
        /**
         * Event for when an animation has been cancelled.
         * @param id - Id of the animation that was cancelled.
         */
        function onAnimationCanceled(handler: (id: string) => void);
    }
    
    namespace Accessibility {
        
        /** Unique accessibility node identifier. */
        type AXNodeId = string;
        
        /** Enum of possible property types. */
        type AXValueType = string;
        
        /** Enum of possible property sources. */
        type AXValueSourceType = string;
        
        /** Enum of possible native property sources (as a subtype of a particular AXValueSourceType). */
        type AXValueNativeSourceType = string;
        
        /** A single source for a computed AX property. */
        interface AXValueSource {
            
            /** What type of source this is. */
            type: AXValueSourceType;
            
            /** The value of this property source. */
            value?: AXValue;
            
            /** The name of the relevant attribute, if any. */
            attribute?: string;
            
            /** The value of the relevant attribute, if any. */
            attributeValue?: AXValue;
            
            /** Whether this source is superseded by a higher priority source. */
            superseded?: boolean;
            
            /** The native markup source for this value, e.g. a <label> element. */
            nativeSource?: AXValueNativeSourceType;
            
            /** The value, such as a node or node list, of the native source. */
            nativeSourceValue?: AXValue;
            
            /** Whether the value for this property is invalid. */
            invalid?: boolean;
            
            /** Reason for the value being invalid, if it is. */
            invalidReason?: string;
        }
        
        interface AXRelatedNode {
            
            /** The BackendNodeId of the related node. */
            backendNodeId: DOM.BackendNodeId;
            
            /** The IDRef value provided, if any. */
            idref?: string;
            
            /** The text alternative of this node in the current context. */
            text?: string;
        }
        
        interface AXProperty {
            
            /** The name of this property. */
            name: string;
            
            /** The value of this property. */
            value: AXValue;
        }
        
        /** A single computed AX property. */
        interface AXValue {
            
            /** The type of this value. */
            type: AXValueType;
            
            /** The computed value of this property. */
            value?: any;
            
            /** One or more related nodes, if applicable. */
            relatedNodes?: AXRelatedNode[];
            
            /** The sources which contributed to the computation of this property. */
            sources?: AXValueSource[];
        }
        
        /** States which apply to every AX node. */
        type AXGlobalStates = string;
        
        /** Attributes which apply to nodes in live regions. */
        type AXLiveRegionAttributes = string;
        
        type AXWidgetAttributes = string;
        
        /** States which apply to widgets. */
        type AXWidgetStates = string;
        
        /** Relationships between elements other than parent/child/sibling. */
        type AXRelationshipAttributes = string;
        
        /** A node in the accessibility tree. */
        interface AXNode {
            
            /** Unique identifier for this node. */
            nodeId: AXNodeId;
            
            /** Whether this node is ignored for accessibility */
            ignored: boolean;
            
            /** Collection of reasons why this node is hidden. */
            ignoredReasons?: AXProperty[];
            
            /** This <code>Node</code>'s role, whether explicit or implicit. */
            role?: AXValue;
            
            /** The accessible name for this <code>Node</code>. */
            name?: AXValue;
            
            /** The accessible description for this <code>Node</code>. */
            description?: AXValue;
            
            /** The value for this <code>Node</code>. */
            value?: AXValue;
            
            /** All other properties */
            properties?: AXProperty[];
        }
        
        /**
         * Fetches the accessibility node for this DOM node, if it exists.
         * @param nodeId - ID of node to get accessibility node for.
         */
        function getAXNode(nodeId: DOM.NodeId);
    }
    
    namespace Storage {
        
        /** Enum of possible storage types. */
        type StorageType = string;
        
        /**
         * Clears storage for origin.
         * @param origin - Security origin.
         * @param storageTypes - Comma separated origin names.
         */
        function clearDataForOrigin(origin: string, storageTypes: string);
    }
    
    /** The Browser domain allows listing, creating, activating and attaching to the targets. */
    namespace Browser {
        
        type TargetID = string;
        
        interface TargetInfo {
            
            targetId: TargetID;
            
            type: string;
            
            title: string;
            
            url: string;
        }
        
        /**
         * Returns target information for all potential targets.
         */
        function getTargets();
        
        /**
         * Attaches to the target with given id.
         * @param targetId - Target id.
         */
        function attach(targetId: TargetID);
        
        /**
         * Detaches from the target with given id.
         * @param targetId - 
         */
        function detach(targetId: TargetID);
        
        /**
         * Sends protocol message to the target with given id.
         * @param targetId - 
         * @param message - 
         */
        function sendMessage(targetId: TargetID, message: string);
        
        /**
         * Dispatches protocol message from the target with given id.
         * @param targetId - 
         * @param message - 
         */
        function onDispatchMessage(handler: (targetId: TargetID, message: string) => void);
    }
}
